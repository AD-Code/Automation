{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "apis": [
        {
            "internal": false,
            "path": "/alerts"
        },
        {
            "internal": false,
            "path": "/authconfig"
        },
        {
            "internal": false,
            "path": "/cloud"
        },
        {
            "internal": false,
            "path": "/cluster"
        },
        {
            "internal": false,
            "path": "/clusters"
        },
        {
            "internal": false,
            "path": "/data_at_rest_encryption"
        },
        {
            "internal": false,
            "path": "/data_at_rest_encryption_certificates"
        },
        {
            "internal": false,
            "path": "/disks"
        },
        {
            "internal": false,
            "path": "/events"
        },
        {
            "internal": false,
            "path": "/file_groups"
        },
        {
            "internal": false,
            "path": "/ha"
        },
        {
            "internal": false,
            "path": "/health_checks"
        },
        {
            "internal": false,
            "path": "/hosts"
        },
        {
            "internal": false,
            "path": "/http_proxies"
        },
        {
            "internal": false,
            "path": "/images"
        },
        {
            "internal": false,
            "path": "/iscsi_clients"
        },
        {
            "internal": false,
            "path": "/networks"
        },
        {
            "internal": false,
            "path": "/protection_domains"
        },
        {
            "internal": false,
            "path": "/remote_sites"
        },
        {
            "internal": false,
            "path": "/snapshots"
        },
        {
            "internal": false,
            "path": "/snmp"
        },
        {
            "internal": false,
            "path": "/storage_containers"
        },
        {
            "internal": false,
            "path": "/tasks"
        },
        {
            "internal": false,
            "path": "/vdisks"
        },
        {
            "internal": false,
            "path": "/virtual_disks"
        },
        {
            "internal": false,
            "path": "/vms"
        },
        {
            "internal": false,
            "path": "/volume_groups"
        },
        {
            "internal": false,
            "path": "/vstores"
        }
    ]
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/PrismGateway/services/rest/v2.0",
    "resourcePath": "/alerts",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/alerts/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of Alerts.",
                    "notes": "Get the list of Alerts generated in the cluster.",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getAlerts",
                    "parameters": [
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of alerts",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "resolved",
                            "description": "Alerts which have been resolved",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "auto_resolved",
                            "description": "Alerts which have been auto resolved",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Alerts which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "severity",
                            "description": "Alert severities",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "alert_type_uuid",
                            "description": "Alert type ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "entity_type",
                            "description": "Entity type",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "entity_ids",
                            "description": "Entity ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "impact_types",
                            "description": "Impact Types",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "classification",
                            "description": "Classification",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "alert_ids",
                            "description": "Alert ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "get_causes",
                            "description": "Get causes",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "detailed_info",
                            "description": "Get detailed info",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/alerts/acknowledge",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Acknowledge Alerts.",
                    "notes": "Acknowledge alerts using a filter criteria.",
                    "type": "create.dto.alerts.ManageAlertsDTO",
                    "nickname": "acknowledgeAlerts",
                    "parameters": [
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "severity",
                            "description": "Severity",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "impact_types",
                            "description": "Impact Type of alerts",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "classifications",
                            "description": "Classification of alerts",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "entity_type",
                            "description": "Entity Type",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "entity_type_ids",
                            "description": "Entity Type Ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of alerts",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                }
            ]
        },
        {
            "internal": false,
            "path": "/alerts/configuration",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the Alert configuration.",
                    "notes": "Get the configuration that is used to send Alert emails.",
                    "type": "get.dto.appliance.configuration.AlertConfigDTO",
                    "nickname": "getAlertConfig",
                    "parameters": [],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PATCH",
                    "summary": "Modify the Alert configuration.",
                    "notes": "Modify the configuration that is used to send Alert emails.",
                    "type": "patch.dto.appliance.configuration.AlertConfigDTO",
                    "nickname": "patchAlertConfig",
                    "parameters": [
                        {
                            "description": "new Alert configuration.",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "patch.dto.RequestDTO&lt;patch.dto.appliance.configuration.AlertConfigDTO&gt;"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Update the Alert configuration.",
                    "notes": "Update the configuration that is used to send Alert emails.",
                    "type": "update.dto.appliance.configuration.AlertConfigDTO",
                    "nickname": "updateAlertConfig",
                    "parameters": [
                        {
                            "description": "new Alert configuration.",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.appliance.configuration.AlertConfigDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/alerts/policies",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get all User Defined Alert Policies",
                    "notes": "Get all User Defined Alert Policies",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertPolicyDTO&gt;",
                    "nickname": "getAlertPolicies",
                    "parameters": [
                        {
                            "name": "entity_type",
                            "description": "Entity type",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "entity_ids",
                            "description": "Entity ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Create a new User Defined Alert Policy",
                    "notes": "Create a new User Defined Alert Policy.",
                    "type": "create.dto.alerts.AlertPolicyDTO",
                    "nickname": "createPolicy",
                    "parameters": [
                        {
                            "description": "New User Defined Alert Policy",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.alerts.AlertPolicyDTO"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Update a User Defined Alert Policy",
                    "notes": "Update a User Defined Alert Policy.",
                    "type": "update.dto.alerts.AlertPolicyDTO",
                    "nickname": "updatePolicy",
                    "parameters": [
                        {
                            "description": "Alert Policy with updated configurations",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.alerts.AlertPolicyDTO"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                }
            ]
        },
        {
            "internal": false,
            "path": "/alerts/policies/{policy_id}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete the specified User Defined Alert Policy",
                    "notes": "Delete the specified User Defined Alert Policy",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "deleteAlertPolicy",
                    "parameters": [
                        {
                            "name": "policy_id",
                            "description": "Alert Policy ID ",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the User Defined Alert Policy",
                    "notes": "Get the User Defined Alert Policy",
                    "type": "get.dto.alerts.AlertPolicyDTO",
                    "nickname": "getAlertPolicy",
                    "parameters": [
                        {
                            "name": "policy_id",
                            "description": "Alert Policy ID ",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                }
            ]
        },
        {
            "internal": false,
            "path": "/alerts/resolve",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Resolve Alerts.",
                    "notes": "Resolve alerts using a filter criteria.",
                    "type": "create.dto.alerts.ManageAlertsDTO",
                    "nickname": "resolveAlerts",
                    "parameters": [
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "severity",
                            "description": "Severity",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "impact_types",
                            "description": "Impact Type of alerts",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "classifications",
                            "description": "Classifications of alerts",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "entity_type",
                            "description": "Entity Type",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "entity_type_ids",
                            "description": "Entity Type Ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of alerts",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                }
            ]
        },
        {
            "internal": false,
            "path": "/alerts/{id}/acknowledge",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Acknowledge Alert.",
                    "notes": "Acknowledge Alert with the specified Id.",
                    "type": "create.dto.alerts.ResolveAcknowledgeAlertDTO",
                    "nickname": "acknowledgeAlert",
                    "parameters": [
                        {
                            "name": "id",
                            "description": "Alert Id",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/alerts/{id}/resolve",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Resolve Alert.",
                    "notes": "Resolve Alert with the specified Id.",
                    "type": "create.dto.alerts.ResolveAcknowledgeAlertDTO",
                    "nickname": "resolveAlert",
                    "parameters": [
                        {
                            "name": "id",
                            "description": "Alert Id",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "create.dto.alerts.AlertPolicyDTO": {
            "id": "create.dto.alerts.AlertPolicyDTO",
            "required": [
                "title",
                "enabled",
                "auto_resolve",
                "filter",
                "trigger_conditions"
            ],
            "properties": {
                "auto_resolve": {
                    "description": "Whether the auto resolve feature is enabled for this policy",
                    "notes": "Whether the auto resolve feature is enabled for this policy",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "created_by": {
                    "description": "Username of the user who created the Policy",
                    "notes": "Username who created the Policy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "description": {
                    "description": "Description of the Policy.",
                    "notes": "Description of the Policy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "enabled": {
                    "description": "Enable/Disable flag for the policy",
                    "notes": "Enable/Disable flag for the policy",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "error_on_conflict": {
                    "description": "Error if conflicting Alert Policies are found",
                    "notes": "Error if conflicting Alert Policies are found",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "filter": {
                    "description": "Filter expression for the policy in FIQL",
                    "notes": "Filter expression for the policy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "id": {
                    "description": "ID of the Policy",
                    "notes": "ID of the Policy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "impact_types": {
                    "description": "Impact Types that are to be associated with the resulting Alert",
                    "items": {
                        "type": "string"
                    },
                    "notes": "Impact Types that are to be associated with the resulting Alert",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "last_updated_timestamp_in_usecs": {
                    "description": "Last updated timestamp of the Policy. Will be used as the CAS value during updates.",
                    "format": "int64",
                    "notes": "Last updated timestamp of the Policy.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "policies_to_override": {
                    "description": "List of Alert Policy Ids to override",
                    "items": {
                        "type": "string"
                    },
                    "notes": "List of Alert Policy Ids to override",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "related_policies": {
                    "description": "List of Alert Policies that are related to the entities of the current policy",
                    "items": {
                        "$ref": "create.dto.alerts.AlertPolicyDTO$RelatedPolicies"
                    },
                    "notes": "List of Alert Policies that are related to the entities of the current policy",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "title": {
                    "description": "Title of the Policy",
                    "notes": "Title of the Policy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "trigger_conditions": {
                    "description": "Trigger conditions for the policy. If there are multiple Trigger conditions, they will be ANDed.",
                    "items": {
                        "$ref": "create.dto.alerts.AlertPolicyDTO$TriggerCondition"
                    },
                    "notes": "Trigger conditions for the policy",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "trigger_wait_period_in_secs": {
                    "description": "Duration to wait before triggering the alert when the specified condition is met",
                    "format": "int64",
                    "notes": "Duration to wait before triggering the alert when the specified condition is met",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.alerts.AlertPolicyDTO$RelatedPolicies": {
            "id": "create.dto.alerts.AlertPolicyDTO$RelatedPolicies",
            "required": [],
            "properties": {
                "entity_uuid": {
                    "description": "Entity UUID",
                    "notes": "Entity UUID",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "policy_ids": {
                    "description": "Policy Ids that are related to the specified entity",
                    "items": {
                        "type": "string"
                    },
                    "notes": "Policy Ids that are related to the specified entity",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.alerts.AlertPolicyDTO$TriggerCondition": {
            "id": "create.dto.alerts.AlertPolicyDTO$TriggerCondition",
            "required": [
                "condition_type",
                "condition",
                "severity_level"
            ],
            "properties": {
                "condition": {
                    "description": "Conditions to be met to trigger the alert. Conditions are expressed in FIQL",
                    "notes": "Conditions to be met to trigger the alert",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "condition_type": {
                    "description": "Type of condition. Example types: StaticThreshold, Anomaly, SafetyZone.",
                    "enum": [
                        "STATIC_THRESHOLD",
                        "ANOMALY",
                        "SAFETY_ZONE"
                    ],
                    "notes": "Type of condition",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "severity_level": {
                    "description": "Threshold level to be associated with the Alert.Example levels: INFO, WARNING, CRITICAL.",
                    "enum": [
                        "CRITICAL",
                        "WARNING",
                        "INFO",
                        "AUDIT"
                    ],
                    "notes": "Threshold level to be associated with the Alert. Example levels: INFO, WARNING, CRITICAL.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.alerts.ManageAlertsDTO": {
            "id": "create.dto.alerts.ManageAlertsDTO",
            "required": [],
            "properties": {
                "alert_status_list": {
                    "items": {
                        "$ref": "create.dto.alerts.ResolveAcknowledgeAlertDTO"
                    },
                    "type": "array"
                },
                "num_failed_updates": {
                    "format": "int32",
                    "type": "integer"
                },
                "num_successful_updates": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "create.dto.alerts.ResolveAcknowledgeAlertDTO": {
            "id": "create.dto.alerts.ResolveAcknowledgeAlertDTO",
            "required": [],
            "properties": {
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "successful": {
                    "type": "boolean"
                }
            }
        },
        "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.ResultContentDescriptor"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.alerts.AlertPolicyDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.alerts.AlertPolicyDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertPolicyDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.dto.EntityMetadata": {
            "id": "get.dto.EntityMetadata",
            "required": [],
            "properties": {
                "additional_fields": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "context_hint_field": {
                    "type": "string"
                },
                "context_hint_value": {
                    "type": "string"
                },
                "entity_id": {
                    "type": "string"
                },
                "entity_name": {
                    "type": "string"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                }
            }
        },
        "get.dto.ResultContentDescriptor": {
            "id": "get.dto.ResultContentDescriptor",
            "required": [],
            "properties": {
                "metadata": {
                    "$ref": "get.dto.ResultMetadata"
                },
                "perspectives": {
                    "items": {
                        "$ref": "get.dto.ResultContentDescriptor$Perspective"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.ResultContentDescriptor$Perspective": {
            "id": "get.dto.ResultContentDescriptor$Perspective",
            "required": [],
            "properties": {
                "format": {
                    "enum": [
                        "TABLE",
                        "BAR_CHART",
                        "PIE_CHART",
                        "TIME_SERIES",
                        "KEY_VALUE",
                        "COUNT",
                        "HEALTH_SUMMARY",
                        "ALERT_INFO",
                        "CAPACITY",
                        "OTHER"
                    ],
                    "type": "string"
                },
                "metadata": {
                    "$ref": "get.dto.ResultMetadata"
                },
                "query": {},
                "result": {},
                "type": {
                    "type": "string"
                }
            }
        },
        "get.dto.ResultMetadata": {
            "id": "get.dto.ResultMetadata",
            "required": [],
            "properties": {
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filters": {
                    "items": {
                        "$ref": "get.dto.ResultMetadata$Filter"
                    },
                    "type": "array"
                },
                "instances": {
                    "items": {
                        "$ref": "get.dto.EntityMetadata"
                    },
                    "type": "array"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "get.dto.ResultMetadata$Filter": {
            "id": "get.dto.ResultMetadata$Filter",
            "required": [],
            "properties": {
                "display_for_rhs": {
                    "type": "string"
                },
                "lhs": {
                    "type": "string"
                },
                "operator": {
                    "description": "Operator for the filter.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "rhs": {
                    "type": "string"
                }
            }
        },
        "get.dto.alerts.AlertCauseDTO": {
            "id": "get.dto.alerts.AlertCauseDTO",
            "required": [],
            "properties": {
                "actions": {
                    "description": "Possible actions to resolve this alert",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "additional_links": {
                    "description": "Additional links",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "alert_namespace": {
                    "description": "Namespace this alert belongs to",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "cause": {
                    "description": "Detailed description",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "chart_queries": {
                    "$ref": "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;",
                    "description": "Charts that are relevant to this cause",
                    "typeName": "DEFAULT"
                },
                "details": {
                    "description": "Symptoms for this cause",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "has_global_details": {
                    "description": "Whether the alert has global details or not",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "id": {
                    "description": "Cause Id",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "num_resolved_count": {
                    "description": "Number of times this cause has resolved the alert",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "parent_cause_id": {
                    "description": "Id of the alert/cause this is a possible cause for",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "title": {
                    "description": "Short description",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "troubleshooting_steps": {
                    "description": "Steps to determine whether this is the cause.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO": {
            "id": "get.dto.alerts.AlertDTO",
            "required": [],
            "properties": {
                "acknowledged": {
                    "type": "boolean"
                },
                "acknowledged_by_username": {
                    "type": "string"
                },
                "acknowledged_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "affected_entities": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$AffectedEntity"
                    },
                    "type": "array"
                },
                "alert_details": {
                    "$ref": "get.dto.alerts.AlertDTO$AlertDetailsDTO"
                },
                "alert_title": {
                    "type": "string"
                },
                "alert_type_uuid": {
                    "type": "string"
                },
                "auto_resolved": {
                    "type": "boolean"
                },
                "check_id": {
                    "type": "string"
                },
                "classifications": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "context_types": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "context_values": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "created_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "detailed_message": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "impact_types": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "last_occurrence_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "node_uuid": {
                    "type": "string"
                },
                "originating_cluster_uuid": {
                    "type": "string"
                },
                "possible_causes": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertCauseDTO"
                    },
                    "type": "array"
                },
                "resolved": {
                    "type": "boolean"
                },
                "resolved_by_username": {
                    "type": "string"
                },
                "resolved_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "service_v_m_id": {
                    "type": "string"
                },
                "severity": {
                    "description": "This field describes the severity of the alert.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "user_defined": {
                    "type": "boolean"
                }
            }
        },
        "get.dto.alerts.AlertDTO$AffectedEntity": {
            "id": "get.dto.alerts.AlertDTO$AffectedEntity",
            "required": [],
            "properties": {
                "entity_name": {
                    "type": "string"
                },
                "entity_type": {
                    "type": "string"
                },
                "entity_type_display_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "get.dto.alerts.AlertDTO$AlertDetailsDTO": {
            "id": "get.dto.alerts.AlertDTO$AlertDetailsDTO",
            "required": [],
            "properties": {
                "metric_details": {
                    "description": "List of metric details associated with the alert",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$MetricDetails"
                    },
                    "notes": "List of metric details associated with the alert",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "severity_trails": {
                    "description": "List that contains severity level change details",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$SeverityTrail"
                    },
                    "notes": "List that contains severity level change details",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$MetricDetails": {
            "id": "get.dto.alerts.AlertDTO$MetricDetails",
            "required": [],
            "properties": {
                "comparison_operator": {
                    "description": "Comparison Operator to be applied for teh values.",
                    "notes": "Comparison Operator",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "condition_type": {
                    "description": "Condition Type that the current metric is associated with.",
                    "enum": [
                        "STATIC_THRESHOLD",
                        "ANOMALY",
                        "SAFETY_ZONE"
                    ],
                    "notes": "Condition Type that the current metric is associated with.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "data_type": {
                    "description": "Data Type of the value.",
                    "enum": [
                        "LONG",
                        "DOUBLE",
                        "BOOLEAN",
                        "STRING"
                    ],
                    "notes": "Data Type of the value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entity_id": {
                    "description": "UUID of the entity",
                    "notes": "UUID of the entity",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entity_type": {
                    "description": "Entity Type",
                    "notes": "Entity Type",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_display_name": {
                    "description": "Display name of the metric",
                    "notes": "Display name of the metric",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_name": {
                    "description": "Name of the metric",
                    "notes": "Name of the metric",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_value_details": {
                    "description": "List of metric values at different instances of time in the alert lifecycle",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$MetricValueDetails"
                    },
                    "notes": "List of metric values at different instances of time in the alert lifecycle",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "unit": {
                    "description": "Unit of the metric value.",
                    "notes": "Unit of the metric value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$MetricValueDetails": {
            "id": "get.dto.alerts.AlertDTO$MetricValueDetails",
            "required": [],
            "properties": {
                "metric_threshold_value": {
                    "description": "Threshold value of the metric that was specified in the policy at that given time.",
                    "notes": "Threshold value of the metric that was specified in the policy at that given time.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_value": {
                    "description": "Actual value of the metric at that given time.",
                    "notes": "Actual value of the metric at that given time.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "state_change_time_stamp_in_usecs": {
                    "description": "Time at which the alert's state change occurred.",
                    "format": "int64",
                    "notes": "Time at which the alert's state change occurred.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$SeverityTrail": {
            "id": "get.dto.alerts.AlertDTO$SeverityTrail",
            "required": [],
            "properties": {
                "severity": {
                    "description": "Severity level of the alert. Can be INFO, WARNING or CRITICAL",
                    "notes": "Severity level of the alert. Can be INFO, WARNING or CRITICAL",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "severity_change_timestamp_in_usecs": {
                    "description": "Time at which the severity level change occurred",
                    "format": "int64",
                    "notes": "Time at which the severity level change occurred",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertPolicyDTO": {
            "id": "get.dto.alerts.AlertPolicyDTO",
            "required": [],
            "properties": {
                "auto_resolve": {
                    "description": "Whether the auto resolve feature is enabled for this policy",
                    "notes": "Whether the auto resolve feature is enabled for this policy",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "created_by": {
                    "description": "Username of the user who created the Policy",
                    "notes": "Username who created the Policy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "description": {
                    "description": "Description of the Policy.",
                    "notes": "Description of the Policy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "enabled": {
                    "description": "Enable/Disable flag for the policy",
                    "notes": "Enable/Disable flag for the policy",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "error_on_conflict": {
                    "description": "Error if conflicting Alert Policies are found",
                    "notes": "Error if conflicting Alert Policies are found",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "filter": {
                    "description": "Filter expression for the policy in FIQL",
                    "notes": "Filter expression for the policy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "id": {
                    "description": "ID of the Policy",
                    "notes": "ID of the Policy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "impact_types": {
                    "description": "Impact Types that are to be associated with the resulting Alert",
                    "items": {
                        "type": "string"
                    },
                    "notes": "Impact Types that are to be associated with the resulting Alert",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "last_updated_timestamp_in_usecs": {
                    "description": "Last updated timestamp of the Policy. Will be used as the CAS value during updates.",
                    "format": "int64",
                    "notes": "Last updated timestamp of the Policy.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "policies_to_override": {
                    "description": "List of Alert Policy Ids to override",
                    "items": {
                        "type": "string"
                    },
                    "notes": "List of Alert Policy Ids to override",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "related_policies": {
                    "description": "List of Alert Policies that are related to the entities of the current policy",
                    "items": {
                        "$ref": "get.dto.alerts.AlertPolicyDTO$RelatedPolicies"
                    },
                    "notes": "List of Alert Policies that are related to the entities of the current policy",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "title": {
                    "description": "Title of the Policy",
                    "notes": "Title of the Policy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "trigger_conditions": {
                    "description": "Trigger conditions for the policy. If there are multiple Trigger conditions, they will be ANDed.",
                    "items": {
                        "$ref": "get.dto.alerts.AlertPolicyDTO$TriggerCondition"
                    },
                    "notes": "Trigger conditions for the policy",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "trigger_wait_period_in_secs": {
                    "description": "Duration to wait before triggering the alert when the specified condition is met",
                    "format": "int64",
                    "notes": "Duration to wait before triggering the alert when the specified condition is met",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertPolicyDTO$RelatedPolicies": {
            "id": "get.dto.alerts.AlertPolicyDTO$RelatedPolicies",
            "required": [],
            "properties": {
                "entity_uuid": {
                    "description": "Entity UUID",
                    "notes": "Entity UUID",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "policy_ids": {
                    "description": "Policy Ids that are related to the specified entity",
                    "items": {
                        "type": "string"
                    },
                    "notes": "Policy Ids that are related to the specified entity",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertPolicyDTO$TriggerCondition": {
            "id": "get.dto.alerts.AlertPolicyDTO$TriggerCondition",
            "required": [],
            "properties": {
                "condition": {
                    "description": "Conditions to be met to trigger the alert. Conditions are expressed in FIQL",
                    "notes": "Conditions to be met to trigger the alert",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "condition_type": {
                    "description": "Type of condition. Example types: StaticThreshold, Anomaly, SafetyZone.",
                    "enum": [
                        "STATIC_THRESHOLD",
                        "ANOMALY",
                        "SAFETY_ZONE"
                    ],
                    "notes": "Type of condition",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "severity_level": {
                    "description": "Threshold level to be associated with the Alert.Example levels: INFO, WARNING, CRITICAL.",
                    "enum": [
                        "CRITICAL",
                        "WARNING",
                        "INFO",
                        "AUDIT"
                    ],
                    "notes": "Threshold level to be associated with the Alert. Example levels: INFO, WARNING, CRITICAL.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.appliance.configuration.AlertConfigDTO": {
            "id": "get.dto.appliance.configuration.AlertConfigDTO",
            "description": "DTO representing the configuration of alerts",
            "required": [],
            "properties": {
                "default_nutanix_email": {
                    "description": "Default Nutanix email to which Alert emails would be sent",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "email_config_rules": {
                    "description": "Rules for Email Configuration.",
                    "items": {
                        "$ref": "get.dto.appliance.configuration.AlertConfigDTO$EmailConfigurationRule"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "email_contact_list": {
                    "description": "List of email contacts.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "EMAIL"
                },
                "email_template": {
                    "$ref": "get.dto.appliance.configuration.AlertConfigDTO$EmailTemplate",
                    "description": "Email Template.",
                    "typeName": "DEFAULT"
                },
                "enable": {
                    "description": "Whether Alert emails should be enabled.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "enable_default_nutanix_email": {
                    "description": "Whether Alert emails should be enabled.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "enable_email_digest": {
                    "description": "Whether Alert email digest should be enabled.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "smtp_server": {
                    "$ref": "get.dto.appliance.configuration.SmtpServerDTO",
                    "description": "SMTP Server used to send Alert Emails.",
                    "typeName": "DEFAULT"
                },
                "tunnel_details": {
                    "$ref": "get.dto.appliance.configuration.RemoteTunnelDetailsDTO",
                    "description": "Status of Remote Tunnel that is used to send Alert Emails.",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.appliance.configuration.AlertConfigDTO$EmailConfigurationRule": {
            "id": "get.dto.appliance.configuration.AlertConfigDTO$EmailConfigurationRule",
            "required": [],
            "properties": {
                "cluster_uuids": {
                    "description": "Cluster Uuids to which this rule applies to.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "impact_types": {
                    "description": "Impact types to which this rule applies to.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "include_global_email_contact_list": {
                    "description": "Whether to include global email contact list.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "match_phrases": {
                    "description": "List of phrases to match the alert with.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "recipients": {
                    "description": "List of recipients who will receive emails.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "EMAIL"
                },
                "severities": {
                    "description": "Severity to which this rule applies to.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.appliance.configuration.AlertConfigDTO$EmailTemplate": {
            "id": "get.dto.appliance.configuration.AlertConfigDTO$EmailTemplate",
            "required": [],
            "properties": {
                "body_suffix": {
                    "description": "Email Body Suffix.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "subject_prefix": {
                    "description": "Email Subject Prefix.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.appliance.configuration.HttpProxyDTO": {
            "id": "get.dto.appliance.configuration.HttpProxyDTO",
            "description": "http-proxy",
            "required": [],
            "properties": {
                "address": {
                    "description": "Address of the proxy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Proxy name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "password": {
                    "description": "Password for proxy authentication",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "port": {
                    "description": "Port on which proxy is binding",
                    "format": "int32",
                    "maximum": "65536",
                    "minimum": "0",
                    "notes": "Any port number which is in the range 0 - 65536",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "proxy_types": {
                    "description": "Proxy types to send applicable traffic",
                    "items": {
                        "enum": [
                            "HTTP",
                            "HTTPS",
                            "SOCKS"
                        ],
                        "type": "string"
                    },
                    "notes": "Proxy types to send applicable traffic. Supports 'http' 'https', and 'socks' proxy configuration.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "username": {
                    "description": "Username for proxy authentication",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.appliance.configuration.RemoteTunnelDetailsDTO": {
            "id": "get.dto.appliance.configuration.RemoteTunnelDetailsDTO",
            "required": [],
            "properties": {
                "connection_status": {
                    "$ref": "get.dto.base.CommunicationStatusDTO"
                },
                "http_proxy": {
                    "$ref": "get.dto.appliance.configuration.HttpProxyDTO"
                },
                "service_center": {
                    "$ref": "get.dto.appliance.configuration.ServiceCenterDTO"
                },
                "transport_status": {
                    "$ref": "get.dto.base.CommunicationStatusDTO"
                }
            }
        },
        "get.dto.appliance.configuration.ServiceCenterDTO": {
            "id": "get.dto.appliance.configuration.ServiceCenterDTO",
            "required": [],
            "properties": {
                "ip_address": {
                    "description": "Ip Address.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "port": {
                    "description": "Port number.",
                    "format": "int32",
                    "maximum": "65536",
                    "minimum": "0",
                    "notes": "Any port number which is in the range 0 - 65536",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "username": {
                    "description": "username.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.appliance.configuration.SmtpServerDTO": {
            "id": "get.dto.appliance.configuration.SmtpServerDTO",
            "required": [],
            "properties": {
                "address": {
                    "type": "string"
                },
                "email_status": {
                    "$ref": "get.dto.base.CommunicationStatusDTO"
                },
                "from_email_address": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "format": "int32",
                    "type": "integer"
                },
                "secure_mode": {
                    "enum": [
                        "STARTTLS",
                        "SSL",
                        "NONE"
                    ],
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "get.dto.base.CommunicationStatusDTO": {
            "id": "get.dto.base.CommunicationStatusDTO",
            "required": [],
            "properties": {
                "last_changed_time_stamp_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_checked_time_stamp_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_successful_transmission_time_stamp_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "$ref": "get.dto.base.ParameterizedMessageDTO"
                },
                "status": {
                    "enum": [
                        "SUCCESS",
                        "FAILED",
                        "RETRYING",
                        "UNKNOWN"
                    ],
                    "type": "string"
                }
            }
        },
        "get.dto.base.ParameterizedMessageDTO": {
            "id": "get.dto.base.ParameterizedMessageDTO",
            "required": [],
            "properties": {
                "attributes": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "java.util.Map&lt;java.lang.String, java.lang.String&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.lang.String&gt;",
            "required": [],
            "properties": {}
        },
        "patch.dto.RequestDTO&lt;patch.dto.appliance.configuration.AlertConfigDTO&gt;": {
            "id": "patch.dto.RequestDTO&lt;patch.dto.appliance.configuration.AlertConfigDTO&gt;",
            "required": [],
            "properties": {
                "cluster_uuid": {
                    "type": "string"
                },
                "generic_d_t_o": {
                    "$ref": "patch.dto.appliance.configuration.AlertConfigDTO"
                },
                "operation": {
                    "type": "string"
                }
            }
        },
        "patch.dto.appliance.configuration.AlertConfigDTO": {
            "id": "patch.dto.appliance.configuration.AlertConfigDTO",
            "description": "DTO representing the configuration of alerts",
            "required": [],
            "properties": {
                "default_nutanix_email": {
                    "description": "Default Nutanix email to which Alert emails would be sent",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "email_config_rules": {
                    "description": "Rules for Email Configuration.",
                    "items": {
                        "$ref": "patch.dto.appliance.configuration.AlertConfigDTO$EmailConfigurationRule"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "email_contact_list": {
                    "description": "List of email contacts.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "EMAIL"
                },
                "email_template": {
                    "$ref": "patch.dto.appliance.configuration.AlertConfigDTO$EmailTemplate",
                    "description": "Email Template.",
                    "typeName": "DEFAULT"
                },
                "enable": {
                    "description": "Whether Alert emails should be enabled.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "enable_default_nutanix_email": {
                    "description": "Whether Alert emails should be enabled.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "enable_email_digest": {
                    "description": "Whether Alert email digest should be enabled.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "smtp_server": {
                    "$ref": "patch.dto.appliance.configuration.SmtpServerDTO",
                    "description": "SMTP Server used to send Alert Emails.",
                    "typeName": "DEFAULT"
                },
                "tunnel_details": {
                    "$ref": "patch.dto.appliance.configuration.RemoteTunnelDetailsDTO",
                    "description": "Status of Remote Tunnel that is used to send Alert Emails.",
                    "typeName": "DEFAULT"
                }
            }
        },
        "patch.dto.appliance.configuration.AlertConfigDTO$EmailConfigurationRule": {
            "id": "patch.dto.appliance.configuration.AlertConfigDTO$EmailConfigurationRule",
            "required": [
                "recipients",
                "severities",
                "impact_types",
                "cluster_uuids"
            ],
            "properties": {
                "cluster_uuids": {
                    "description": "Cluster Uuids to which this rule applies to.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "impact_types": {
                    "description": "Impact types to which this rule applies to.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "include_global_email_contact_list": {
                    "description": "Whether to include global email contact list.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "match_phrases": {
                    "description": "List of phrases to match the alert with.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "recipients": {
                    "description": "List of recipients who will receive emails.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "EMAIL"
                },
                "severities": {
                    "description": "Severity to which this rule applies to.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "patch.dto.appliance.configuration.AlertConfigDTO$EmailTemplate": {
            "id": "patch.dto.appliance.configuration.AlertConfigDTO$EmailTemplate",
            "required": [
                "subject_prefix",
                "body_suffix"
            ],
            "properties": {
                "body_suffix": {
                    "description": "Email Body Suffix.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "subject_prefix": {
                    "description": "Email Subject Prefix.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "patch.dto.appliance.configuration.HttpProxyDTO": {
            "id": "patch.dto.appliance.configuration.HttpProxyDTO",
            "description": "http-proxy",
            "required": [
                "name"
            ],
            "properties": {
                "address": {
                    "description": "Address of the proxy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Proxy name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "password": {
                    "description": "Password for proxy authentication",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "port": {
                    "description": "Port on which proxy is binding",
                    "format": "int32",
                    "maximum": "65536",
                    "minimum": "0",
                    "notes": "Any port number which is in the range 0 - 65536",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "proxy_types": {
                    "description": "Proxy types to send applicable traffic",
                    "items": {
                        "enum": [
                            "HTTP",
                            "HTTPS",
                            "SOCKS"
                        ],
                        "type": "string"
                    },
                    "notes": "Proxy types to send applicable traffic. Supports 'http' 'https', and 'socks' proxy configuration.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "username": {
                    "description": "Username for proxy authentication",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "patch.dto.appliance.configuration.RemoteTunnelDetailsDTO": {
            "id": "patch.dto.appliance.configuration.RemoteTunnelDetailsDTO",
            "required": [],
            "properties": {
                "connection_status": {
                    "$ref": "patch.dto.base.CommunicationStatusDTO"
                },
                "http_proxy": {
                    "$ref": "patch.dto.appliance.configuration.HttpProxyDTO"
                },
                "service_center": {
                    "$ref": "patch.dto.appliance.configuration.ServiceCenterDTO"
                },
                "transport_status": {
                    "$ref": "patch.dto.base.CommunicationStatusDTO"
                }
            }
        },
        "patch.dto.appliance.configuration.ServiceCenterDTO": {
            "id": "patch.dto.appliance.configuration.ServiceCenterDTO",
            "required": [
                "name",
                "ip_address",
                "username",
                "port"
            ],
            "properties": {
                "ip_address": {
                    "description": "Ip Address.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "port": {
                    "description": "Port number.",
                    "format": "int32",
                    "maximum": "65536",
                    "minimum": "0",
                    "notes": "Any port number which is in the range 0 - 65536",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "username": {
                    "description": "username.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "patch.dto.appliance.configuration.SmtpServerDTO": {
            "id": "patch.dto.appliance.configuration.SmtpServerDTO",
            "required": [],
            "properties": {
                "address": {
                    "type": "string"
                },
                "email_status": {
                    "$ref": "patch.dto.base.CommunicationStatusDTO"
                },
                "from_email_address": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "format": "int32",
                    "type": "integer"
                },
                "secure_mode": {
                    "enum": [
                        "STARTTLS",
                        "SSL",
                        "NONE"
                    ],
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "patch.dto.base.CommunicationStatusDTO": {
            "id": "patch.dto.base.CommunicationStatusDTO",
            "required": [],
            "properties": {
                "last_changed_time_stamp_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_checked_time_stamp_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_successful_transmission_time_stamp_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "$ref": "patch.dto.base.ParameterizedMessageDTO"
                },
                "status": {
                    "enum": [
                        "SUCCESS",
                        "FAILED",
                        "RETRYING",
                        "UNKNOWN"
                    ],
                    "type": "string"
                }
            }
        },
        "patch.dto.base.ParameterizedMessageDTO": {
            "id": "patch.dto.base.ParameterizedMessageDTO",
            "required": [],
            "properties": {
                "attributes": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "update.dto.alerts.AlertPolicyDTO": {
            "id": "update.dto.alerts.AlertPolicyDTO",
            "required": [
                "id",
                "title",
                "enabled",
                "auto_resolve",
                "filter",
                "trigger_conditions",
                "last_updated_timestamp_in_usecs"
            ],
            "properties": {
                "auto_resolve": {
                    "description": "Whether the auto resolve feature is enabled for this policy",
                    "notes": "Whether the auto resolve feature is enabled for this policy",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "created_by": {
                    "description": "Username of the user who created the Policy",
                    "notes": "Username who created the Policy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "description": {
                    "description": "Description of the Policy.",
                    "notes": "Description of the Policy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "enabled": {
                    "description": "Enable/Disable flag for the policy",
                    "notes": "Enable/Disable flag for the policy",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "error_on_conflict": {
                    "description": "Error if conflicting Alert Policies are found",
                    "notes": "Error if conflicting Alert Policies are found",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "filter": {
                    "description": "Filter expression for the policy in FIQL",
                    "notes": "Filter expression for the policy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "id": {
                    "description": "ID of the Policy",
                    "notes": "ID of the Policy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "impact_types": {
                    "description": "Impact Types that are to be associated with the resulting Alert",
                    "items": {
                        "type": "string"
                    },
                    "notes": "Impact Types that are to be associated with the resulting Alert",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "last_updated_timestamp_in_usecs": {
                    "description": "Last updated timestamp of the Policy. Will be used as the CAS value during updates.",
                    "format": "int64",
                    "notes": "Last updated timestamp of the Policy.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "policies_to_override": {
                    "description": "List of Alert Policy Ids to override",
                    "items": {
                        "type": "string"
                    },
                    "notes": "List of Alert Policy Ids to override",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "related_policies": {
                    "description": "List of Alert Policies that are related to the entities of the current policy",
                    "items": {
                        "$ref": "update.dto.alerts.AlertPolicyDTO$RelatedPolicies"
                    },
                    "notes": "List of Alert Policies that are related to the entities of the current policy",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "title": {
                    "description": "Title of the Policy",
                    "notes": "Title of the Policy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "trigger_conditions": {
                    "description": "Trigger conditions for the policy. If there are multiple Trigger conditions, they will be ANDed.",
                    "items": {
                        "$ref": "update.dto.alerts.AlertPolicyDTO$TriggerCondition"
                    },
                    "notes": "Trigger conditions for the policy",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "trigger_wait_period_in_secs": {
                    "description": "Duration to wait before triggering the alert when the specified condition is met",
                    "format": "int64",
                    "notes": "Duration to wait before triggering the alert when the specified condition is met",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.alerts.AlertPolicyDTO$RelatedPolicies": {
            "id": "update.dto.alerts.AlertPolicyDTO$RelatedPolicies",
            "required": [],
            "properties": {
                "policy_ids": {
                    "description": "Policy Ids that are related to the specified entity",
                    "items": {
                        "type": "string"
                    },
                    "notes": "Policy Ids that are related to the specified entity",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.alerts.AlertPolicyDTO$TriggerCondition": {
            "id": "update.dto.alerts.AlertPolicyDTO$TriggerCondition",
            "required": [
                "condition_type",
                "condition",
                "severity_level"
            ],
            "properties": {
                "condition": {
                    "description": "Conditions to be met to trigger the alert. Conditions are expressed in FIQL",
                    "notes": "Conditions to be met to trigger the alert",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "condition_type": {
                    "description": "Type of condition. Example types: StaticThreshold, Anomaly, SafetyZone.",
                    "enum": [
                        "STATIC_THRESHOLD",
                        "ANOMALY",
                        "SAFETY_ZONE"
                    ],
                    "notes": "Type of condition",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "severity_level": {
                    "description": "Threshold level to be associated with the Alert.Example levels: INFO, WARNING, CRITICAL.",
                    "enum": [
                        "CRITICAL",
                        "WARNING",
                        "INFO",
                        "AUDIT"
                    ],
                    "notes": "Threshold level to be associated with the Alert. Example levels: INFO, WARNING, CRITICAL.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.appliance.configuration.AlertConfigDTO": {
            "id": "update.dto.appliance.configuration.AlertConfigDTO",
            "description": "DTO representing the configuration of alerts",
            "required": [],
            "properties": {
                "default_nutanix_email": {
                    "description": "Default Nutanix email to which Alert emails would be sent",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "email_config_rules": {
                    "description": "Rules for Email Configuration.",
                    "items": {
                        "$ref": "update.dto.appliance.configuration.AlertConfigDTO$EmailConfigurationRule"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "email_contact_list": {
                    "description": "List of email contacts.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "EMAIL"
                },
                "email_template": {
                    "$ref": "update.dto.appliance.configuration.AlertConfigDTO$EmailTemplate",
                    "description": "Email Template.",
                    "typeName": "DEFAULT"
                },
                "enable": {
                    "description": "Whether Alert emails should be enabled.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "enable_default_nutanix_email": {
                    "description": "Whether Alert emails should be enabled.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "enable_email_digest": {
                    "description": "Whether Alert email digest should be enabled.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "smtp_server": {
                    "$ref": "update.dto.appliance.configuration.SmtpServerDTO",
                    "description": "SMTP Server used to send Alert Emails.",
                    "typeName": "DEFAULT"
                },
                "tunnel_details": {
                    "$ref": "update.dto.appliance.configuration.RemoteTunnelDetailsDTO",
                    "description": "Status of Remote Tunnel that is used to send Alert Emails.",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.appliance.configuration.AlertConfigDTO$EmailConfigurationRule": {
            "id": "update.dto.appliance.configuration.AlertConfigDTO$EmailConfigurationRule",
            "required": [],
            "properties": {
                "cluster_uuids": {
                    "description": "Cluster Uuids to which this rule applies to.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "impact_types": {
                    "description": "Impact types to which this rule applies to.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "include_global_email_contact_list": {
                    "description": "Whether to include global email contact list.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "match_phrases": {
                    "description": "List of phrases to match the alert with.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "recipients": {
                    "description": "List of recipients who will receive emails.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "EMAIL"
                },
                "severities": {
                    "description": "Severity to which this rule applies to.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.appliance.configuration.AlertConfigDTO$EmailTemplate": {
            "id": "update.dto.appliance.configuration.AlertConfigDTO$EmailTemplate",
            "required": [],
            "properties": {
                "body_suffix": {
                    "description": "Email Body Suffix.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "subject_prefix": {
                    "description": "Email Subject Prefix.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.appliance.configuration.HttpProxyDTO": {
            "id": "update.dto.appliance.configuration.HttpProxyDTO",
            "description": "http-proxy",
            "required": [
                "name",
                "address",
                "port"
            ],
            "properties": {
                "address": {
                    "description": "Address of the proxy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Proxy name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "password": {
                    "description": "Password for proxy authentication",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "port": {
                    "description": "Port on which proxy is binding",
                    "format": "int32",
                    "maximum": "65536",
                    "minimum": "0",
                    "notes": "Any port number which is in the range 0 - 65536",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "proxy_types": {
                    "description": "Proxy types to send applicable traffic",
                    "items": {
                        "enum": [
                            "HTTP",
                            "HTTPS",
                            "SOCKS"
                        ],
                        "type": "string"
                    },
                    "notes": "Proxy types to send applicable traffic. Supports 'http' 'https', and 'socks' proxy configuration.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "username": {
                    "description": "Username for proxy authentication",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.appliance.configuration.RemoteTunnelDetailsDTO": {
            "id": "update.dto.appliance.configuration.RemoteTunnelDetailsDTO",
            "required": [],
            "properties": {
                "connection_status": {
                    "$ref": "update.dto.base.CommunicationStatusDTO"
                },
                "http_proxy": {
                    "$ref": "update.dto.appliance.configuration.HttpProxyDTO"
                },
                "service_center": {
                    "$ref": "update.dto.appliance.configuration.ServiceCenterDTO"
                },
                "transport_status": {
                    "$ref": "update.dto.base.CommunicationStatusDTO"
                }
            }
        },
        "update.dto.appliance.configuration.ServiceCenterDTO": {
            "id": "update.dto.appliance.configuration.ServiceCenterDTO",
            "required": [
                "name",
                "ip_address",
                "username",
                "port"
            ],
            "properties": {
                "ip_address": {
                    "description": "Ip Address.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "port": {
                    "description": "Port number.",
                    "format": "int32",
                    "maximum": "65536",
                    "minimum": "0",
                    "notes": "Any port number which is in the range 0 - 65536",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "username": {
                    "description": "username.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.appliance.configuration.SmtpServerDTO": {
            "id": "update.dto.appliance.configuration.SmtpServerDTO",
            "required": [],
            "properties": {
                "address": {
                    "type": "string"
                },
                "email_status": {
                    "$ref": "update.dto.base.CommunicationStatusDTO"
                },
                "from_email_address": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "format": "int32",
                    "type": "integer"
                },
                "secure_mode": {
                    "enum": [
                        "STARTTLS",
                        "SSL",
                        "NONE"
                    ],
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "update.dto.base.CommunicationStatusDTO": {
            "id": "update.dto.base.CommunicationStatusDTO",
            "required": [],
            "properties": {
                "last_changed_time_stamp_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_checked_time_stamp_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_successful_transmission_time_stamp_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "$ref": "update.dto.base.ParameterizedMessageDTO"
                },
                "status": {
                    "enum": [
                        "SUCCESS",
                        "FAILED",
                        "RETRYING",
                        "UNKNOWN"
                    ],
                    "type": "string"
                }
            }
        },
        "update.dto.base.ParameterizedMessageDTO": {
            "id": "update.dto.base.ParameterizedMessageDTO",
            "required": [],
            "properties": {
                "attributes": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/PrismGateway/services/rest/v2.0",
    "resourcePath": "/authconfig",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/authconfig/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete Auth config.",
                    "notes": "Delete Auth configuration from the cluster. This will also delete all the directories configured in the cluster.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "deleteAuthConfig",
                    "parameters": [],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get Auth configuration.",
                    "notes": "Get the complete Auth configuration including directories configured in the cluster.",
                    "type": "get.dto.authconfig.AuthConfigDTO",
                    "nickname": "getAuthConfig",
                    "parameters": [],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PATCH",
                    "summary": "Modify Auth configuration.",
                    "notes": "Modify the Auth configuration excluding directories configured in the cluster.",
                    "type": "patch.dto.authconfig.AuthConfigDTO",
                    "nickname": "patchAuthConfig",
                    "parameters": [
                        {
                            "description": "an AuthConfigDTO instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "patch.dto.RequestDTO&lt;patch.dto.authconfig.AuthConfigDTO&gt;"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Update Auth configuration.",
                    "notes": "Update the Auth configuration excluding directories configured in the cluster.",
                    "type": "update.dto.authconfig.AuthConfigDTO",
                    "nickname": "updateAuthConfig",
                    "parameters": [
                        {
                            "description": "an AuthConfigDTO instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.authconfig.AuthConfigDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/authconfig/add_auth_types",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Add Auth types.",
                    "notes": "Add Auth types to the existing Auth types.",
                    "type": "array",
                    "items": {
                        "enum": [
                            "LOCAL",
                            "DIRECTORY_SERVICE"
                        ],
                        "type": "string"
                    },
                    "nickname": "addAuthTypes",
                    "parameters": [
                        {
                            "description": "List of Auth types",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "array",
                            "items": {
                                "enum": [
                                    "LOCAL",
                                    "DIRECTORY_SERVICE"
                                ],
                                "type": "string"
                            }
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/authconfig/auth_types",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get Auth types.",
                    "notes": "Get Auth types configured in Auth configuration.",
                    "type": "array",
                    "items": {
                        "enum": [
                            "LOCAL",
                            "DIRECTORY_SERVICE"
                        ],
                        "type": "string"
                    },
                    "nickname": "getAuthTypes",
                    "parameters": [],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Update Auth types.",
                    "notes": "Update Auth types configured in the Auth configuration.",
                    "type": "update.dto.authconfig.AuthConfigDTO",
                    "nickname": "setAuthTypes",
                    "parameters": [
                        {
                            "description": "List of Auth types",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "array",
                            "items": {
                                "enum": [
                                    "LOCAL",
                                    "DIRECTORY_SERVICE"
                                ],
                                "type": "string"
                            }
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/authconfig/client_auth/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get client authentication status.",
                    "notes": "Get the client authentication status configured on the cluster.",
                    "type": "get.dto.authconfig.ClientAuthDTO",
                    "nickname": "getClientAuth",
                    "parameters": [],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Enable/disable client authentication.",
                    "notes": "Enable/disable client authentication on the cluster.",
                    "type": "create.dto.authconfig.CaChainDTO",
                    "nickname": "setClientAuthState",
                    "parameters": [
                        {
                            "description": "Enable client auth",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Update client authentication.",
                    "notes": "Update client authentication on the cluster.",
                    "type": "update.dto.authconfig.ClientAuthDTO",
                    "nickname": "updateClientAuth",
                    "parameters": [
                        {
                            "description": "Client auth updates",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.authconfig.ClientAuthDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/authconfig/client_auth/{name}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete client chain certificate for authentication.",
                    "notes": "Delete client chain certificate on the cluster.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "deleteClientAuthChain",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Certificate",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/authconfig/directories/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of Directories.",
                    "notes": "Get the list of Directories configured in the cluster.",
                    "type": "get.base.EntityCollection&lt;get.dto.authconfig.DirectoryConfigDTO&gt;",
                    "nickname": "getAllDirectoryConfigs",
                    "parameters": [],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PATCH",
                    "summary": "Modify Directory.",
                    "notes": "Modify the specified Directory config.",
                    "type": "patch.dto.authconfig.DirectoryConfigDTO",
                    "nickname": "patchDirectoryConfig",
                    "parameters": [
                        {
                            "description": "A Directory instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "patch.dto.RequestDTO&lt;patch.dto.authconfig.DirectoryConfigDTO&gt;"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Add Directory.",
                    "notes": "Add Directory config to the cluster.",
                    "type": "create.dto.authconfig.DirectoryConfigDTO",
                    "nickname": "addDirectoryConfig",
                    "parameters": [
                        {
                            "description": "A Directory instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.authconfig.DirectoryConfigDTO"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Edit Directory.",
                    "notes": "Edit the specified Directory config.",
                    "type": "update.dto.authconfig.DirectoryConfigDTO",
                    "nickname": "updateDirectoryConfig",
                    "parameters": [
                        {
                            "description": "A Directory instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.authconfig.DirectoryConfigDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/authconfig/directories/connection_status",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Test LDAP directory connection status",
                    "notes": "",
                    "type": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "testConnection",
                    "parameters": [
                        {
                            "description": "Username, active directory name and password to authenticate",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.authconfig.TestDirectoryConfigDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/authconfig/directories/{name}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete Directory.",
                    "notes": "Delete Directory config with the specified name.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "deleteDirectoryConfig",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Directory",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get Directory.",
                    "notes": "Get Directory with the specified name.",
                    "type": "get.dto.authconfig.DirectoryConfigDTO",
                    "nickname": "getDirectoryConfig",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Directory",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/authconfig/remove_auth_types",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Remove Auth types.",
                    "notes": "Remove Auth types from the existing Auth types.",
                    "type": "array",
                    "items": {
                        "enum": [
                            "LOCAL",
                            "DIRECTORY_SERVICE"
                        ],
                        "type": "string"
                    },
                    "nickname": "deleteAuthTypes",
                    "parameters": [
                        {
                            "description": "List of Auth types",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "array",
                            "items": {
                                "enum": [
                                    "LOCAL",
                                    "DIRECTORY_SERVICE"
                                ],
                                "type": "string"
                            }
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "create.dto.authconfig.CaChainDTO": {
            "id": "create.dto.authconfig.CaChainDTO",
            "required": [],
            "properties": {
                "ca_chain": {
                    "description": "The content of the CA Chain certificate.",
                    "items": {
                        "format": "byte",
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "enable_client_auth": {
                    "description": "The status of the client authentication.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "The name of the CA Chain certificate.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.authconfig.DirectoryConfigDTO": {
            "id": "create.dto.authconfig.DirectoryConfigDTO",
            "description": "directory-config",
            "required": [
                "directory_type",
                "connection_type",
                "directory_url",
                "domain",
                "name"
            ],
            "properties": {
                "connection_type": {
                    "description": "Connection type.",
                    "enum": [
                        "LDAP"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "directory_type": {
                    "description": "Directory type.",
                    "enum": [
                        "ACTIVE_DIRECTORY",
                        "OPEN_LDAP"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "directory_url": {
                    "description": "Directory's ldap url.",
                    "notes": "Needs to be a proper ldap url",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "domain": {
                    "description": "Domain name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "group_search_type": {
                    "description": "Group search type.",
                    "enum": [
                        "RECURSIVE",
                        "NON_RECURSIVE"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Name of directory.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "open_ldap_config": {
                    "$ref": "create.dto.authconfig.OpenLdapConfigDTO",
                    "description": "Open ldap config.",
                    "typeName": "DEFAULT"
                },
                "service_account_password": {
                    "description": "The password to use for the service account.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "service_account_username": {
                    "description": "The username to use with the service account.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.authconfig.OpenLdapConfigDTO": {
            "id": "create.dto.authconfig.OpenLdapConfigDTO",
            "description": "Open LDAP configuration",
            "required": [],
            "properties": {
                "group_member_attribute": {
                    "description": "Unique identifier in group that associates users to the group.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "group_member_attribute_value": {
                    "description": "User attribute that will be used to group entity to associate user to the group.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "group_object_class": {
                    "description": "Group Object class, identifier for object type group.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "group_search_base": {
                    "description": "Base DN for group search.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "user_object_class": {
                    "description": "User object class, unique identifier for object user type",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "user_search_base": {
                    "description": "Base DN for user search.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "username_attribute": {
                    "description": "Unique identifier for each user which can be used forauthentication.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.authconfig.TestDirectoryConfigDTO": {
            "id": "create.dto.authconfig.TestDirectoryConfigDTO",
            "required": [
                "directory_name",
                "password",
                "username"
            ],
            "properties": {
                "directory_name": {
                    "description": "Directory name to test LDAP configuration.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "password": {
                    "description": "Password to test LDAP configuration.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "username": {
                    "description": "Username to test LDAP configuration.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.authconfig.DirectoryConfigDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.authconfig.DirectoryConfigDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.authconfig.DirectoryConfigDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.dto.authconfig.AuthConfigDTO": {
            "id": "get.dto.authconfig.AuthConfigDTO",
            "description": "auth-config",
            "required": [],
            "properties": {
                "auth_type_list": {
                    "description": "Authentication Types",
                    "items": {
                        "enum": [
                            "LOCAL",
                            "DIRECTORY_SERVICE"
                        ],
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "directory_list": {
                    "description": "Id of an alert type.",
                    "items": {
                        "$ref": "get.dto.authconfig.DirectoryConfigDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.authconfig.AutoLoginInfoDTO": {
            "id": "get.dto.authconfig.AutoLoginInfoDTO",
            "required": [],
            "properties": {
                "enabled": {
                    "description": "Whether auto login is enabled or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "service_account_d_t_o": {
                    "$ref": "get.dto.authconfig.ServiceAccountDTO",
                    "description": "The service account info to be used for auto login.",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.authconfig.CaChainDTO": {
            "id": "get.dto.authconfig.CaChainDTO",
            "required": [],
            "properties": {
                "ca_chain": {
                    "description": "The content of the CA Chain certificate.",
                    "items": {
                        "format": "byte",
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "enable_client_auth": {
                    "description": "The status of the client authentication.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "The name of the CA Chain certificate.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.authconfig.ClientAuthDTO": {
            "id": "get.dto.authconfig.ClientAuthDTO",
            "required": [],
            "properties": {
                "auto_login_info": {
                    "$ref": "get.dto.authconfig.AutoLoginInfoDTO",
                    "description": "Auto Login Information.",
                    "typeName": "DEFAULT"
                },
                "ca_chain_info": {
                    "$ref": "get.dto.authconfig.CaChainDTO",
                    "description": "The CA chain information.",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.authconfig.DirectoryConfigDTO": {
            "id": "get.dto.authconfig.DirectoryConfigDTO",
            "description": "directory-config",
            "required": [],
            "properties": {
                "connection_type": {
                    "description": "Connection type.",
                    "enum": [
                        "LDAP"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "directory_type": {
                    "description": "Directory type.",
                    "enum": [
                        "ACTIVE_DIRECTORY",
                        "OPEN_LDAP"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "directory_url": {
                    "description": "Directory's ldap url.",
                    "notes": "Needs to be a proper ldap url",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "domain": {
                    "description": "Domain name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "group_search_type": {
                    "description": "Group search type.",
                    "enum": [
                        "RECURSIVE",
                        "NON_RECURSIVE"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Name of directory.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "open_ldap_config": {
                    "$ref": "get.dto.authconfig.OpenLdapConfigDTO",
                    "description": "Open ldap config.",
                    "typeName": "DEFAULT"
                },
                "service_account_password": {
                    "description": "The password to use for the service account.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "service_account_username": {
                    "description": "The username to use with the service account.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.authconfig.OpenLdapConfigDTO": {
            "id": "get.dto.authconfig.OpenLdapConfigDTO",
            "description": "Open LDAP configuration",
            "required": [],
            "properties": {
                "group_member_attribute": {
                    "description": "Unique identifier in group that associates users to the group.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "group_member_attribute_value": {
                    "description": "User attribute that will be used to group entity to associate user to the group.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "group_object_class": {
                    "description": "Group Object class, identifier for object type group.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "group_search_base": {
                    "description": "Base DN for group search.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "user_object_class": {
                    "description": "User object class, unique identifier for object user type",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "user_search_base": {
                    "description": "Base DN for user search.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "username_attribute": {
                    "description": "Unique identifier for each user which can be used forauthentication.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.authconfig.ServiceAccountDTO": {
            "id": "get.dto.authconfig.ServiceAccountDTO",
            "required": [],
            "properties": {
                "directory_config_name": {
                    "description": "The name of the Active Directory Config name to use for this service account.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "password": {
                    "description": "The password to use for the service account.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "username": {
                    "description": "The username to use with the service account.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "patch.dto.RequestDTO&lt;patch.dto.authconfig.AuthConfigDTO&gt;": {
            "id": "patch.dto.RequestDTO&lt;patch.dto.authconfig.AuthConfigDTO&gt;",
            "required": [],
            "properties": {
                "cluster_uuid": {
                    "type": "string"
                },
                "generic_d_t_o": {
                    "$ref": "patch.dto.authconfig.AuthConfigDTO"
                },
                "operation": {
                    "type": "string"
                }
            }
        },
        "patch.dto.RequestDTO&lt;patch.dto.authconfig.DirectoryConfigDTO&gt;": {
            "id": "patch.dto.RequestDTO&lt;patch.dto.authconfig.DirectoryConfigDTO&gt;",
            "required": [],
            "properties": {
                "cluster_uuid": {
                    "type": "string"
                },
                "generic_d_t_o": {
                    "$ref": "patch.dto.authconfig.DirectoryConfigDTO"
                },
                "operation": {
                    "type": "string"
                }
            }
        },
        "patch.dto.authconfig.AuthConfigDTO": {
            "id": "patch.dto.authconfig.AuthConfigDTO",
            "description": "auth-config",
            "required": [
                "auth_type_list"
            ],
            "properties": {
                "auth_type_list": {
                    "description": "Authentication Types",
                    "items": {
                        "enum": [
                            "LOCAL",
                            "DIRECTORY_SERVICE"
                        ],
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "directory_list": {
                    "description": "Id of an alert type.",
                    "items": {
                        "$ref": "patch.dto.authconfig.DirectoryConfigDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "patch.dto.authconfig.DirectoryConfigDTO": {
            "id": "patch.dto.authconfig.DirectoryConfigDTO",
            "description": "directory-config",
            "required": [
                "name"
            ],
            "properties": {
                "connection_type": {
                    "description": "Connection type.",
                    "enum": [
                        "LDAP"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "directory_type": {
                    "description": "Directory type.",
                    "enum": [
                        "ACTIVE_DIRECTORY",
                        "OPEN_LDAP"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "directory_url": {
                    "description": "Directory's ldap url.",
                    "notes": "Needs to be a proper ldap url",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "domain": {
                    "description": "Domain name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "group_search_type": {
                    "description": "Group search type.",
                    "enum": [
                        "RECURSIVE",
                        "NON_RECURSIVE"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Name of directory.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "open_ldap_config": {
                    "$ref": "patch.dto.authconfig.OpenLdapConfigDTO",
                    "description": "Open ldap config.",
                    "typeName": "DEFAULT"
                },
                "service_account_password": {
                    "description": "The password to use for the service account.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "service_account_username": {
                    "description": "The username to use with the service account.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "patch.dto.authconfig.OpenLdapConfigDTO": {
            "id": "patch.dto.authconfig.OpenLdapConfigDTO",
            "description": "Open LDAP configuration",
            "required": [],
            "properties": {
                "group_member_attribute": {
                    "description": "Unique identifier in group that associates users to the group.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "group_member_attribute_value": {
                    "description": "User attribute that will be used to group entity to associate user to the group.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "group_object_class": {
                    "description": "Group Object class, identifier for object type group.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "group_search_base": {
                    "description": "Base DN for group search.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "user_object_class": {
                    "description": "User object class, unique identifier for object user type",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "user_search_base": {
                    "description": "Base DN for user search.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "username_attribute": {
                    "description": "Unique identifier for each user which can be used forauthentication.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.authconfig.AuthConfigDTO": {
            "id": "update.dto.authconfig.AuthConfigDTO",
            "description": "auth-config",
            "required": [
                "auth_type_list"
            ],
            "properties": {
                "auth_type_list": {
                    "description": "Authentication Types",
                    "items": {
                        "enum": [
                            "LOCAL",
                            "DIRECTORY_SERVICE"
                        ],
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "directory_list": {
                    "description": "Id of an alert type.",
                    "items": {
                        "$ref": "update.dto.authconfig.DirectoryConfigDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.authconfig.AutoLoginInfoDTO": {
            "id": "update.dto.authconfig.AutoLoginInfoDTO",
            "required": [],
            "properties": {
                "enabled": {
                    "description": "Whether auto login is enabled or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "service_account_d_t_o": {
                    "$ref": "update.dto.authconfig.ServiceAccountDTO",
                    "description": "The service account info to be used for auto login.",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.authconfig.CaChainDTO": {
            "id": "update.dto.authconfig.CaChainDTO",
            "required": [
                "ca_chain",
                "name"
            ],
            "properties": {
                "ca_chain": {
                    "description": "The content of the CA Chain certificate.",
                    "items": {
                        "format": "byte",
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "enable_client_auth": {
                    "description": "The status of the client authentication.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "The name of the CA Chain certificate.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.authconfig.ClientAuthDTO": {
            "id": "update.dto.authconfig.ClientAuthDTO",
            "required": [],
            "properties": {
                "auto_login_info": {
                    "$ref": "update.dto.authconfig.AutoLoginInfoDTO",
                    "description": "Auto Login Information.",
                    "typeName": "DEFAULT"
                },
                "ca_chain_info": {
                    "$ref": "update.dto.authconfig.CaChainDTO",
                    "description": "The CA chain information.",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.authconfig.DirectoryConfigDTO": {
            "id": "update.dto.authconfig.DirectoryConfigDTO",
            "description": "directory-config",
            "required": [
                "directory_type",
                "connection_type",
                "directory_url",
                "domain",
                "name"
            ],
            "properties": {
                "connection_type": {
                    "description": "Connection type.",
                    "enum": [
                        "LDAP"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "directory_type": {
                    "description": "Directory type.",
                    "enum": [
                        "ACTIVE_DIRECTORY",
                        "OPEN_LDAP"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "directory_url": {
                    "description": "Directory's ldap url.",
                    "notes": "Needs to be a proper ldap url",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "domain": {
                    "description": "Domain name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "group_search_type": {
                    "description": "Group search type.",
                    "enum": [
                        "RECURSIVE",
                        "NON_RECURSIVE"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Name of directory.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "open_ldap_config": {
                    "$ref": "update.dto.authconfig.OpenLdapConfigDTO",
                    "description": "Open ldap config.",
                    "typeName": "DEFAULT"
                },
                "service_account_password": {
                    "description": "The password to use for the service account.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "service_account_username": {
                    "description": "The username to use with the service account.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.authconfig.OpenLdapConfigDTO": {
            "id": "update.dto.authconfig.OpenLdapConfigDTO",
            "description": "Open LDAP configuration",
            "required": [],
            "properties": {
                "group_member_attribute": {
                    "description": "Unique identifier in group that associates users to the group.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "group_member_attribute_value": {
                    "description": "User attribute that will be used to group entity to associate user to the group.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "group_object_class": {
                    "description": "Group Object class, identifier for object type group.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "group_search_base": {
                    "description": "Base DN for group search.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "user_object_class": {
                    "description": "User object class, unique identifier for object user type",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "user_search_base": {
                    "description": "Base DN for user search.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "username_attribute": {
                    "description": "Unique identifier for each user which can be used forauthentication.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.authconfig.ServiceAccountDTO": {
            "id": "update.dto.authconfig.ServiceAccountDTO",
            "required": [],
            "properties": {
                "directory_config_name": {
                    "description": "The name of the Active Directory Config name to use for this service account.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "password": {
                    "description": "The password to use for the service account.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "username": {
                    "description": "The username to use with the service account.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/PrismGateway/services/rest/v2.0",
    "resourcePath": "/cloud",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/cloud/{cloud_type}/credentials",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Remove all cloud credentials.",
                    "notes": "Remove all cloud credentials for accessing cloud sites.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "removeAllCredentials",
                    "parameters": [
                        {
                            "name": "cloud_type",
                            "description": "Cloud type",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get cloud credentials.",
                    "notes": "Get cloud credentials for accessing cloud sites.",
                    "type": "get.base.EntityCollection&lt;get.dto.dr.CloudCredentialsDTO&gt;",
                    "nickname": "getCredentials",
                    "parameters": [
                        {
                            "name": "cloud_type",
                            "description": "Cloud type",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of cloud credentials to retrieve",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "filter_criteria",
                            "description": "Filter criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "sort_criteria",
                            "description": "Sort criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Add a cloud credential.",
                    "notes": "Add a cloud credential for accessing cloud sites.",
                    "type": "create.dto.dr.CloudCredentialsDTO",
                    "nickname": "addCredentials",
                    "parameters": [
                        {
                            "name": "cloud_type",
                            "description": "Cloud type",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "An instance of CloudCredentialsDTO",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.dr.CloudCredentialsDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/cloud/{cloud_type}/credentials/{name}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Remove a cloud credential.",
                    "notes": "Remove a cloud credential for accessing cloud sites.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "removeCredentials",
                    "parameters": [
                        {
                            "name": "cloud_type",
                            "description": "Cloud type",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "description": "Name of the credential",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/cloud/{cloud_type}/cvms",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get a list of CVMs.",
                    "notes": "Get a list of CVMs that installed.",
                    "type": "get.base.EntityCollection&lt;get.dto.dr.CloudCvmDTO&gt;",
                    "nickname": "getCvms",
                    "parameters": [
                        {
                            "name": "cloud_type",
                            "description": "Cloud type",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "region",
                            "description": "Region",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "credential_name",
                            "description": "Name of the credential",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of cloud cvms to retrieve",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "filter_criteria",
                            "description": "Filter criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "sort_criteria",
                            "description": "Sort criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/cloud/{cloud_type}/default-credentials",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Set a default cloud credential to use.",
                    "notes": "Set a default cloud credential for accessing cloud sites.",
                    "type": "create.dto.dr.CloudCredentialsDTO",
                    "nickname": "setDefaultCredentials",
                    "parameters": [
                        {
                            "name": "cloud_type",
                            "description": "Cloud type",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Name of the credential",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.PrimitiveDTO&lt;java.lang.String&gt;"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/cloud/{cloud_type}/deploy_remote_site",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Deploy a cloud CVM and create a remote site.",
                    "notes": "Deploy a cloud CVM and create a remote site.",
                    "type": "create.dto.dr.RemoteSiteDTO",
                    "nickname": "deployRemoteSite",
                    "parameters": [
                        {
                            "name": "cloud_type",
                            "description": "Cloud type",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "An instance of DeployCloudRemoteSiteRequestDTO",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.dr.DeployCloudRemoteSiteRequestDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/cloud/{cloud_type}/images",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get a list of CVM images.",
                    "notes": "Get a list of CVM images that can be installed.",
                    "type": "get.base.EntityCollection&lt;get.dto.dr.CloudCvmImageDTO&gt;",
                    "nickname": "getCvmImages",
                    "parameters": [
                        {
                            "name": "cloud_type",
                            "description": "Cloud type",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "credential_name",
                            "description": "Name of the credential",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "region",
                            "description": "Region of the cvm image",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of cloud images to retrieve",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "filter_criteria",
                            "description": "Filter criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "sort_criteria",
                            "description": "Sort criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "list_local_only",
                            "description": "Is list local, to be specified only for Azure cloud type",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/cloud/{cloud_type}/subnets",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get a list of subnets.",
                    "notes": "Get a list of subnets.",
                    "type": "get.base.EntityCollection&lt;get.dto.dr.SubnetDTO&gt;",
                    "nickname": "getSubnets",
                    "parameters": [
                        {
                            "name": "cloud_type",
                            "description": "Cloud type",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "region",
                            "description": "Region",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "credential_name",
                            "description": "Name of the credential",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of subnets to retrieve",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "filter_criteria",
                            "description": "Filter criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "sort_criteria",
                            "description": "Sort criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "create.dto.PrimitiveDTO&lt;java.lang.String&gt;": {
            "id": "create.dto.PrimitiveDTO&lt;java.lang.String&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "create.dto.alerts.AlertSummaryDTO": {
            "id": "create.dto.alerts.AlertSummaryDTO",
            "required": [],
            "properties": {
                "alert_summaries": {
                    "$ref": "java.util.Map&lt;create.dto.alerts.AlertDTO$AlertSeverity, create.base.EntityCollection&lt;create.dto.alerts.AlertDTO&gt;&gt;"
                },
                "count": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "create.dto.dr.AwsCredentialDTO": {
            "id": "create.dto.dr.AwsCredentialDTO",
            "required": [
                "access_key",
                "secret_key"
            ],
            "properties": {
                "access_key": {
                    "description": "The AWS access key.",
                    "notes": "The AWS access key.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "secret_key": {
                    "description": "The AWS secret key.",
                    "notes": "The AWS secret key.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.dr.AzureCredentialDTO": {
            "id": "create.dto.dr.AzureCredentialDTO",
            "required": [],
            "properties": {
                "secure_file_i_d": {
                    "description": "The Azure secure file ID.",
                    "notes": "The Azure secure file ID.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "subscription_i_d": {
                    "description": "The Azure subscription ID.",
                    "notes": "The Azure subscription ID.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.dr.BandwidthPolicyDTO": {
            "id": "create.dto.dr.BandwidthPolicyDTO",
            "description": "This DTO describes bandwidth throttling policies for different time schedules",
            "required": [
                "policy_name"
            ],
            "properties": {
                "bandwidth_configurations": {
                    "description": "List of the policy configurations.",
                    "items": {
                        "$ref": "create.dto.dr.BandwidthPolicyDTO$BandwidthScheduleConfiguration"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "default_bandwidth_limit": {
                    "description": "Default bandwidth limit",
                    "format": "int32",
                    "notes": "This bandwidth is used in the time which is not covered by any of the existing schedule. Because every schedule will be having their own bandwidth limit defined.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "policy_name": {
                    "description": "Name of the bandwidth Throttling policy.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.dr.BandwidthPolicyDTO$BandwidthScheduleConfiguration": {
            "id": "create.dto.dr.BandwidthPolicyDTO$BandwidthScheduleConfiguration",
            "required": [],
            "properties": {
                "bandwidth_limit": {
                    "description": "Bandwidth limit for the policy.",
                    "format": "int32",
                    "notes": "At the time of policy consideration this bandwidth limit will be used to limit the bandwidth used.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "days_selected": {
                    "description": "Days selected in a week.",
                    "format": "int32",
                    "notes": "This field describes the selected days of the week for this policy configuration.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "end_time": {
                    "description": "End time of the policy",
                    "format": "int64",
                    "notes": "End time of the policy in milliseconds.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "start_time": {
                    "description": "Start time of the policy",
                    "format": "int64",
                    "notes": "Start time of the policy in milliseconds.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.dr.CloudCredentialsDTO": {
            "id": "create.dto.dr.CloudCredentialsDTO",
            "required": [],
            "properties": {
                "aws_credential": {
                    "$ref": "create.dto.dr.AwsCredentialDTO",
                    "description": "AWS Credentials.",
                    "notes": "AWS Credentials.",
                    "typeName": "DEFAULT"
                },
                "azure_credential": {
                    "$ref": "create.dto.dr.AzureCredentialDTO",
                    "description": "Azure Credentials.",
                    "notes": "Azure Credentials.",
                    "typeName": "DEFAULT"
                },
                "credential_i_d": {
                    "format": "int64",
                    "type": "integer"
                },
                "name": {
                    "description": "Name of the Cloud credentials.",
                    "notes": "Name of the Cloud credentials.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "use_as_default": {
                    "type": "boolean"
                }
            }
        },
        "create.dto.dr.DeployCloudRemoteSiteRequestDTO": {
            "id": "create.dto.dr.DeployCloudRemoteSiteRequestDTO",
            "required": [
                "local_remote_site_name",
                "region",
                "local_storage_container_names",
                "connectivity_type"
            ],
            "properties": {
                "c_e_r_e_b_r_o__s_s_h__p_o_r_t__l_o_w_e_r__b_o_u_n_d": {
                    "format": "int32",
                    "type": "integer"
                },
                "c_e_r_e_b_r_o__s_s_h__p_o_r_t__u_p_p_e_r__b_o_u_n_d": {
                    "format": "int32",
                    "type": "integer"
                },
                "connectivity_type": {
                    "enum": [
                        "VPN",
                        "SSH_TUNNEL"
                    ],
                    "notes": "Platform type of the AWS remote site",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "local_remote_site_name": {
                    "notes": "Name of the remote site to be created",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "local_storage_container_names": {
                    "items": {
                        "type": "string"
                    },
                    "notes": "Name of the local storage containers to be backed-up to the deployed CVM",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "region": {
                    "notes": "AWS region to deploy the CVM",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "skip_instance_type_validation": {
                    "description": "Flag to skip instance type validation",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.dr.L2NetworkMappingDTO": {
            "id": "create.dto.dr.L2NetworkMappingDTO",
            "required": [],
            "properties": {
                "dest_hypervisor_type": {
                    "type": "string"
                },
                "dest_network_name": {
                    "type": "string"
                },
                "src_hypervisor_type": {
                    "type": "string"
                },
                "src_network_name": {
                    "type": "string"
                }
            }
        },
        "create.dto.dr.NetworkMappingDTO": {
            "id": "create.dto.dr.NetworkMappingDTO",
            "description": "This DTO describes network mapping from source to destination cluster based on network uuids ",
            "required": [],
            "properties": {
                "l2_network_mappings": {
                    "description": "List of L2NetworkMappingDTOs which contains name and hypervisor type of the mapped networks",
                    "items": {
                        "$ref": "create.dto.dr.L2NetworkMappingDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "Network mapping identifier for this remote site",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.dr.RemoteSiteDTO": {
            "id": "create.dto.dr.RemoteSiteDTO",
            "description": "remote-site",
            "required": [],
            "properties": {
                "alert_summary": {
                    "$ref": "create.dto.alerts.AlertSummaryDTO"
                },
                "bandwidth_policy": {
                    "$ref": "create.dto.dr.BandwidthPolicyDTO"
                },
                "bandwidth_policy_enabled": {
                    "type": "boolean"
                },
                "capabilities": {
                    "items": {
                        "enum": [
                            "BACKUP",
                            "DISASTER_RECOVERY",
                            "METRO_AVAILABILITY",
                            "SUPPORT_DEDUPED_EXTENTS",
                            "SUPPORT_VSPHERE",
                            "SUPPORT_HYPERV",
                            "SUPPORT_KVM"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "cloud_type": {
                    "description": "Cloud type",
                    "enum": [
                        "AWS",
                        "AZURE"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "cluster_external_data_services_i_p_address": {
                    "type": "string"
                },
                "cluster_id": {
                    "format": "int64",
                    "type": "integer"
                },
                "cluster_incarnation_id": {
                    "format": "int64",
                    "type": "integer"
                },
                "compression_enabled": {
                    "type": "boolean"
                },
                "credential_name": {
                    "description": "Credential Name",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "cvm_name": {
                    "description": "CVM Name",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "health_summary": {
                    "$ref": "create.dto.health.check.HealthSummaryDTO"
                },
                "latency_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "marked_for_removal": {
                    "type": "boolean"
                },
                "max_bps": {
                    "format": "int32",
                    "type": "integer"
                },
                "metro_ready": {
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of the remote site.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "network_mapping": {
                    "$ref": "create.dto.dr.NetworkMappingDTO"
                },
                "proxy_enabled": {
                    "type": "boolean"
                },
                "region": {
                    "description": "Region",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "remote_ip_ports": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.Integer&gt;",
                    "description": "Dictionary having IP address as key and Port as value",
                    "typeName": "DEFAULT"
                },
                "remote_v_store_info": {
                    "$ref": "java.util.Map&lt;java.lang.String, create.dto.dr.RemoteSiteDTO$VStoreInfo&gt;"
                },
                "replication_links": {
                    "items": {
                        "$ref": "create.dto.dr.ReplicationLinkDTO"
                    },
                    "type": "array"
                },
                "ssh_enabled": {
                    "type": "boolean"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "status": {
                    "enum": [
                        "HANDSHAKING",
                        "UNREACHABLE",
                        "STRETCH_UNHEALTHY",
                        "RELATIONSHIP_NOT_ESTABLISHED",
                        "RELATIONSHIP_ESTABLISHED",
                        "DEPLOYING"
                    ],
                    "type": "string"
                },
                "usage_stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "uuid": {
                    "description": "Uuid of the remote site.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vstore_name_map": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;",
                    "description": "Dictionary having map of local vStore to remote vStore",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.dr.ReplicationLinkDTO": {
            "id": "create.dto.dr.ReplicationLinkDTO",
            "required": [],
            "properties": {
                "current_replicating_snapshot_id": {
                    "type": "string"
                },
                "current_replicating_snapshot_total_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "current_replicating_snapshot_transmitted_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "last_replication_end_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_replication_start_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_successful_replication_snapshot_id": {
                    "type": "string"
                },
                "protection_domain_name": {
                    "type": "string"
                },
                "remote_site_name": {
                    "type": "string"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                }
            }
        },
        "create.dto.health.check.EntityTypeHealthCheckSummaryDTO": {
            "id": "create.dto.health.check.EntityTypeHealthCheckSummaryDTO",
            "required": [],
            "properties": {
                "checks_in_error": {
                    "$ref": "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckErrorsDTO&gt;"
                },
                "detailed_check_summary": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;"
                }
            }
        },
        "create.dto.health.check.HealthSummaryDTO": {
            "id": "create.dto.health.check.HealthSummaryDTO",
            "required": [],
            "properties": {
                "entity_type_summaries": {
                    "items": {
                        "$ref": "create.dto.health.check.EntityTypeHealthCheckSummaryDTO"
                    },
                    "type": "array"
                },
                "health_check_summaries": {
                    "$ref": "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckSummaryDTO&gt;"
                },
                "health_status": {
                    "enum": [
                        "Critical",
                        "Warning",
                        "Good",
                        "Unknown",
                        "Error"
                    ],
                    "type": "string"
                }
            }
        },
        "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.dr.CloudCredentialsDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.dr.CloudCredentialsDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.dr.CloudCredentialsDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.dr.CloudCvmDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.dr.CloudCvmDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.dr.CloudCvmDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.dr.CloudCvmImageDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.dr.CloudCvmImageDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.dr.CloudCvmImageDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.dr.SubnetDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.dr.SubnetDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.dr.SubnetDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.dto.dr.AwsCredentialDTO": {
            "id": "get.dto.dr.AwsCredentialDTO",
            "required": [],
            "properties": {
                "access_key": {
                    "description": "The AWS access key.",
                    "notes": "The AWS access key.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "secret_key": {
                    "description": "The AWS secret key.",
                    "notes": "The AWS secret key.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.dr.AzureCredentialDTO": {
            "id": "get.dto.dr.AzureCredentialDTO",
            "required": [],
            "properties": {
                "secure_file_i_d": {
                    "description": "The Azure secure file ID.",
                    "notes": "The Azure secure file ID.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "subscription_i_d": {
                    "description": "The Azure subscription ID.",
                    "notes": "The Azure subscription ID.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.dr.CloudCredentialsDTO": {
            "id": "get.dto.dr.CloudCredentialsDTO",
            "required": [],
            "properties": {
                "aws_credential": {
                    "$ref": "get.dto.dr.AwsCredentialDTO",
                    "description": "AWS Credentials.",
                    "notes": "AWS Credentials.",
                    "typeName": "DEFAULT"
                },
                "azure_credential": {
                    "$ref": "get.dto.dr.AzureCredentialDTO",
                    "description": "Azure Credentials.",
                    "notes": "Azure Credentials.",
                    "typeName": "DEFAULT"
                },
                "credential_i_d": {
                    "format": "int64",
                    "type": "integer"
                },
                "name": {
                    "description": "Name of the Cloud credentials.",
                    "notes": "Name of the Cloud credentials.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "use_as_default": {
                    "type": "boolean"
                }
            }
        },
        "get.dto.dr.CloudCvmDTO": {
            "id": "get.dto.dr.CloudCvmDTO",
            "required": [],
            "properties": {
                "name": {
                    "type": "string"
                },
                "private_ip": {
                    "type": "string"
                },
                "public_ip": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "state": {
                    "enum": [
                        "STARTING",
                        "STARTED",
                        "RUNNING",
                        "STOPPING",
                        "STOPPED",
                        "TERMINATED"
                    ],
                    "type": "string"
                },
                "subnet_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "get.dto.dr.CloudCvmImageDTO": {
            "id": "get.dto.dr.CloudCvmImageDTO",
            "required": [],
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "get.dto.dr.SubnetDTO": {
            "id": "get.dto.dr.SubnetDTO",
            "required": [],
            "properties": {
                "availability_zone": {
                    "type": "string"
                },
                "available_ip_count": {
                    "format": "int32",
                    "type": "integer"
                },
                "default_avail_zone": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "subnet_cidr": {
                    "type": "string"
                },
                "subnet_id": {
                    "type": "string"
                },
                "vpc_id": {
                    "type": "string"
                },
                "vpn_state": {
                    "enum": [
                        "AVAILABLE",
                        "IMPAIRED",
                        "UNAVAILABLE",
                        "UNKNOWN"
                    ],
                    "type": "string"
                }
            }
        },
        "java.util.Map&lt;create.dto.alerts.AlertDTO$AlertSeverity, create.base.EntityCollection&lt;create.dto.alerts.AlertDTO&gt;&gt;": {
            "id": "java.util.Map&lt;create.dto.alerts.AlertDTO$AlertSeverity, create.base.EntityCollection&lt;create.dto.alerts.AlertDTO&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, create.dto.dr.RemoteSiteDTO$VStoreInfo&gt;": {
            "id": "java.util.Map&lt;java.lang.String, create.dto.dr.RemoteSiteDTO$VStoreInfo&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckErrorsDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckErrorsDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckSummaryDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckSummaryDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.lang.String&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.lang.String&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;",
            "required": [],
            "properties": {}
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/PrismGateway/services/rest/v2.0",
    "resourcePath": "/cluster",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/cluster/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get Cluster details.",
                    "notes": "Get the details of the cluster.",
                    "type": "get.dto.appliance.configuration.ClusterDTO",
                    "nickname": "getClusterInfo",
                    "parameters": [],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PATCH",
                    "summary": "Modify Cluster params.",
                    "notes": "Modify the params of the cluster.",
                    "type": "patch.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "patchClusterParams",
                    "parameters": [
                        {
                            "description": "A Cluster instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "patch.dto.RequestDTO&lt;patch.dto.appliance.configuration.ClusterDTO&gt;"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Update Cluster params.",
                    "notes": "Update the params of the cluster.",
                    "type": "update.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "editClusterParams",
                    "parameters": [
                        {
                            "description": "A Cluster instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.appliance.configuration.ClusterDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/cluster/metro_witness",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Add Witness VM details",
                    "notes": "Add witness VM details.",
                    "type": "create.dto.dr.WitnessSiteDTO",
                    "nickname": "addMAWitness",
                    "parameters": [
                        {
                            "description": "Witness VM details",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.dr.WitnessSiteDTO"
                        },
                        {
                            "name": "test_only",
                            "description": "Witness VM details",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                }
            ]
        },
        {
            "internal": false,
            "path": "/cluster/metro_witness/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "List All Metro Availability Witnesses",
                    "notes": "List All Metro Availability Witnesses",
                    "type": "array",
                    "items": {
                        "$ref": "get.dto.dr.WitnessSiteDTO"
                    },
                    "nickname": "getAllMAWitnesses",
                    "parameters": [],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                }
            ]
        },
        {
            "internal": false,
            "path": "/cluster/metro_witness/{uuid}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete a Metro Availability Witness",
                    "notes": "Delete a Metro Availability Witness",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "removeWitnessSite",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "MA Witness uuid",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "recover",
                            "description": "recover from an unsuccessful delete operation",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Update a Metro Availability Witness",
                    "notes": "Update a Metro Availability Witness",
                    "type": "update.dto.dr.WitnessSiteDTO",
                    "nickname": "updateWitnessSite",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "MA Witness uuid",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "MA Witness update details",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.dr.WitnessSiteDTO$UpdateWitnessSiteDTO"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                }
            ]
        },
        {
            "internal": false,
            "path": "/cluster/name_servers",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of Name Servers.",
                    "notes": "Get the list of Name Servers configured on the cluster.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "nickname": "getNameServers",
                    "parameters": [],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Add name server.",
                    "notes": "Add the server to the name servers configured on the cluster.",
                    "type": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "addNameServer",
                    "parameters": [
                        {
                            "description": "Name of a name server",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.PrimitiveDTO&lt;java.lang.String&gt;"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/cluster/name_servers/{nameServer}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete the specified Name Server.",
                    "notes": "Delete a Name Server with the specified name.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "removeNameServer",
                    "parameters": [
                        {
                            "name": "nameServer",
                            "description": "Name of a name server",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                }
            ]
        },
        {
            "internal": false,
            "path": "/cluster/nfs_whitelist",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get NFS subnet whitelist.",
                    "notes": "Get the NFS subnet whitelist on the cluster.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "nickname": "getNfsSubnetWhitelist",
                    "parameters": [],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Add NFS subnet whitelist entry.",
                    "notes": "Add the address to the NFS subnet whitelist.",
                    "type": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "addNfsSubnetWhitelist",
                    "parameters": [
                        {
                            "description": "NFS Whilelist",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.PrimitiveDTO&lt;java.lang.String&gt;"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/cluster/nfs_whitelist/{name:.+}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete NFS the specified subnet whitelist entry.",
                    "notes": "Delete an address from the NFS subnet whitelist.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "removeNfsSubnetWhitelist",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "NFS Whitelist",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/cluster/ntp_servers",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of NTP servers.",
                    "notes": "Get the list of NTP servers configured on the cluster.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "nickname": "getNtpServers",
                    "parameters": [],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Add NTP server.",
                    "notes": "Add the server to the NTP servers configured on the cluster.",
                    "type": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "addNtpServer",
                    "parameters": [
                        {
                            "description": "Name of NTP server",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.PrimitiveDTO&lt;java.lang.String&gt;"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/cluster/ntp_servers/{ntp_server}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete an NTP server.",
                    "notes": "Delete an NTP server with the specified name.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "removeNtpServer",
                    "parameters": [
                        {
                            "name": "ntp_server",
                            "description": "Name of NTP server",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/cluster/public_keys",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of Public Keys.",
                    "notes": "Get the list of Public Keys configured in the cluster.",
                    "type": "array",
                    "items": {
                        "$ref": "get.dto.appliance.configuration.ClusterDTO$PublicKeyDTO"
                    },
                    "nickname": "getPublicKeys",
                    "parameters": [],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/cluster/public_keys/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Add a Public Key.",
                    "notes": "Add a Public Key to the cluster.",
                    "type": "create.dto.appliance.configuration.ClusterDTO$PublicKeyDTO",
                    "nickname": "addPublicKey",
                    "parameters": [
                        {
                            "description": "A Public Key instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.appliance.configuration.ClusterDTO$PublicKeyDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/cluster/public_keys/{name}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete a Public Key.",
                    "notes": "Delete a Public Key with the specified name.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "deletePublicKey",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Public Key",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get a Public Key.",
                    "notes": "Get a Public Key with the specified name.",
                    "type": "get.dto.appliance.configuration.ClusterDTO$PublicKeyDTO",
                    "nickname": "getPublicKey",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Public Key",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/cluster/rackable_units",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of Rackable Units.",
                    "notes": "Get the list of Rackable Units configured on the cluster.",
                    "type": "array",
                    "items": {
                        "$ref": "get.dto.appliance.configuration.RackableUnitDTO"
                    },
                    "nickname": "getRackableUnits",
                    "parameters": [],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/cluster/rackable_units/{uuid}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete the specified Rackable Unit.",
                    "notes": "Delete a Rackable Unit with the specified id.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "deleteRackableUnit",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of a Rackable Unit",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the specified Rackable Unit.",
                    "notes": "Get a Rackable Unit with the specified id.",
                    "type": "get.dto.appliance.configuration.RackableUnitDTO",
                    "nickname": "getRackableUnit",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of a Rackable Unit",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/cluster/remote_support",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get Remote Support settings.",
                    "notes": "Get the status of Remote Support settings on the cluster.",
                    "type": "get.dto.appliance.configuration.RemoteSupportConfigDTO",
                    "nickname": "getRemoteSupportStatus",
                    "parameters": [],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Update Remote Support settings.",
                    "notes": "Update the Remote Support settings on the cluster.",
                    "type": "update.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "editRemoteSupport",
                    "parameters": [
                        {
                            "description": "A Timed Bool instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.appliance.configuration.TimedBoolDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/cluster/search/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get spotlight search results.",
                    "notes": "Perform a spotlight search on the cluster.",
                    "type": "array",
                    "items": {
                        "$ref": "get.dto.appliance.configuration.SpotlightSearchResultDTO"
                    },
                    "nickname": "doSpotlightSearch",
                    "parameters": [
                        {
                            "name": "search_string",
                            "description": "Search string",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "entity_types",
                            "description": "Entity types",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "field_names",
                            "description": "Field Names",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "maxCount",
                            "description": "Maximum entities to retrieve, the default value is 100",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/cluster/smtp",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete SMTP server config.",
                    "notes": "Delete the SMTP server configuration.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "removeSmtpServer",
                    "parameters": [],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the SMTP server config.",
                    "notes": "Get the SMTP server configuration.",
                    "type": "get.dto.appliance.configuration.SmtpServerDTO",
                    "nickname": "getSmtpServer",
                    "parameters": [],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PATCH",
                    "summary": "Modify the SMTP server config.",
                    "notes": "Modify the SMTP server configuration.",
                    "type": "patch.dto.appliance.configuration.SmtpServerDTO",
                    "nickname": "patchSmtpServer",
                    "parameters": [
                        {
                            "description": "An SMTP Server instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "patch.dto.RequestDTO&lt;patch.dto.appliance.configuration.SmtpServerDTO&gt;"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Update the SMTP server config.",
                    "notes": "Update the SMTP server configuration.",
                    "type": "update.dto.appliance.configuration.SmtpServerDTO",
                    "nickname": "updateSmtpServer",
                    "parameters": [
                        {
                            "description": "An SMTP Server instance",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.appliance.configuration.SmtpServerDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/cluster/smtp/security_modes",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the SMTP security modes.",
                    "notes": "Get the list of supported security modes for the SMTP server.",
                    "type": "array",
                    "items": {
                        "enum": [
                            "STARTTLS",
                            "SSL",
                            "NONE"
                        ],
                        "type": "string"
                    },
                    "nickname": "getSmtpServerSecurityModeType",
                    "parameters": [],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/cluster/stats/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of Cluster stats.",
                    "notes": "Get the stats for the specified metrics. If start time and end time are included in the query string, then historical stats are retrieved. Otherwise, the latest statsare retrieved.",
                    "type": "get.base.StatsResponse",
                    "nickname": "getClusterStats",
                    "parameters": [
                        {
                            "name": "metrics",
                            "description": "List of metrics",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "interval_in_secs",
                            "description": "Sampling interval of stats",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "create.dto.PrimitiveDTO&lt;java.lang.String&gt;": {
            "id": "create.dto.PrimitiveDTO&lt;java.lang.String&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "create.dto.appliance.configuration.ClusterDTO$PublicKeyDTO": {
            "id": "create.dto.appliance.configuration.ClusterDTO$PublicKeyDTO",
            "required": [],
            "properties": {
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "create.dto.dr.WitnessSiteDTO": {
            "id": "create.dto.dr.WitnessSiteDTO",
            "required": [
                "marked_for_removal",
                "ip_addresses",
                "username",
                "password"
            ],
            "properties": {
                "cluster_name": {
                    "type": "string"
                },
                "cluster_timestamp_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "ip_addresses": {
                    "description": "Unique identifier for the Metro Availability Witness Site, it can be either iqn or ip address",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "marked_for_removal": {
                    "description": "flag indicating whether the witness site is deleted or not",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "nos_full_version": {
                    "type": "string"
                },
                "nos_version": {
                    "type": "string"
                },
                "password": {
                    "description": "password used to communicate with Metro Availability Witness Site",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "username": {
                    "description": "username used to communicate with Metro Availability Witness Site",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "Unique identifier of the Metro Availability Witness Site",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "witness_name": {
                    "type": "string"
                }
            }
        },
        "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "get.base.StatsResponse": {
            "id": "get.base.StatsResponse",
            "required": [],
            "properties": {
                "stats_specific_responses": {
                    "items": {
                        "$ref": "get.base.StatsResponse$StatsSpecificResponse"
                    },
                    "type": "array"
                }
            }
        },
        "get.base.StatsResponse$StatsSpecificResponse": {
            "id": "get.base.StatsResponse$StatsSpecificResponse",
            "required": [],
            "properties": {
                "interval_in_secs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "metric": {
                    "type": "string"
                },
                "start_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "successful": {
                    "type": "boolean"
                },
                "values": {
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.alerts.AlertSummaryDTO": {
            "id": "get.dto.alerts.AlertSummaryDTO",
            "required": [],
            "properties": {
                "alert_summaries": {
                    "$ref": "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;"
                },
                "count": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "get.dto.appliance.configuration.ClusterDTO": {
            "id": "get.dto.appliance.configuration.ClusterDTO",
            "required": [],
            "properties": {
                "alert_summary": {
                    "$ref": "get.dto.alerts.AlertSummaryDTO"
                },
                "all_hyperv_nodes_in_failover_cluster": {
                    "description": "If the cluster includes Hyper-V nodes, then this property indicates whether all the Hyper-V nodes in the NOS cluster (that are not marked for removal)are a part of a Hyper-V failover cluster",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "block_serials": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "cloudcluster": {
                    "type": "boolean"
                },
                "cluster_arch": {
                    "type": "string"
                },
                "cluster_data_state": {
                    "$ref": "get.dto.multicluster.ClusterDataStateDTO"
                },
                "cluster_external_data_services_i_p_address": {
                    "type": "string"
                },
                "cluster_external_i_p_address": {
                    "type": "string"
                },
                "cluster_functions": {
                    "description": "This field describes the type of cluster",
                    "items": {
                        "enum": [
                            "NDFS",
                            "MULTICLUSTER",
                            "CLOUDDATAGATEWAY",
                            "MINERVA",
                            "SINGLE_NODE",
                            "TWO_NODE"
                        ],
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT",
                    "uniqueItems": "true"
                },
                "cluster_gpus": {
                    "description": "Gpus present on the cluster",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "cluster_incarnation_id": {
                    "format": "int64",
                    "type": "integer"
                },
                "cluster_redundancy_state": {
                    "$ref": "get.dto.appliance.configuration.ClusterRedundancyStateDTO"
                },
                "cluster_uuid": {
                    "description": " Uuid of the cluster this entity belongs to",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "common_criteria_mode": {
                    "type": "boolean"
                },
                "credential": {
                    "$ref": "get.dto.hyperv.CredentialDTO",
                    "description": "If the cluster includes Hyper-V nodes, then this propertyindicates the credential for the account that has permissions to modify the domain account representing the NOS cluster",
                    "typeName": "DEFAULT"
                },
                "disable_degraded_node_monitoring": {
                    "type": "boolean"
                },
                "domain": {
                    "description": "If the cluster includes Hyper-V nodes, then this property indicates the AD domain name that this cluster is a part of",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "enable_lock_down": {
                    "type": "boolean"
                },
                "enable_on_disk_dedup": {
                    "type": "boolean"
                },
                "enable_password_remote_login_to_cluster": {
                    "type": "boolean"
                },
                "enable_shadow_clones": {
                    "type": "boolean"
                },
                "enforce_rackable_unit_aware_placement": {
                    "description": "Indicates whether RackableUnit (RU) aware placement has been enforced.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "external_subnet": {
                    "type": "string"
                },
                "fingerprint_content_cache_percentage": {
                    "format": "int32",
                    "type": "integer"
                },
                "full_version": {
                    "type": "string"
                },
                "global_nfs_white_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "gpu_driver_version": {
                    "description": "Host driver version of the GPU",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "has_self_encrypting_drive": {
                    "type": "boolean"
                },
                "health_summary": {
                    "$ref": "get.dto.health.check.HealthSummaryDTO"
                },
                "http_proxies": {
                    "items": {
                        "$ref": "get.dto.appliance.configuration.HttpProxyDTO"
                    },
                    "type": "array"
                },
                "hypervisor_security_compliance_config": {
                    "$ref": "get.dto.appliance.configuration.ClusterDTO$HypervisorSecurityComplianceConfigDTO"
                },
                "hypervisor_types": {
                    "items": {
                        "enum": [
                            "kVMware",
                            "kXen",
                            "kHyperv",
                            "kKvm",
                            "kAmazonWebServices",
                            "kVCenter",
                            "kAcropolis",
                            "kSCVMM",
                            "kNull"
                        ],
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": "true"
                },
                "id": {
                    "type": "string"
                },
                "internal_subnet": {
                    "type": "string"
                },
                "is_upgrade_in_progress": {
                    "type": "boolean"
                },
                "iscsi_config": {
                    "$ref": "get.dto.appliance.configuration.ClusterDTO$IscsiConfig",
                    "description": "Cluster wide iscsi configuration",
                    "typeName": "DEFAULT"
                },
                "management_servers": {
                    "items": {
                        "$ref": "get.dto.uhura.ManagementServerInfoDTO"
                    },
                    "type": "array"
                },
                "multicluster": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "name_servers": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "ncc_version": {
                    "type": "string"
                },
                "nos_cluster_and_hosts_domain_joined": {
                    "description": "If the cluster includes Hyper-V nodes, then this property indicates whether the NOS cluster and the constituent hosts are all joined to the same domain",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "ntp_servers": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "num_nodes": {
                    "format": "int64",
                    "type": "integer"
                },
                "operation_mode": {
                    "enum": [
                        "NORMAL",
                        "OVERRIDE",
                        "READONLY",
                        "STANDALONE",
                        "SWITCH_TO_TWO_NODE"
                    ],
                    "type": "string"
                },
                "public_keys": {
                    "items": {
                        "$ref": "get.dto.appliance.configuration.ClusterDTO$PublicKeyDTO"
                    },
                    "type": "array"
                },
                "rackable_units": {
                    "items": {
                        "$ref": "get.dto.appliance.configuration.RackableUnitDTO"
                    },
                    "type": "array"
                },
                "security_compliance_config": {
                    "$ref": "get.dto.appliance.configuration.ClusterDTO$SecurityComplianceConfigDTO"
                },
                "service_centers": {
                    "items": {
                        "$ref": "get.dto.appliance.configuration.ServiceCenterDTO"
                    },
                    "type": "array"
                },
                "smtp_server": {
                    "$ref": "get.dto.appliance.configuration.SmtpServerDTO"
                },
                "ssd_pinning_percentage_limit": {
                    "description": "This field describes the allowable percentage pinning on the ssd",
                    "format": "int32",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "storage_type": {
                    "description": "This field describes the storage type of cluster",
                    "enum": [
                        "ALL_FLASH",
                        "MIXED",
                        "ALL_HDD"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "support_verbosity_type": {
                    "enum": [
                        "NOTHING",
                        "BASIC",
                        "BASIC_COREDUMP"
                    ],
                    "type": "string"
                },
                "target_version": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "usage_stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "uuid": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "get.dto.appliance.configuration.ClusterDTO$HypervisorSecurityComplianceConfigDTO": {
            "id": "get.dto.appliance.configuration.ClusterDTO$HypervisorSecurityComplianceConfigDTO",
            "required": [],
            "properties": {}
        },
        "get.dto.appliance.configuration.ClusterDTO$IscsiConfig": {
            "id": "get.dto.appliance.configuration.ClusterDTO$IscsiConfig",
            "required": [],
            "properties": {
                "external_client_enabled": {
                    "description": "Indicates whether external iscsi initiators are enabled or not",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.appliance.configuration.ClusterDTO$PublicKeyDTO": {
            "id": "get.dto.appliance.configuration.ClusterDTO$PublicKeyDTO",
            "required": [],
            "properties": {
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "get.dto.appliance.configuration.ClusterDTO$SecurityComplianceConfigDTO": {
            "id": "get.dto.appliance.configuration.ClusterDTO$SecurityComplianceConfigDTO",
            "required": [],
            "properties": {
                "enable_s_n_m_pv3_only": {
                    "type": "boolean"
                }
            }
        },
        "get.dto.appliance.configuration.ClusterRedundancyStateDTO": {
            "id": "get.dto.appliance.configuration.ClusterRedundancyStateDTO",
            "required": [],
            "properties": {
                "current_redundancy_factor": {
                    "format": "int32",
                    "type": "integer"
                },
                "desired_redundancy_factor": {
                    "format": "int32",
                    "type": "integer"
                },
                "redundancy_status": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;"
                }
            }
        },
        "get.dto.appliance.configuration.HttpProxyDTO": {
            "id": "get.dto.appliance.configuration.HttpProxyDTO",
            "description": "http-proxy",
            "required": [],
            "properties": {
                "address": {
                    "description": "Address of the proxy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Proxy name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "password": {
                    "description": "Password for proxy authentication",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "port": {
                    "description": "Port on which proxy is binding",
                    "format": "int32",
                    "maximum": "65536",
                    "minimum": "0",
                    "notes": "Any port number which is in the range 0 - 65536",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "proxy_types": {
                    "description": "Proxy types to send applicable traffic",
                    "items": {
                        "enum": [
                            "HTTP",
                            "HTTPS",
                            "SOCKS"
                        ],
                        "type": "string"
                    },
                    "notes": "Proxy types to send applicable traffic. Supports 'http' 'https', and 'socks' proxy configuration.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "username": {
                    "description": "Username for proxy authentication",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.appliance.configuration.RackableUnitDTO": {
            "id": "get.dto.appliance.configuration.RackableUnitDTO",
            "required": [],
            "properties": {
                "id": {
                    "format": "int64",
                    "type": "integer"
                },
                "location": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "model_name": {
                    "type": "string"
                },
                "node_uuids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "nodes": {
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "type": "array"
                },
                "positions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rackable_unit_uuid": {
                    "type": "string"
                },
                "serial": {
                    "type": "string"
                }
            }
        },
        "get.dto.appliance.configuration.RemoteSupportConfigDTO": {
            "id": "get.dto.appliance.configuration.RemoteSupportConfigDTO",
            "required": [],
            "properties": {
                "enable": {
                    "$ref": "get.dto.appliance.configuration.TimedBoolDTO"
                },
                "tunnel_details": {
                    "$ref": "get.dto.appliance.configuration.RemoteTunnelDetailsDTO"
                }
            }
        },
        "get.dto.appliance.configuration.RemoteTunnelDetailsDTO": {
            "id": "get.dto.appliance.configuration.RemoteTunnelDetailsDTO",
            "required": [],
            "properties": {
                "connection_status": {
                    "$ref": "get.dto.base.CommunicationStatusDTO"
                },
                "http_proxy": {
                    "$ref": "get.dto.appliance.configuration.HttpProxyDTO"
                },
                "service_center": {
                    "$ref": "get.dto.appliance.configuration.ServiceCenterDTO"
                },
                "transport_status": {
                    "$ref": "get.dto.base.CommunicationStatusDTO"
                }
            }
        },
        "get.dto.appliance.configuration.ServiceCenterDTO": {
            "id": "get.dto.appliance.configuration.ServiceCenterDTO",
            "required": [],
            "properties": {
                "ip_address": {
                    "description": "Ip Address.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "port": {
                    "description": "Port number.",
                    "format": "int32",
                    "maximum": "65536",
                    "minimum": "0",
                    "notes": "Any port number which is in the range 0 - 65536",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "username": {
                    "description": "username.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.appliance.configuration.SmtpServerDTO": {
            "id": "get.dto.appliance.configuration.SmtpServerDTO",
            "required": [],
            "properties": {
                "address": {
                    "type": "string"
                },
                "email_status": {
                    "$ref": "get.dto.base.CommunicationStatusDTO"
                },
                "from_email_address": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "format": "int32",
                    "type": "integer"
                },
                "secure_mode": {
                    "enum": [
                        "STARTTLS",
                        "SSL",
                        "NONE"
                    ],
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "get.dto.appliance.configuration.SpotlightSearchResultDTO": {
            "id": "get.dto.appliance.configuration.SpotlightSearchResultDTO",
            "required": [],
            "properties": {
                "cluster_name": {
                    "type": "string"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "entity_id": {
                    "type": "string"
                },
                "entity_name": {
                    "type": "string"
                },
                "entity_type": {
                    "type": "string"
                },
                "entity_uuid": {
                    "type": "string"
                },
                "field_name": {
                    "type": "string"
                },
                "field_value": {
                    "type": "string"
                }
            }
        },
        "get.dto.appliance.configuration.TimedBoolDTO": {
            "id": "get.dto.appliance.configuration.TimedBoolDTO",
            "required": [],
            "properties": {
                "duration": {
                    "description": "Time to keep enabled",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "get.dto.base.CommunicationStatusDTO": {
            "id": "get.dto.base.CommunicationStatusDTO",
            "required": [],
            "properties": {
                "last_changed_time_stamp_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_checked_time_stamp_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_successful_transmission_time_stamp_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "$ref": "get.dto.base.ParameterizedMessageDTO"
                },
                "status": {
                    "enum": [
                        "SUCCESS",
                        "FAILED",
                        "RETRYING",
                        "UNKNOWN"
                    ],
                    "type": "string"
                }
            }
        },
        "get.dto.base.ParameterizedMessageDTO": {
            "id": "get.dto.base.ParameterizedMessageDTO",
            "required": [],
            "properties": {
                "attributes": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.dto.dr.WitnessSiteDTO": {
            "id": "get.dto.dr.WitnessSiteDTO",
            "required": [],
            "properties": {
                "cluster_name": {
                    "type": "string"
                },
                "cluster_timestamp_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "ip_addresses": {
                    "description": "Unique identifier for the Metro Availability Witness Site, it can be either iqn or ip address",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "marked_for_removal": {
                    "description": "flag indicating whether the witness site is deleted or not",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "nos_full_version": {
                    "type": "string"
                },
                "nos_version": {
                    "type": "string"
                },
                "password": {
                    "description": "password used to communicate with Metro Availability Witness Site",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "username": {
                    "description": "username used to communicate with Metro Availability Witness Site",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "Unique identifier of the Metro Availability Witness Site",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "witness_name": {
                    "type": "string"
                }
            }
        },
        "get.dto.health.check.EntityTypeHealthCheckSummaryDTO": {
            "id": "get.dto.health.check.EntityTypeHealthCheckSummaryDTO",
            "required": [],
            "properties": {
                "checks_in_error": {
                    "$ref": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;"
                },
                "detailed_check_summary": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;"
                }
            }
        },
        "get.dto.health.check.HealthSummaryDTO": {
            "id": "get.dto.health.check.HealthSummaryDTO",
            "required": [],
            "properties": {
                "entity_type_summaries": {
                    "items": {
                        "$ref": "get.dto.health.check.EntityTypeHealthCheckSummaryDTO"
                    },
                    "type": "array"
                },
                "health_check_summaries": {
                    "$ref": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;"
                },
                "health_status": {
                    "enum": [
                        "Critical",
                        "Warning",
                        "Good",
                        "Unknown",
                        "Error"
                    ],
                    "type": "string"
                }
            }
        },
        "get.dto.hyperv.CredentialDTO": {
            "id": "get.dto.hyperv.CredentialDTO",
            "required": [],
            "properties": {
                "logon_name": {
                    "description": "Logon name of the account",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "password": {
                    "description": "Password of the account",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.multicluster.ClusterDataStateDTO": {
            "id": "get.dto.multicluster.ClusterDataStateDTO",
            "required": [],
            "properties": {
                "cluster_available": {
                    "type": "boolean"
                },
                "cluster_data_available": {
                    "type": "boolean"
                },
                "cluster_register_time_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "first_unavailable_time_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_alerts_data_transferred_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_arithmos_data_transferred_usecs": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "get.dto.uhura.ManagementServerInfoDTO": {
            "id": "get.dto.uhura.ManagementServerInfoDTO",
            "required": [],
            "properties": {
                "drs_enabled": {
                    "description": "Denotes if DRS is enabled or not. Applicable only for vCenter.",
                    "notes": "Denotes if DRS is enabled or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "drs_vm_behaviour": {
                    "description": "Denotes if DRS is enabled or not. Applicable only for vCenter.",
                    "enum": [
                        "UNKNOWN",
                        "FULL_ENABLED",
                        "ONLY_PLACEMENT_ENABLED",
                        "MANUAL"
                    ],
                    "notes": "Denotes if DRS is enabled or not.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "ha_enabled": {
                    "description": "Denotes if HA is enabled or not.",
                    "notes": "Denotes if HA is enabled or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "in_use": {
                    "description": "Indicates whether any host is managed by this server or not.",
                    "notes": "Indicates whether any host is managed by this server or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "ip_address": {
                    "description": "Address of the management server.",
                    "notes": "Address of the management server.",
                    "type": "string",
                    "typeName": "IP4_ADDRESS"
                },
                "management_server_type": {
                    "enum": [
                        "VCENTER"
                    ],
                    "type": "string"
                },
                "registered": {
                    "description": "Denotes whether the server is registered with Nutanix or not",
                    "notes": "Denotes whether the server is registered with Nutanix or not",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                }
            }
        },
        "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;": {
            "id": "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.lang.String&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.lang.String&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.util.Map&lt;patch.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.util.Map&lt;patch.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, patch.dto.health.check.HealthCheckErrorsDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, patch.dto.health.check.HealthCheckErrorsDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, patch.dto.health.check.HealthCheckSummaryDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, patch.dto.health.check.HealthCheckSummaryDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckErrorsDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckErrorsDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckSummaryDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckSummaryDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;patch.dto.alerts.AlertDTO$AlertSeverity, patch.base.EntityCollection&lt;patch.dto.alerts.AlertDTO&gt;&gt;": {
            "id": "java.util.Map&lt;patch.dto.alerts.AlertDTO$AlertSeverity, patch.base.EntityCollection&lt;patch.dto.alerts.AlertDTO&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;patch.dto.health.check.HealthStatus, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;patch.dto.health.check.HealthStatus, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;update.dto.alerts.AlertDTO$AlertSeverity, update.base.EntityCollection&lt;update.dto.alerts.AlertDTO&gt;&gt;": {
            "id": "java.util.Map&lt;update.dto.alerts.AlertDTO$AlertSeverity, update.base.EntityCollection&lt;update.dto.alerts.AlertDTO&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "patch.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "patch.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "patch.dto.RequestDTO&lt;patch.dto.appliance.configuration.ClusterDTO&gt;": {
            "id": "patch.dto.RequestDTO&lt;patch.dto.appliance.configuration.ClusterDTO&gt;",
            "required": [],
            "properties": {
                "cluster_uuid": {
                    "type": "string"
                },
                "generic_d_t_o": {
                    "$ref": "patch.dto.appliance.configuration.ClusterDTO"
                },
                "operation": {
                    "type": "string"
                }
            }
        },
        "patch.dto.RequestDTO&lt;patch.dto.appliance.configuration.SmtpServerDTO&gt;": {
            "id": "patch.dto.RequestDTO&lt;patch.dto.appliance.configuration.SmtpServerDTO&gt;",
            "required": [],
            "properties": {
                "cluster_uuid": {
                    "type": "string"
                },
                "generic_d_t_o": {
                    "$ref": "patch.dto.appliance.configuration.SmtpServerDTO"
                },
                "operation": {
                    "type": "string"
                }
            }
        },
        "patch.dto.alerts.AlertSummaryDTO": {
            "id": "patch.dto.alerts.AlertSummaryDTO",
            "required": [],
            "properties": {
                "alert_summaries": {
                    "$ref": "java.util.Map&lt;patch.dto.alerts.AlertDTO$AlertSeverity, patch.base.EntityCollection&lt;patch.dto.alerts.AlertDTO&gt;&gt;"
                },
                "count": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "patch.dto.appliance.configuration.ClusterDTO": {
            "id": "patch.dto.appliance.configuration.ClusterDTO",
            "required": [],
            "properties": {
                "alert_summary": {
                    "$ref": "patch.dto.alerts.AlertSummaryDTO"
                },
                "block_serials": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "cloudcluster": {
                    "type": "boolean"
                },
                "cluster_arch": {
                    "type": "string"
                },
                "cluster_data_state": {
                    "$ref": "patch.dto.multicluster.ClusterDataStateDTO"
                },
                "cluster_external_data_services_i_p_address": {
                    "type": "string"
                },
                "cluster_external_i_p_address": {
                    "type": "string"
                },
                "cluster_incarnation_id": {
                    "format": "int64",
                    "type": "integer"
                },
                "cluster_redundancy_state": {
                    "$ref": "patch.dto.appliance.configuration.ClusterRedundancyStateDTO"
                },
                "common_criteria_mode": {
                    "type": "boolean"
                },
                "disable_degraded_node_monitoring": {
                    "type": "boolean"
                },
                "enable_lock_down": {
                    "type": "boolean"
                },
                "enable_on_disk_dedup": {
                    "type": "boolean"
                },
                "enable_password_remote_login_to_cluster": {
                    "type": "boolean"
                },
                "enable_shadow_clones": {
                    "type": "boolean"
                },
                "external_subnet": {
                    "type": "string"
                },
                "fingerprint_content_cache_percentage": {
                    "format": "int32",
                    "type": "integer"
                },
                "full_version": {
                    "type": "string"
                },
                "global_nfs_white_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_self_encrypting_drive": {
                    "type": "boolean"
                },
                "health_summary": {
                    "$ref": "patch.dto.health.check.HealthSummaryDTO"
                },
                "http_proxies": {
                    "items": {
                        "$ref": "patch.dto.appliance.configuration.HttpProxyDTO"
                    },
                    "type": "array"
                },
                "hypervisor_security_compliance_config": {
                    "$ref": "patch.dto.appliance.configuration.ClusterDTO$HypervisorSecurityComplianceConfigDTO"
                },
                "hypervisor_types": {
                    "items": {
                        "enum": [
                            "kVMware",
                            "kXen",
                            "kHyperv",
                            "kKvm",
                            "kAmazonWebServices",
                            "kVCenter",
                            "kAcropolis",
                            "kSCVMM",
                            "kNull"
                        ],
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": "true"
                },
                "id": {
                    "type": "string"
                },
                "internal_subnet": {
                    "type": "string"
                },
                "is_upgrade_in_progress": {
                    "type": "boolean"
                },
                "iscsi_config": {
                    "$ref": "patch.dto.appliance.configuration.ClusterDTO$IscsiConfig",
                    "description": "Cluster wide iscsi configuration",
                    "typeName": "DEFAULT"
                },
                "management_servers": {
                    "items": {
                        "$ref": "patch.dto.uhura.ManagementServerInfoDTO"
                    },
                    "type": "array"
                },
                "multicluster": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "name_servers": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "ncc_version": {
                    "type": "string"
                },
                "ntp_servers": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "num_nodes": {
                    "format": "int64",
                    "type": "integer"
                },
                "operation_mode": {
                    "enum": [
                        "NORMAL",
                        "OVERRIDE",
                        "READONLY",
                        "STANDALONE",
                        "SWITCH_TO_TWO_NODE"
                    ],
                    "type": "string"
                },
                "public_keys": {
                    "items": {
                        "$ref": "patch.dto.appliance.configuration.ClusterDTO$PublicKeyDTO"
                    },
                    "type": "array"
                },
                "rackable_units": {
                    "items": {
                        "$ref": "patch.dto.appliance.configuration.RackableUnitDTO"
                    },
                    "type": "array"
                },
                "security_compliance_config": {
                    "$ref": "patch.dto.appliance.configuration.ClusterDTO$SecurityComplianceConfigDTO"
                },
                "service_centers": {
                    "items": {
                        "$ref": "patch.dto.appliance.configuration.ServiceCenterDTO"
                    },
                    "type": "array"
                },
                "smtp_server": {
                    "$ref": "patch.dto.appliance.configuration.SmtpServerDTO"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "support_verbosity_type": {
                    "enum": [
                        "NOTHING",
                        "BASIC",
                        "BASIC_COREDUMP"
                    ],
                    "type": "string"
                },
                "target_version": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "usage_stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "uuid": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "patch.dto.appliance.configuration.ClusterDTO$HypervisorSecurityComplianceConfigDTO": {
            "id": "patch.dto.appliance.configuration.ClusterDTO$HypervisorSecurityComplianceConfigDTO",
            "required": [],
            "properties": {}
        },
        "patch.dto.appliance.configuration.ClusterDTO$IscsiConfig": {
            "id": "patch.dto.appliance.configuration.ClusterDTO$IscsiConfig",
            "required": [],
            "properties": {}
        },
        "patch.dto.appliance.configuration.ClusterDTO$PublicKeyDTO": {
            "id": "patch.dto.appliance.configuration.ClusterDTO$PublicKeyDTO",
            "required": [],
            "properties": {
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "patch.dto.appliance.configuration.ClusterDTO$SecurityComplianceConfigDTO": {
            "id": "patch.dto.appliance.configuration.ClusterDTO$SecurityComplianceConfigDTO",
            "required": [],
            "properties": {
                "enable_s_n_m_pv3_only": {
                    "type": "boolean"
                }
            }
        },
        "patch.dto.appliance.configuration.ClusterRedundancyStateDTO": {
            "id": "patch.dto.appliance.configuration.ClusterRedundancyStateDTO",
            "required": [],
            "properties": {
                "current_redundancy_factor": {
                    "format": "int32",
                    "type": "integer"
                },
                "desired_redundancy_factor": {
                    "format": "int32",
                    "type": "integer"
                },
                "redundancy_status": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;"
                }
            }
        },
        "patch.dto.appliance.configuration.HttpProxyDTO": {
            "id": "patch.dto.appliance.configuration.HttpProxyDTO",
            "description": "http-proxy",
            "required": [
                "name"
            ],
            "properties": {
                "address": {
                    "description": "Address of the proxy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Proxy name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "password": {
                    "description": "Password for proxy authentication",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "port": {
                    "description": "Port on which proxy is binding",
                    "format": "int32",
                    "maximum": "65536",
                    "minimum": "0",
                    "notes": "Any port number which is in the range 0 - 65536",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "proxy_types": {
                    "description": "Proxy types to send applicable traffic",
                    "items": {
                        "enum": [
                            "HTTP",
                            "HTTPS",
                            "SOCKS"
                        ],
                        "type": "string"
                    },
                    "notes": "Proxy types to send applicable traffic. Supports 'http' 'https', and 'socks' proxy configuration.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "username": {
                    "description": "Username for proxy authentication",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "patch.dto.appliance.configuration.RackableUnitDTO": {
            "id": "patch.dto.appliance.configuration.RackableUnitDTO",
            "required": [],
            "properties": {
                "id": {
                    "format": "int64",
                    "type": "integer"
                },
                "location": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "model_name": {
                    "type": "string"
                },
                "node_uuids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "nodes": {
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "type": "array"
                },
                "positions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rackable_unit_uuid": {
                    "type": "string"
                },
                "serial": {
                    "type": "string"
                }
            }
        },
        "patch.dto.appliance.configuration.ServiceCenterDTO": {
            "id": "patch.dto.appliance.configuration.ServiceCenterDTO",
            "required": [
                "name",
                "ip_address",
                "username",
                "port"
            ],
            "properties": {
                "ip_address": {
                    "description": "Ip Address.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "port": {
                    "description": "Port number.",
                    "format": "int32",
                    "maximum": "65536",
                    "minimum": "0",
                    "notes": "Any port number which is in the range 0 - 65536",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "username": {
                    "description": "username.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "patch.dto.appliance.configuration.SmtpServerDTO": {
            "id": "patch.dto.appliance.configuration.SmtpServerDTO",
            "required": [],
            "properties": {
                "address": {
                    "type": "string"
                },
                "email_status": {
                    "$ref": "patch.dto.base.CommunicationStatusDTO"
                },
                "from_email_address": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "format": "int32",
                    "type": "integer"
                },
                "secure_mode": {
                    "enum": [
                        "STARTTLS",
                        "SSL",
                        "NONE"
                    ],
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "patch.dto.base.CommunicationStatusDTO": {
            "id": "patch.dto.base.CommunicationStatusDTO",
            "required": [],
            "properties": {
                "last_changed_time_stamp_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_checked_time_stamp_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_successful_transmission_time_stamp_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "$ref": "patch.dto.base.ParameterizedMessageDTO"
                },
                "status": {
                    "enum": [
                        "SUCCESS",
                        "FAILED",
                        "RETRYING",
                        "UNKNOWN"
                    ],
                    "type": "string"
                }
            }
        },
        "patch.dto.base.ParameterizedMessageDTO": {
            "id": "patch.dto.base.ParameterizedMessageDTO",
            "required": [],
            "properties": {
                "attributes": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "patch.dto.health.check.EntityTypeHealthCheckSummaryDTO": {
            "id": "patch.dto.health.check.EntityTypeHealthCheckSummaryDTO",
            "required": [],
            "properties": {
                "checks_in_error": {
                    "$ref": "java.util.Map&lt;java.lang.String, patch.dto.health.check.HealthCheckErrorsDTO&gt;"
                },
                "detailed_check_summary": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.util.Map&lt;patch.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "java.util.Map&lt;patch.dto.health.check.HealthStatus, java.lang.Integer&gt;"
                }
            }
        },
        "patch.dto.health.check.HealthSummaryDTO": {
            "id": "patch.dto.health.check.HealthSummaryDTO",
            "required": [],
            "properties": {
                "entity_type_summaries": {
                    "items": {
                        "$ref": "patch.dto.health.check.EntityTypeHealthCheckSummaryDTO"
                    },
                    "type": "array"
                },
                "health_check_summaries": {
                    "$ref": "java.util.Map&lt;java.lang.String, patch.dto.health.check.HealthCheckSummaryDTO&gt;"
                },
                "health_status": {
                    "enum": [
                        "Critical",
                        "Warning",
                        "Good",
                        "Unknown",
                        "Error"
                    ],
                    "type": "string"
                }
            }
        },
        "patch.dto.multicluster.ClusterDataStateDTO": {
            "id": "patch.dto.multicluster.ClusterDataStateDTO",
            "required": [],
            "properties": {
                "cluster_available": {
                    "type": "boolean"
                },
                "cluster_data_available": {
                    "type": "boolean"
                },
                "cluster_register_time_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "first_unavailable_time_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_alerts_data_transferred_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_arithmos_data_transferred_usecs": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "patch.dto.uhura.ManagementServerInfoDTO": {
            "id": "patch.dto.uhura.ManagementServerInfoDTO",
            "required": [],
            "properties": {
                "management_server_type": {
                    "enum": [
                        "VCENTER"
                    ],
                    "type": "string"
                }
            }
        },
        "update.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "update.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "update.dto.alerts.AlertSummaryDTO": {
            "id": "update.dto.alerts.AlertSummaryDTO",
            "required": [],
            "properties": {
                "alert_summaries": {
                    "$ref": "java.util.Map&lt;update.dto.alerts.AlertDTO$AlertSeverity, update.base.EntityCollection&lt;update.dto.alerts.AlertDTO&gt;&gt;"
                },
                "count": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "update.dto.appliance.configuration.ClusterDTO": {
            "id": "update.dto.appliance.configuration.ClusterDTO",
            "required": [],
            "properties": {
                "alert_summary": {
                    "$ref": "update.dto.alerts.AlertSummaryDTO"
                },
                "block_serials": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "cloudcluster": {
                    "type": "boolean"
                },
                "cluster_arch": {
                    "type": "string"
                },
                "cluster_data_state": {
                    "$ref": "update.dto.multicluster.ClusterDataStateDTO"
                },
                "cluster_external_data_services_i_p_address": {
                    "type": "string"
                },
                "cluster_external_i_p_address": {
                    "type": "string"
                },
                "cluster_incarnation_id": {
                    "format": "int64",
                    "type": "integer"
                },
                "cluster_redundancy_state": {
                    "$ref": "update.dto.appliance.configuration.ClusterRedundancyStateDTO"
                },
                "common_criteria_mode": {
                    "type": "boolean"
                },
                "disable_degraded_node_monitoring": {
                    "type": "boolean"
                },
                "enable_lock_down": {
                    "type": "boolean"
                },
                "enable_on_disk_dedup": {
                    "type": "boolean"
                },
                "enable_password_remote_login_to_cluster": {
                    "type": "boolean"
                },
                "enable_shadow_clones": {
                    "type": "boolean"
                },
                "external_subnet": {
                    "type": "string"
                },
                "fingerprint_content_cache_percentage": {
                    "format": "int32",
                    "type": "integer"
                },
                "full_version": {
                    "type": "string"
                },
                "global_nfs_white_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "has_self_encrypting_drive": {
                    "type": "boolean"
                },
                "health_summary": {
                    "$ref": "update.dto.health.check.HealthSummaryDTO"
                },
                "http_proxies": {
                    "items": {
                        "$ref": "update.dto.appliance.configuration.HttpProxyDTO"
                    },
                    "type": "array"
                },
                "hypervisor_security_compliance_config": {
                    "$ref": "update.dto.appliance.configuration.ClusterDTO$HypervisorSecurityComplianceConfigDTO"
                },
                "hypervisor_types": {
                    "items": {
                        "enum": [
                            "kVMware",
                            "kXen",
                            "kHyperv",
                            "kKvm",
                            "kAmazonWebServices",
                            "kVCenter",
                            "kAcropolis",
                            "kSCVMM",
                            "kNull"
                        ],
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": "true"
                },
                "id": {
                    "type": "string"
                },
                "internal_subnet": {
                    "type": "string"
                },
                "is_upgrade_in_progress": {
                    "type": "boolean"
                },
                "iscsi_config": {
                    "$ref": "update.dto.appliance.configuration.ClusterDTO$IscsiConfig",
                    "description": "Cluster wide iscsi configuration",
                    "typeName": "DEFAULT"
                },
                "management_servers": {
                    "items": {
                        "$ref": "update.dto.uhura.ManagementServerInfoDTO"
                    },
                    "type": "array"
                },
                "multicluster": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "name_servers": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "ncc_version": {
                    "type": "string"
                },
                "ntp_servers": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "num_nodes": {
                    "format": "int64",
                    "type": "integer"
                },
                "operation_mode": {
                    "enum": [
                        "NORMAL",
                        "OVERRIDE",
                        "READONLY",
                        "STANDALONE",
                        "SWITCH_TO_TWO_NODE"
                    ],
                    "type": "string"
                },
                "public_keys": {
                    "items": {
                        "$ref": "update.dto.appliance.configuration.ClusterDTO$PublicKeyDTO"
                    },
                    "type": "array"
                },
                "rackable_units": {
                    "items": {
                        "$ref": "update.dto.appliance.configuration.RackableUnitDTO"
                    },
                    "type": "array"
                },
                "security_compliance_config": {
                    "$ref": "update.dto.appliance.configuration.ClusterDTO$SecurityComplianceConfigDTO"
                },
                "service_centers": {
                    "items": {
                        "$ref": "update.dto.appliance.configuration.ServiceCenterDTO"
                    },
                    "type": "array"
                },
                "smtp_server": {
                    "$ref": "update.dto.appliance.configuration.SmtpServerDTO"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "support_verbosity_type": {
                    "enum": [
                        "NOTHING",
                        "BASIC",
                        "BASIC_COREDUMP"
                    ],
                    "type": "string"
                },
                "target_version": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "usage_stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "uuid": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "update.dto.appliance.configuration.ClusterDTO$HypervisorSecurityComplianceConfigDTO": {
            "id": "update.dto.appliance.configuration.ClusterDTO$HypervisorSecurityComplianceConfigDTO",
            "required": [],
            "properties": {}
        },
        "update.dto.appliance.configuration.ClusterDTO$IscsiConfig": {
            "id": "update.dto.appliance.configuration.ClusterDTO$IscsiConfig",
            "required": [],
            "properties": {}
        },
        "update.dto.appliance.configuration.ClusterDTO$PublicKeyDTO": {
            "id": "update.dto.appliance.configuration.ClusterDTO$PublicKeyDTO",
            "required": [],
            "properties": {
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "update.dto.appliance.configuration.ClusterDTO$SecurityComplianceConfigDTO": {
            "id": "update.dto.appliance.configuration.ClusterDTO$SecurityComplianceConfigDTO",
            "required": [],
            "properties": {
                "enable_s_n_m_pv3_only": {
                    "type": "boolean"
                }
            }
        },
        "update.dto.appliance.configuration.ClusterRedundancyStateDTO": {
            "id": "update.dto.appliance.configuration.ClusterRedundancyStateDTO",
            "required": [],
            "properties": {
                "current_redundancy_factor": {
                    "format": "int32",
                    "type": "integer"
                },
                "desired_redundancy_factor": {
                    "format": "int32",
                    "type": "integer"
                },
                "redundancy_status": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;"
                }
            }
        },
        "update.dto.appliance.configuration.HttpProxyDTO": {
            "id": "update.dto.appliance.configuration.HttpProxyDTO",
            "description": "http-proxy",
            "required": [
                "name",
                "address",
                "port"
            ],
            "properties": {
                "address": {
                    "description": "Address of the proxy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Proxy name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "password": {
                    "description": "Password for proxy authentication",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "port": {
                    "description": "Port on which proxy is binding",
                    "format": "int32",
                    "maximum": "65536",
                    "minimum": "0",
                    "notes": "Any port number which is in the range 0 - 65536",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "proxy_types": {
                    "description": "Proxy types to send applicable traffic",
                    "items": {
                        "enum": [
                            "HTTP",
                            "HTTPS",
                            "SOCKS"
                        ],
                        "type": "string"
                    },
                    "notes": "Proxy types to send applicable traffic. Supports 'http' 'https', and 'socks' proxy configuration.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "username": {
                    "description": "Username for proxy authentication",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.appliance.configuration.RackableUnitDTO": {
            "id": "update.dto.appliance.configuration.RackableUnitDTO",
            "required": [],
            "properties": {
                "id": {
                    "format": "int64",
                    "type": "integer"
                },
                "location": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "model_name": {
                    "type": "string"
                },
                "node_uuids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "nodes": {
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "type": "array"
                },
                "positions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rackable_unit_uuid": {
                    "type": "string"
                },
                "serial": {
                    "type": "string"
                }
            }
        },
        "update.dto.appliance.configuration.ServiceCenterDTO": {
            "id": "update.dto.appliance.configuration.ServiceCenterDTO",
            "required": [
                "name",
                "ip_address",
                "username",
                "port"
            ],
            "properties": {
                "ip_address": {
                    "description": "Ip Address.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "port": {
                    "description": "Port number.",
                    "format": "int32",
                    "maximum": "65536",
                    "minimum": "0",
                    "notes": "Any port number which is in the range 0 - 65536",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "username": {
                    "description": "username.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.appliance.configuration.SmtpServerDTO": {
            "id": "update.dto.appliance.configuration.SmtpServerDTO",
            "required": [],
            "properties": {
                "address": {
                    "type": "string"
                },
                "email_status": {
                    "$ref": "update.dto.base.CommunicationStatusDTO"
                },
                "from_email_address": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "format": "int32",
                    "type": "integer"
                },
                "secure_mode": {
                    "enum": [
                        "STARTTLS",
                        "SSL",
                        "NONE"
                    ],
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "update.dto.appliance.configuration.TimedBoolDTO": {
            "id": "update.dto.appliance.configuration.TimedBoolDTO",
            "required": [],
            "properties": {
                "duration": {
                    "description": "Time to keep enabled",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "update.dto.base.CommunicationStatusDTO": {
            "id": "update.dto.base.CommunicationStatusDTO",
            "required": [],
            "properties": {
                "last_changed_time_stamp_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_checked_time_stamp_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_successful_transmission_time_stamp_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "$ref": "update.dto.base.ParameterizedMessageDTO"
                },
                "status": {
                    "enum": [
                        "SUCCESS",
                        "FAILED",
                        "RETRYING",
                        "UNKNOWN"
                    ],
                    "type": "string"
                }
            }
        },
        "update.dto.base.ParameterizedMessageDTO": {
            "id": "update.dto.base.ParameterizedMessageDTO",
            "required": [],
            "properties": {
                "attributes": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "update.dto.dr.WitnessSiteDTO": {
            "id": "update.dto.dr.WitnessSiteDTO",
            "required": [
                "marked_for_removal",
                "uuid",
                "password"
            ],
            "properties": {
                "cluster_name": {
                    "type": "string"
                },
                "cluster_timestamp_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "ip_addresses": {
                    "description": "Unique identifier for the Metro Availability Witness Site, it can be either iqn or ip address",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "marked_for_removal": {
                    "description": "flag indicating whether the witness site is deleted or not",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "nos_full_version": {
                    "type": "string"
                },
                "nos_version": {
                    "type": "string"
                },
                "password": {
                    "description": "password used to communicate with Metro Availability Witness Site",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "username": {
                    "description": "username used to communicate with Metro Availability Witness Site",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "Unique identifier of the Metro Availability Witness Site",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "witness_name": {
                    "type": "string"
                }
            }
        },
        "update.dto.dr.WitnessSiteDTO$UpdateWitnessSiteDTO": {
            "id": "update.dto.dr.WitnessSiteDTO$UpdateWitnessSiteDTO",
            "required": [
                "uuid"
            ],
            "properties": {
                "password": {
                    "description": "password used to communicate with Metro Availability Witness Site",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "id of the Metro Availability Witness Site to updated",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.health.check.EntityTypeHealthCheckSummaryDTO": {
            "id": "update.dto.health.check.EntityTypeHealthCheckSummaryDTO",
            "required": [],
            "properties": {
                "checks_in_error": {
                    "$ref": "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckErrorsDTO&gt;"
                },
                "detailed_check_summary": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;"
                }
            }
        },
        "update.dto.health.check.HealthSummaryDTO": {
            "id": "update.dto.health.check.HealthSummaryDTO",
            "required": [],
            "properties": {
                "entity_type_summaries": {
                    "items": {
                        "$ref": "update.dto.health.check.EntityTypeHealthCheckSummaryDTO"
                    },
                    "type": "array"
                },
                "health_check_summaries": {
                    "$ref": "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckSummaryDTO&gt;"
                },
                "health_status": {
                    "enum": [
                        "Critical",
                        "Warning",
                        "Good",
                        "Unknown",
                        "Error"
                    ],
                    "type": "string"
                }
            }
        },
        "update.dto.multicluster.ClusterDataStateDTO": {
            "id": "update.dto.multicluster.ClusterDataStateDTO",
            "required": [],
            "properties": {
                "cluster_available": {
                    "type": "boolean"
                },
                "cluster_data_available": {
                    "type": "boolean"
                },
                "cluster_register_time_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "first_unavailable_time_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_alerts_data_transferred_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_arithmos_data_transferred_usecs": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "update.dto.uhura.ManagementServerInfoDTO": {
            "id": "update.dto.uhura.ManagementServerInfoDTO",
            "required": [],
            "properties": {
                "management_server_type": {
                    "enum": [
                        "VCENTER"
                    ],
                    "type": "string"
                }
            }
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/PrismGateway/services/rest/v2.0",
    "resourcePath": "/clusters",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/clusters/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of clusters.",
                    "notes": "Get the list of clusters.",
                    "type": "get.base.EntityCollection&lt;get.dto.appliance.configuration.ClusterDTO&gt;",
                    "nickname": "getClusters",
                    "parameters": [
                        {
                            "name": "count",
                            "description": "Number of Clusters to retrieve",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "filter_criteria",
                            "description": "Filter criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "sort_criteria",
                            "description": "Sort criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "search_string",
                            "description": "Search string",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "search_attribute_list",
                            "description": "Search attribute list",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "projection",
                            "description": "Projections on the attributes",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/clusters/alerts",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of alerts generated on any Cluster.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getClusterAlerts",
                    "parameters": [
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of alerts",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "resolved",
                            "description": "Alerts which have been resolved",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Alerts which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "severity",
                            "description": "Alert severities",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "alert_type_uuid",
                            "description": "Alert type ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/clusters/events",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of events generated on any Cluster.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getClusterEvents",
                    "parameters": [
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of events",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Events which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/clusters/{id}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get a Cluster.",
                    "notes": "Get a Cluster with the specified id.",
                    "type": "get.dto.appliance.configuration.ClusterDTO",
                    "nickname": "getCluster",
                    "parameters": [
                        {
                            "name": "id",
                            "description": "Id of the cluster",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "projection",
                            "description": "Projections on the attributes",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/clusters/{id}/alerts",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of alerts generated on a specified Cluster.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getAlertsForCluster",
                    "parameters": [
                        {
                            "name": "id",
                            "description": "Id of a Cluster",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of alerts",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "resolved",
                            "description": "Alerts which have been resolved",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Alerts which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "severity",
                            "description": "Alert severities",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "alert_type_uuid",
                            "description": "Alert type ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/clusters/{id}/events",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of events generated on a specified Cluster.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getEventsForClusters",
                    "parameters": [
                        {
                            "name": "id",
                            "description": "Id of a Cluster",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of events",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Events which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/clusters/{id}/stats/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the stats for a specified Cluster.",
                    "notes": "If start time and end time are included in the query string, then historical stats are retrieved. Otherwise, the latest stats are retrieved.",
                    "type": "get.base.StatsResponse",
                    "nickname": "getStatsForCluster",
                    "parameters": [
                        {
                            "name": "id",
                            "description": "Id of a Cluster",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "metrics",
                            "description": "List of metrics",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "interval_in_secs",
                            "description": "Sampling interval of stats",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.ResultContentDescriptor"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.appliance.configuration.ClusterDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.appliance.configuration.ClusterDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.appliance.configuration.ClusterDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.base.StatsResponse": {
            "id": "get.base.StatsResponse",
            "required": [],
            "properties": {
                "stats_specific_responses": {
                    "items": {
                        "$ref": "get.base.StatsResponse$StatsSpecificResponse"
                    },
                    "type": "array"
                }
            }
        },
        "get.base.StatsResponse$StatsSpecificResponse": {
            "id": "get.base.StatsResponse$StatsSpecificResponse",
            "required": [],
            "properties": {
                "interval_in_secs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "metric": {
                    "type": "string"
                },
                "start_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "successful": {
                    "type": "boolean"
                },
                "values": {
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.EntityMetadata": {
            "id": "get.dto.EntityMetadata",
            "required": [],
            "properties": {
                "additional_fields": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "context_hint_field": {
                    "type": "string"
                },
                "context_hint_value": {
                    "type": "string"
                },
                "entity_id": {
                    "type": "string"
                },
                "entity_name": {
                    "type": "string"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                }
            }
        },
        "get.dto.ResultContentDescriptor": {
            "id": "get.dto.ResultContentDescriptor",
            "required": [],
            "properties": {
                "metadata": {
                    "$ref": "get.dto.ResultMetadata"
                },
                "perspectives": {
                    "items": {
                        "$ref": "get.dto.ResultContentDescriptor$Perspective"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.ResultContentDescriptor$Perspective": {
            "id": "get.dto.ResultContentDescriptor$Perspective",
            "required": [],
            "properties": {
                "format": {
                    "enum": [
                        "TABLE",
                        "BAR_CHART",
                        "PIE_CHART",
                        "TIME_SERIES",
                        "KEY_VALUE",
                        "COUNT",
                        "HEALTH_SUMMARY",
                        "ALERT_INFO",
                        "CAPACITY",
                        "OTHER"
                    ],
                    "type": "string"
                },
                "metadata": {
                    "$ref": "get.dto.ResultMetadata"
                },
                "query": {},
                "result": {},
                "type": {
                    "type": "string"
                }
            }
        },
        "get.dto.ResultMetadata": {
            "id": "get.dto.ResultMetadata",
            "required": [],
            "properties": {
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filters": {
                    "items": {
                        "$ref": "get.dto.ResultMetadata$Filter"
                    },
                    "type": "array"
                },
                "instances": {
                    "items": {
                        "$ref": "get.dto.EntityMetadata"
                    },
                    "type": "array"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "get.dto.ResultMetadata$Filter": {
            "id": "get.dto.ResultMetadata$Filter",
            "required": [],
            "properties": {
                "display_for_rhs": {
                    "type": "string"
                },
                "lhs": {
                    "type": "string"
                },
                "operator": {
                    "description": "Operator for the filter.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "rhs": {
                    "type": "string"
                }
            }
        },
        "get.dto.alerts.AlertCauseDTO": {
            "id": "get.dto.alerts.AlertCauseDTO",
            "required": [],
            "properties": {
                "actions": {
                    "description": "Possible actions to resolve this alert",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "additional_links": {
                    "description": "Additional links",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "alert_namespace": {
                    "description": "Namespace this alert belongs to",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "cause": {
                    "description": "Detailed description",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "chart_queries": {
                    "$ref": "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;",
                    "description": "Charts that are relevant to this cause",
                    "typeName": "DEFAULT"
                },
                "details": {
                    "description": "Symptoms for this cause",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "has_global_details": {
                    "description": "Whether the alert has global details or not",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "id": {
                    "description": "Cause Id",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "num_resolved_count": {
                    "description": "Number of times this cause has resolved the alert",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "parent_cause_id": {
                    "description": "Id of the alert/cause this is a possible cause for",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "title": {
                    "description": "Short description",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "troubleshooting_steps": {
                    "description": "Steps to determine whether this is the cause.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO": {
            "id": "get.dto.alerts.AlertDTO",
            "required": [],
            "properties": {
                "acknowledged": {
                    "type": "boolean"
                },
                "acknowledged_by_username": {
                    "type": "string"
                },
                "acknowledged_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "affected_entities": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$AffectedEntity"
                    },
                    "type": "array"
                },
                "alert_details": {
                    "$ref": "get.dto.alerts.AlertDTO$AlertDetailsDTO"
                },
                "alert_title": {
                    "type": "string"
                },
                "alert_type_uuid": {
                    "type": "string"
                },
                "auto_resolved": {
                    "type": "boolean"
                },
                "check_id": {
                    "type": "string"
                },
                "classifications": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "context_types": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "context_values": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "created_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "detailed_message": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "impact_types": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "last_occurrence_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "node_uuid": {
                    "type": "string"
                },
                "originating_cluster_uuid": {
                    "type": "string"
                },
                "possible_causes": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertCauseDTO"
                    },
                    "type": "array"
                },
                "resolved": {
                    "type": "boolean"
                },
                "resolved_by_username": {
                    "type": "string"
                },
                "resolved_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "service_v_m_id": {
                    "type": "string"
                },
                "severity": {
                    "description": "This field describes the severity of the alert.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "user_defined": {
                    "type": "boolean"
                }
            }
        },
        "get.dto.alerts.AlertDTO$AffectedEntity": {
            "id": "get.dto.alerts.AlertDTO$AffectedEntity",
            "required": [],
            "properties": {
                "entity_name": {
                    "type": "string"
                },
                "entity_type": {
                    "type": "string"
                },
                "entity_type_display_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "get.dto.alerts.AlertDTO$AlertDetailsDTO": {
            "id": "get.dto.alerts.AlertDTO$AlertDetailsDTO",
            "required": [],
            "properties": {
                "metric_details": {
                    "description": "List of metric details associated with the alert",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$MetricDetails"
                    },
                    "notes": "List of metric details associated with the alert",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "severity_trails": {
                    "description": "List that contains severity level change details",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$SeverityTrail"
                    },
                    "notes": "List that contains severity level change details",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$MetricDetails": {
            "id": "get.dto.alerts.AlertDTO$MetricDetails",
            "required": [],
            "properties": {
                "comparison_operator": {
                    "description": "Comparison Operator to be applied for teh values.",
                    "notes": "Comparison Operator",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "condition_type": {
                    "description": "Condition Type that the current metric is associated with.",
                    "enum": [
                        "STATIC_THRESHOLD",
                        "ANOMALY",
                        "SAFETY_ZONE"
                    ],
                    "notes": "Condition Type that the current metric is associated with.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "data_type": {
                    "description": "Data Type of the value.",
                    "enum": [
                        "LONG",
                        "DOUBLE",
                        "BOOLEAN",
                        "STRING"
                    ],
                    "notes": "Data Type of the value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entity_id": {
                    "description": "UUID of the entity",
                    "notes": "UUID of the entity",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entity_type": {
                    "description": "Entity Type",
                    "notes": "Entity Type",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_display_name": {
                    "description": "Display name of the metric",
                    "notes": "Display name of the metric",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_name": {
                    "description": "Name of the metric",
                    "notes": "Name of the metric",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_value_details": {
                    "description": "List of metric values at different instances of time in the alert lifecycle",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$MetricValueDetails"
                    },
                    "notes": "List of metric values at different instances of time in the alert lifecycle",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "unit": {
                    "description": "Unit of the metric value.",
                    "notes": "Unit of the metric value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$MetricValueDetails": {
            "id": "get.dto.alerts.AlertDTO$MetricValueDetails",
            "required": [],
            "properties": {
                "metric_threshold_value": {
                    "description": "Threshold value of the metric that was specified in the policy at that given time.",
                    "notes": "Threshold value of the metric that was specified in the policy at that given time.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_value": {
                    "description": "Actual value of the metric at that given time.",
                    "notes": "Actual value of the metric at that given time.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "state_change_time_stamp_in_usecs": {
                    "description": "Time at which the alert's state change occurred.",
                    "format": "int64",
                    "notes": "Time at which the alert's state change occurred.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$SeverityTrail": {
            "id": "get.dto.alerts.AlertDTO$SeverityTrail",
            "required": [],
            "properties": {
                "severity": {
                    "description": "Severity level of the alert. Can be INFO, WARNING or CRITICAL",
                    "notes": "Severity level of the alert. Can be INFO, WARNING or CRITICAL",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "severity_change_timestamp_in_usecs": {
                    "description": "Time at which the severity level change occurred",
                    "format": "int64",
                    "notes": "Time at which the severity level change occurred",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertSummaryDTO": {
            "id": "get.dto.alerts.AlertSummaryDTO",
            "required": [],
            "properties": {
                "alert_summaries": {
                    "$ref": "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;"
                },
                "count": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "get.dto.appliance.configuration.ClusterDTO": {
            "id": "get.dto.appliance.configuration.ClusterDTO",
            "required": [],
            "properties": {
                "alert_summary": {
                    "$ref": "get.dto.alerts.AlertSummaryDTO"
                },
                "all_hyperv_nodes_in_failover_cluster": {
                    "description": "If the cluster includes Hyper-V nodes, then this property indicates whether all the Hyper-V nodes in the NOS cluster (that are not marked for removal)are a part of a Hyper-V failover cluster",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "block_serials": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "cloudcluster": {
                    "type": "boolean"
                },
                "cluster_arch": {
                    "type": "string"
                },
                "cluster_data_state": {
                    "$ref": "get.dto.multicluster.ClusterDataStateDTO"
                },
                "cluster_external_data_services_i_p_address": {
                    "type": "string"
                },
                "cluster_external_i_p_address": {
                    "type": "string"
                },
                "cluster_functions": {
                    "description": "This field describes the type of cluster",
                    "items": {
                        "enum": [
                            "NDFS",
                            "MULTICLUSTER",
                            "CLOUDDATAGATEWAY",
                            "MINERVA",
                            "SINGLE_NODE",
                            "TWO_NODE"
                        ],
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT",
                    "uniqueItems": "true"
                },
                "cluster_gpus": {
                    "description": "Gpus present on the cluster",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "cluster_incarnation_id": {
                    "format": "int64",
                    "type": "integer"
                },
                "cluster_redundancy_state": {
                    "$ref": "get.dto.appliance.configuration.ClusterRedundancyStateDTO"
                },
                "cluster_uuid": {
                    "description": " Uuid of the cluster this entity belongs to",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "common_criteria_mode": {
                    "type": "boolean"
                },
                "credential": {
                    "$ref": "get.dto.hyperv.CredentialDTO",
                    "description": "If the cluster includes Hyper-V nodes, then this propertyindicates the credential for the account that has permissions to modify the domain account representing the NOS cluster",
                    "typeName": "DEFAULT"
                },
                "disable_degraded_node_monitoring": {
                    "type": "boolean"
                },
                "domain": {
                    "description": "If the cluster includes Hyper-V nodes, then this property indicates the AD domain name that this cluster is a part of",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "enable_lock_down": {
                    "type": "boolean"
                },
                "enable_on_disk_dedup": {
                    "type": "boolean"
                },
                "enable_password_remote_login_to_cluster": {
                    "type": "boolean"
                },
                "enable_shadow_clones": {
                    "type": "boolean"
                },
                "enforce_rackable_unit_aware_placement": {
                    "description": "Indicates whether RackableUnit (RU) aware placement has been enforced.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "external_subnet": {
                    "type": "string"
                },
                "fingerprint_content_cache_percentage": {
                    "format": "int32",
                    "type": "integer"
                },
                "full_version": {
                    "type": "string"
                },
                "global_nfs_white_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "gpu_driver_version": {
                    "description": "Host driver version of the GPU",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "has_self_encrypting_drive": {
                    "type": "boolean"
                },
                "health_summary": {
                    "$ref": "get.dto.health.check.HealthSummaryDTO"
                },
                "http_proxies": {
                    "items": {
                        "$ref": "get.dto.appliance.configuration.HttpProxyDTO"
                    },
                    "type": "array"
                },
                "hypervisor_security_compliance_config": {
                    "$ref": "get.dto.appliance.configuration.ClusterDTO$HypervisorSecurityComplianceConfigDTO"
                },
                "hypervisor_types": {
                    "items": {
                        "enum": [
                            "kVMware",
                            "kXen",
                            "kHyperv",
                            "kKvm",
                            "kAmazonWebServices",
                            "kVCenter",
                            "kAcropolis",
                            "kSCVMM",
                            "kNull"
                        ],
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": "true"
                },
                "id": {
                    "type": "string"
                },
                "internal_subnet": {
                    "type": "string"
                },
                "is_upgrade_in_progress": {
                    "type": "boolean"
                },
                "iscsi_config": {
                    "$ref": "get.dto.appliance.configuration.ClusterDTO$IscsiConfig",
                    "description": "Cluster wide iscsi configuration",
                    "typeName": "DEFAULT"
                },
                "management_servers": {
                    "items": {
                        "$ref": "get.dto.uhura.ManagementServerInfoDTO"
                    },
                    "type": "array"
                },
                "multicluster": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "name_servers": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "ncc_version": {
                    "type": "string"
                },
                "nos_cluster_and_hosts_domain_joined": {
                    "description": "If the cluster includes Hyper-V nodes, then this property indicates whether the NOS cluster and the constituent hosts are all joined to the same domain",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "ntp_servers": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "num_nodes": {
                    "format": "int64",
                    "type": "integer"
                },
                "operation_mode": {
                    "enum": [
                        "NORMAL",
                        "OVERRIDE",
                        "READONLY",
                        "STANDALONE",
                        "SWITCH_TO_TWO_NODE"
                    ],
                    "type": "string"
                },
                "public_keys": {
                    "items": {
                        "$ref": "get.dto.appliance.configuration.ClusterDTO$PublicKeyDTO"
                    },
                    "type": "array"
                },
                "rackable_units": {
                    "items": {
                        "$ref": "get.dto.appliance.configuration.RackableUnitDTO"
                    },
                    "type": "array"
                },
                "security_compliance_config": {
                    "$ref": "get.dto.appliance.configuration.ClusterDTO$SecurityComplianceConfigDTO"
                },
                "service_centers": {
                    "items": {
                        "$ref": "get.dto.appliance.configuration.ServiceCenterDTO"
                    },
                    "type": "array"
                },
                "smtp_server": {
                    "$ref": "get.dto.appliance.configuration.SmtpServerDTO"
                },
                "ssd_pinning_percentage_limit": {
                    "description": "This field describes the allowable percentage pinning on the ssd",
                    "format": "int32",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "storage_type": {
                    "description": "This field describes the storage type of cluster",
                    "enum": [
                        "ALL_FLASH",
                        "MIXED",
                        "ALL_HDD"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "support_verbosity_type": {
                    "enum": [
                        "NOTHING",
                        "BASIC",
                        "BASIC_COREDUMP"
                    ],
                    "type": "string"
                },
                "target_version": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "usage_stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "uuid": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "get.dto.appliance.configuration.ClusterDTO$HypervisorSecurityComplianceConfigDTO": {
            "id": "get.dto.appliance.configuration.ClusterDTO$HypervisorSecurityComplianceConfigDTO",
            "required": [],
            "properties": {}
        },
        "get.dto.appliance.configuration.ClusterDTO$IscsiConfig": {
            "id": "get.dto.appliance.configuration.ClusterDTO$IscsiConfig",
            "required": [],
            "properties": {
                "external_client_enabled": {
                    "description": "Indicates whether external iscsi initiators are enabled or not",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.appliance.configuration.ClusterDTO$PublicKeyDTO": {
            "id": "get.dto.appliance.configuration.ClusterDTO$PublicKeyDTO",
            "required": [],
            "properties": {
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "get.dto.appliance.configuration.ClusterDTO$SecurityComplianceConfigDTO": {
            "id": "get.dto.appliance.configuration.ClusterDTO$SecurityComplianceConfigDTO",
            "required": [],
            "properties": {
                "enable_s_n_m_pv3_only": {
                    "type": "boolean"
                }
            }
        },
        "get.dto.appliance.configuration.ClusterRedundancyStateDTO": {
            "id": "get.dto.appliance.configuration.ClusterRedundancyStateDTO",
            "required": [],
            "properties": {
                "current_redundancy_factor": {
                    "format": "int32",
                    "type": "integer"
                },
                "desired_redundancy_factor": {
                    "format": "int32",
                    "type": "integer"
                },
                "redundancy_status": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;"
                }
            }
        },
        "get.dto.appliance.configuration.HttpProxyDTO": {
            "id": "get.dto.appliance.configuration.HttpProxyDTO",
            "description": "http-proxy",
            "required": [],
            "properties": {
                "address": {
                    "description": "Address of the proxy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Proxy name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "password": {
                    "description": "Password for proxy authentication",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "port": {
                    "description": "Port on which proxy is binding",
                    "format": "int32",
                    "maximum": "65536",
                    "minimum": "0",
                    "notes": "Any port number which is in the range 0 - 65536",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "proxy_types": {
                    "description": "Proxy types to send applicable traffic",
                    "items": {
                        "enum": [
                            "HTTP",
                            "HTTPS",
                            "SOCKS"
                        ],
                        "type": "string"
                    },
                    "notes": "Proxy types to send applicable traffic. Supports 'http' 'https', and 'socks' proxy configuration.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "username": {
                    "description": "Username for proxy authentication",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.appliance.configuration.RackableUnitDTO": {
            "id": "get.dto.appliance.configuration.RackableUnitDTO",
            "required": [],
            "properties": {
                "id": {
                    "format": "int64",
                    "type": "integer"
                },
                "location": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "model_name": {
                    "type": "string"
                },
                "node_uuids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "nodes": {
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "type": "array"
                },
                "positions": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "rackable_unit_uuid": {
                    "type": "string"
                },
                "serial": {
                    "type": "string"
                }
            }
        },
        "get.dto.appliance.configuration.ServiceCenterDTO": {
            "id": "get.dto.appliance.configuration.ServiceCenterDTO",
            "required": [],
            "properties": {
                "ip_address": {
                    "description": "Ip Address.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "port": {
                    "description": "Port number.",
                    "format": "int32",
                    "maximum": "65536",
                    "minimum": "0",
                    "notes": "Any port number which is in the range 0 - 65536",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "username": {
                    "description": "username.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.appliance.configuration.SmtpServerDTO": {
            "id": "get.dto.appliance.configuration.SmtpServerDTO",
            "required": [],
            "properties": {
                "address": {
                    "type": "string"
                },
                "email_status": {
                    "$ref": "get.dto.base.CommunicationStatusDTO"
                },
                "from_email_address": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "format": "int32",
                    "type": "integer"
                },
                "secure_mode": {
                    "enum": [
                        "STARTTLS",
                        "SSL",
                        "NONE"
                    ],
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "get.dto.base.CommunicationStatusDTO": {
            "id": "get.dto.base.CommunicationStatusDTO",
            "required": [],
            "properties": {
                "last_changed_time_stamp_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_checked_time_stamp_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_successful_transmission_time_stamp_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "$ref": "get.dto.base.ParameterizedMessageDTO"
                },
                "status": {
                    "enum": [
                        "SUCCESS",
                        "FAILED",
                        "RETRYING",
                        "UNKNOWN"
                    ],
                    "type": "string"
                }
            }
        },
        "get.dto.base.ParameterizedMessageDTO": {
            "id": "get.dto.base.ParameterizedMessageDTO",
            "required": [],
            "properties": {
                "attributes": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.dto.health.check.EntityTypeHealthCheckSummaryDTO": {
            "id": "get.dto.health.check.EntityTypeHealthCheckSummaryDTO",
            "required": [],
            "properties": {
                "checks_in_error": {
                    "$ref": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;"
                },
                "detailed_check_summary": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;"
                }
            }
        },
        "get.dto.health.check.HealthSummaryDTO": {
            "id": "get.dto.health.check.HealthSummaryDTO",
            "required": [],
            "properties": {
                "entity_type_summaries": {
                    "items": {
                        "$ref": "get.dto.health.check.EntityTypeHealthCheckSummaryDTO"
                    },
                    "type": "array"
                },
                "health_check_summaries": {
                    "$ref": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;"
                },
                "health_status": {
                    "enum": [
                        "Critical",
                        "Warning",
                        "Good",
                        "Unknown",
                        "Error"
                    ],
                    "type": "string"
                }
            }
        },
        "get.dto.hyperv.CredentialDTO": {
            "id": "get.dto.hyperv.CredentialDTO",
            "required": [],
            "properties": {
                "logon_name": {
                    "description": "Logon name of the account",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "password": {
                    "description": "Password of the account",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.multicluster.ClusterDataStateDTO": {
            "id": "get.dto.multicluster.ClusterDataStateDTO",
            "required": [],
            "properties": {
                "cluster_available": {
                    "type": "boolean"
                },
                "cluster_data_available": {
                    "type": "boolean"
                },
                "cluster_register_time_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "first_unavailable_time_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_alerts_data_transferred_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_arithmos_data_transferred_usecs": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "get.dto.uhura.ManagementServerInfoDTO": {
            "id": "get.dto.uhura.ManagementServerInfoDTO",
            "required": [],
            "properties": {
                "drs_enabled": {
                    "description": "Denotes if DRS is enabled or not. Applicable only for vCenter.",
                    "notes": "Denotes if DRS is enabled or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "drs_vm_behaviour": {
                    "description": "Denotes if DRS is enabled or not. Applicable only for vCenter.",
                    "enum": [
                        "UNKNOWN",
                        "FULL_ENABLED",
                        "ONLY_PLACEMENT_ENABLED",
                        "MANUAL"
                    ],
                    "notes": "Denotes if DRS is enabled or not.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "ha_enabled": {
                    "description": "Denotes if HA is enabled or not.",
                    "notes": "Denotes if HA is enabled or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "in_use": {
                    "description": "Indicates whether any host is managed by this server or not.",
                    "notes": "Indicates whether any host is managed by this server or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "ip_address": {
                    "description": "Address of the management server.",
                    "notes": "Address of the management server.",
                    "type": "string",
                    "typeName": "IP4_ADDRESS"
                },
                "management_server_type": {
                    "enum": [
                        "VCENTER"
                    ],
                    "type": "string"
                },
                "registered": {
                    "description": "Denotes whether the server is registered with Nutanix or not",
                    "notes": "Denotes whether the server is registered with Nutanix or not",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                }
            }
        },
        "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;": {
            "id": "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.lang.String&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.lang.String&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;",
            "required": [],
            "properties": {}
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/PrismGateway/services/rest/v2.0",
    "resourcePath": "/data_at_rest_encryption",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/data_at_rest_encryption/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get encryption status.",
                    "notes": "Get encryption status of the cluster.",
                    "type": "get.dto.encryption.ClusterEncryptionStatusDTO",
                    "nickname": "getEncryptionStatus",
                    "parameters": [],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/data_at_rest_encryption/enable",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Enable encryption.",
                    "notes": "Enable encryption on the cluster.",
                    "type": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "enableEncryption",
                    "parameters": [
                        {
                            "description": "Desired cluster protection status",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.encryption.EnableEncryptionDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/data_at_rest_encryption/recent_certificate_test_results",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get recent certificate test results.",
                    "notes": "Get recent certificate test results.",
                    "type": "array",
                    "items": {
                        "$ref": "get.dto.encryption.KMSTestResultsDTO"
                    },
                    "nickname": "getRecentCertificateTestResults",
                    "parameters": [
                        {
                            "name": "host_uuids",
                            "description": "List of Host uuids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "kms_server_names",
                            "description": "List of Key Management Server names",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/data_at_rest_encryption/rekey",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Sets new passwords for encryption capable disks.",
                    "notes": "Sets new passwords for encryption capable disks",
                    "type": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "rekey",
                    "parameters": [
                        {
                            "description": "List of disk uuids on which rekey needs to be performed",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/data_at_rest_encryption/test",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Test encryption configuration.",
                    "notes": "Test encryption configuration of the cluster.",
                    "type": "create.dto.encryption.TestEncryptionConfigurationResponseDTO",
                    "nickname": "testEncryptionConfiguration",
                    "parameters": [
                        {
                            "description": "List of host ids and key management server names on which test to be performed",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.encryption.TestEncryptionConfigurationRequestDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "create.dto.encryption.EnableEncryptionDTO": {
            "id": "create.dto.encryption.EnableEncryptionDTO",
            "required": [],
            "properties": {
                "software_encryption_scope": {
                    "enum": [
                        "CLUSTER",
                        "STORAGE_CONTAINER"
                    ],
                    "type": "string"
                },
                "value": {
                    "type": "boolean"
                }
            }
        },
        "create.dto.encryption.TestEncryptionConfigurationRequestDTO": {
            "id": "create.dto.encryption.TestEncryptionConfigurationRequestDTO",
            "required": [],
            "properties": {
                "node_id_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "node_uuid_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "server_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            }
        },
        "create.dto.encryption.TestEncryptionConfigurationResponseDTO": {
            "id": "create.dto.encryption.TestEncryptionConfigurationResponseDTO",
            "required": [],
            "properties": {
                "has_failures": {
                    "type": "boolean"
                }
            }
        },
        "get.dto.encryption.ClusterEncryptionStatusDTO": {
            "id": "get.dto.encryption.ClusterEncryptionStatusDTO",
            "required": [],
            "properties": {
                "desired_password_protection": {
                    "type": "boolean"
                },
                "disk_encryption_status": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;",
                    "description": "The disk encryption status",
                    "typeName": "DEFAULT"
                },
                "is_cluster_empty": {
                    "type": "boolean"
                },
                "is_ready_for_password_protection": {
                    "type": "boolean"
                },
                "is_ready_for_software_encryption": {
                    "type": "boolean"
                },
                "software_encryption_scope": {
                    "enum": [
                        "CLUSTER",
                        "STORAGE_CONTAINER"
                    ],
                    "type": "string"
                },
                "storage_container_encryption_status": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;"
                }
            }
        },
        "get.dto.encryption.KMSStatusPerIpAddressDTO": {
            "id": "get.dto.encryption.KMSStatusPerIpAddressDTO",
            "required": [],
            "properties": {
                "ip_address": {
                    "description": "Ip address of the Key Management Server.",
                    "notes": "Ip address of the Key Management Server.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "message": {
                    "description": "Message",
                    "notes": "Message.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "port": {
                    "description": "Port of the Key Management Server.",
                    "format": "int64",
                    "notes": "Port of the Key Management Server.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "test_status": {
                    "description": "Test status.",
                    "notes": "Test status.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.encryption.KMSTestResultsDTO": {
            "id": "get.dto.encryption.KMSTestResultsDTO",
            "required": [],
            "properties": {
                "key_management_server_name": {
                    "description": "Name of the Key Management Server.",
                    "notes": "Name of the Key Management Server.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "key_management_server_uuid": {
                    "description": "Uuid of the Key Management Server.",
                    "notes": "Uuid of the Key Management Server.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "node_id": {
                    "description": "Service VM uuid of the node.",
                    "notes": "Service VM uuid of the node.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "node_uuid": {
                    "type": "string"
                },
                "result_list": {
                    "description": "List of test results, per ip address.",
                    "items": {
                        "$ref": "get.dto.encryption.KMSStatusPerIpAddressDTO"
                    },
                    "notes": "List of test results, per ip address.",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;",
            "required": [],
            "properties": {}
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/PrismGateway/services/rest/v2.0",
    "resourcePath": "/data_at_rest_encryption_certificates",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/data_at_rest_encryption_certificates/ca_certificates/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get all CA certificates.",
                    "notes": "Get all CA Certificates from cluster.",
                    "type": "array",
                    "items": {
                        "$ref": "get.dto.appliance.configuration.CertificateAuthorityDTO"
                    },
                    "nickname": "getCACertificates",
                    "parameters": [],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Add trusted CA certificate.",
                    "notes": "Add trusted CA certificate to the cluster.",
                    "type": "create.dto.appliance.configuration.CertificateAuthorityDTO",
                    "nickname": "addCACertificate",
                    "parameters": [
                        {
                            "description": "Certificate file",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "org.apache.cxf.jaxrs.ext.multipart.Attachment"
                        },
                        {
                            "name": "name",
                            "description": "name",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/data_at_rest_encryption_certificates/ca_certificates/{name}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete Certificate Authority.",
                    "notes": "Delete a CA certificate from cluster.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "deleteCACertificate",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Certificate Authority name",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/data_at_rest_encryption_certificates/certification_information",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Update the Certification information.",
                    "notes": "Update the Certification information.",
                    "type": "update.dto.appliance.configuration.CertificationInformationDTO",
                    "nickname": "updateCertificationInformation",
                    "parameters": [
                        {
                            "description": "CertificationInformation instance",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.appliance.configuration.CertificationInformationDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/data_at_rest_encryption_certificates/certification_information/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get Certification information.",
                    "notes": "Get Certification Signing information.",
                    "type": "get.dto.appliance.configuration.CertificationInformationDTO",
                    "nickname": "getCertificationInformation",
                    "parameters": [],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/data_at_rest_encryption_certificates/csr_for_discovered_node",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Download CSR files",
                    "notes": "Download CSR files from cluster",
                    "type": "DataHandler",
                    "nickname": "downloadCSRFromDiscoveredNode",
                    "parameters": [
                        {
                            "name": "node_ip",
                            "description": "node ip address",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/data_at_rest_encryption_certificates/csrs",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Download CSR files",
                    "notes": "Download CSR files from cluster",
                    "type": "javax.ws.rs.core.Response",
                    "nickname": "downloadCSRs",
                    "parameters": [
                        {
                            "name": "node_uuid_list",
                            "description": "List of node ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/data_at_rest_encryption_certificates/svm_certificate/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete certificate.",
                    "notes": "Delete a svm certificate from cluster.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "deleteCertificate",
                    "parameters": [
                        {
                            "name": "node_uuid",
                            "description": "Id of the node on which certificate is installed",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "server_name",
                            "description": "Key management Server name for which certificate is installed",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/data_at_rest_encryption_certificates/svm_certificates/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Add certificates.",
                    "notes": "Add certificates to the cluster.",
                    "type": "create.dto.PrimitiveDTO&lt;java.lang.String&gt;",
                    "nickname": "uploadCertificates",
                    "parameters": [
                        {
                            "description": "Certificate file",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "org.apache.cxf.jaxrs.ext.multipart.Attachment"
                        },
                        {
                            "name": "key_management_server_name",
                            "description": "Key Management Server name",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/data_at_rest_encryption_certificates/svm_certificates/multi_file",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Add certificates.",
                    "notes": "Add certificates to the cluster via multi-file upload.",
                    "type": "create.dto.PrimitiveDTO&lt;java.lang.String&gt;",
                    "nickname": "uploadCertificatesViaMultiFile",
                    "parameters": [
                        {
                            "description": "Certificate list",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.appliance.configuration.MultiFileCertificateUploadDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/data_at_rest_encryption_certificates/svm_certificates/replace",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Replace expired svm certificate.",
                    "notes": "Replace svm certificate on the cluster.",
                    "type": "create.dto.PrimitiveDTO&lt;java.lang.String&gt;",
                    "nickname": "replaceExpiredCertificate",
                    "parameters": [
                        {
                            "description": "Certificate file",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "org.apache.cxf.jaxrs.ext.multipart.Attachment"
                        },
                        {
                            "name": "key_management_server_name",
                            "description": "Key Management Server name",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "node_uuid",
                            "description": "ServiceVmId of the node",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "create.dto.PrimitiveDTO&lt;java.lang.String&gt;": {
            "id": "create.dto.PrimitiveDTO&lt;java.lang.String&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "create.dto.appliance.configuration.CertificateAuthorityDTO": {
            "id": "create.dto.appliance.configuration.CertificateAuthorityDTO",
            "required": [],
            "properties": {
                "certificate": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "create.dto.appliance.configuration.MultiFileCertificateUploadDTO": {
            "id": "create.dto.appliance.configuration.MultiFileCertificateUploadDTO",
            "required": [],
            "properties": {
                "certificate_map": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "key_management_server_name": {
                    "type": "string"
                }
            }
        },
        "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "get.dto.appliance.configuration.CertificateAuthorityDTO": {
            "id": "get.dto.appliance.configuration.CertificateAuthorityDTO",
            "required": [],
            "properties": {
                "certificate": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "get.dto.appliance.configuration.CertificationInformationDTO": {
            "id": "get.dto.appliance.configuration.CertificationInformationDTO",
            "required": [],
            "properties": {
                "city": {
                    "type": "string"
                },
                "country_code": {
                    "type": "string"
                },
                "domain_name": {
                    "type": "string"
                },
                "email_address": {
                    "type": "string"
                },
                "organization_name": {
                    "type": "string"
                },
                "organizational_unit_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "java.lang.Object": {
            "id": "java.lang.Object",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.lang.String&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.lang.String&gt;",
            "required": [],
            "properties": {}
        },
        "javax.ws.rs.core.MultivaluedMap&lt;java.lang.String, java.lang.String&gt;": {
            "id": "javax.ws.rs.core.MultivaluedMap&lt;java.lang.String, java.lang.String&gt;",
            "required": [],
            "properties": {}
        },
        "javax.ws.rs.core.Response": {
            "id": "javax.ws.rs.core.Response",
            "required": [],
            "properties": {}
        },
        "javax.ws.rs.ext.Providers": {
            "id": "javax.ws.rs.ext.Providers",
            "required": [],
            "properties": {}
        },
        "org.apache.cxf.jaxrs.ext.multipart.Attachment": {
            "id": "org.apache.cxf.jaxrs.ext.multipart.Attachment",
            "required": [],
            "properties": {
                "handler": {
                    "type": "DataHandler"
                },
                "headers": {
                    "$ref": "javax.ws.rs.core.MultivaluedMap&lt;java.lang.String, java.lang.String&gt;"
                },
                "object": {
                    "$ref": "java.lang.Object"
                },
                "providers": {
                    "$ref": "javax.ws.rs.ext.Providers"
                }
            }
        },
        "update.dto.appliance.configuration.CertificationInformationDTO": {
            "id": "update.dto.appliance.configuration.CertificationInformationDTO",
            "required": [],
            "properties": {
                "city": {
                    "type": "string"
                },
                "country_code": {
                    "type": "string"
                },
                "domain_name": {
                    "type": "string"
                },
                "email_address": {
                    "type": "string"
                },
                "organization_name": {
                    "type": "string"
                },
                "organizational_unit_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "state": {
                    "type": "string"
                }
            }
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/PrismGateway/services/rest/v2.0",
    "resourcePath": "/disks",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/disks/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of Disks.",
                    "notes": "Get the list of Disks configured in the cluster.",
                    "type": "get.base.EntityCollection&lt;get.dto.appliance.configuration.DiskDTO&gt;",
                    "nickname": "getDisks",
                    "parameters": [
                        {
                            "name": "count",
                            "description": "Number of Disks to retrieve",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "filter_criteria",
                            "description": "Filter criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "sort_criteria",
                            "description": "Sort criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "search_string",
                            "description": "Search string",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "search_attribute_list",
                            "description": "Search attribute list",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "projection",
                            "description": "Projections on the attributes",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/disks/alerts",
            "operations": [
                {
                    "deprecated": "true",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of alerts generated on any Disk.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getDiskAlerts",
                    "parameters": [
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of alerts",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "resolved",
                            "description": "Alerts which have been resolved",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Alerts which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "severity",
                            "description": "Alert severities",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "alert_type_uuid",
                            "description": "Alert type ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/disks/events",
            "operations": [
                {
                    "deprecated": "true",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of events generated on any Disk.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getDiskEvents",
                    "parameters": [
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of events",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Events which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/disks/{uuid}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Mark specified Disk for Removal.",
                    "notes": "Mark specified Disk for removal. Use 'force' option to ignore all the system validations.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "beginRemoveDisk",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of a Disk",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "force",
                            "description": "Force the operation",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "bypass_upgrade_check",
                            "description": "Skip upgrade check",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get a Disk.",
                    "notes": "Get a Disk with the specified id.",
                    "type": "get.dto.appliance.configuration.DiskDTO",
                    "nickname": "getDisk",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of the Disk",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "projection",
                            "description": "Projections on the attributes",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/disks/{uuid}/alerts",
            "operations": [
                {
                    "deprecated": "true",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of alerts generated on a specified Disk.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getAlertsForDisk",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of a Disk",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of alerts",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "resolved",
                            "description": "Alerts which have been resolved",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Alerts which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "severity",
                            "description": "Alert severities",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "alert_type_uuid",
                            "description": "Alert type ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/disks/{uuid}/events",
            "operations": [
                {
                    "deprecated": "true",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of events generated on a specified Disk.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getEventsForDisks",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of a Disk",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of events",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Events which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/disks/{uuid}/stats/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the stats for a specified Disk.",
                    "notes": "If start time and end time are included in the query string, then historical stats are retrieved. Otherwise, the latest stats are retrieved.",
                    "type": "get.base.StatsResponse",
                    "nickname": "getDiskStats",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of a Disk",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "metrics",
                            "description": "List of metrics",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "interval_in_secs",
                            "description": "Sampling interval of stats",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.ResultContentDescriptor"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.appliance.configuration.DiskDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.appliance.configuration.DiskDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.appliance.configuration.DiskDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.base.StatsResponse": {
            "id": "get.base.StatsResponse",
            "required": [],
            "properties": {
                "stats_specific_responses": {
                    "items": {
                        "$ref": "get.base.StatsResponse$StatsSpecificResponse"
                    },
                    "type": "array"
                }
            }
        },
        "get.base.StatsResponse$StatsSpecificResponse": {
            "id": "get.base.StatsResponse$StatsSpecificResponse",
            "required": [],
            "properties": {
                "interval_in_secs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "metric": {
                    "type": "string"
                },
                "start_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "successful": {
                    "type": "boolean"
                },
                "values": {
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.EntityMetadata": {
            "id": "get.dto.EntityMetadata",
            "required": [],
            "properties": {
                "additional_fields": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "context_hint_field": {
                    "type": "string"
                },
                "context_hint_value": {
                    "type": "string"
                },
                "entity_id": {
                    "type": "string"
                },
                "entity_name": {
                    "type": "string"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                }
            }
        },
        "get.dto.ResultContentDescriptor": {
            "id": "get.dto.ResultContentDescriptor",
            "required": [],
            "properties": {
                "metadata": {
                    "$ref": "get.dto.ResultMetadata"
                },
                "perspectives": {
                    "items": {
                        "$ref": "get.dto.ResultContentDescriptor$Perspective"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.ResultContentDescriptor$Perspective": {
            "id": "get.dto.ResultContentDescriptor$Perspective",
            "required": [],
            "properties": {
                "format": {
                    "enum": [
                        "TABLE",
                        "BAR_CHART",
                        "PIE_CHART",
                        "TIME_SERIES",
                        "KEY_VALUE",
                        "COUNT",
                        "HEALTH_SUMMARY",
                        "ALERT_INFO",
                        "CAPACITY",
                        "OTHER"
                    ],
                    "type": "string"
                },
                "metadata": {
                    "$ref": "get.dto.ResultMetadata"
                },
                "query": {},
                "result": {},
                "type": {
                    "type": "string"
                }
            }
        },
        "get.dto.ResultMetadata": {
            "id": "get.dto.ResultMetadata",
            "required": [],
            "properties": {
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filters": {
                    "items": {
                        "$ref": "get.dto.ResultMetadata$Filter"
                    },
                    "type": "array"
                },
                "instances": {
                    "items": {
                        "$ref": "get.dto.EntityMetadata"
                    },
                    "type": "array"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "get.dto.ResultMetadata$Filter": {
            "id": "get.dto.ResultMetadata$Filter",
            "required": [],
            "properties": {
                "display_for_rhs": {
                    "type": "string"
                },
                "lhs": {
                    "type": "string"
                },
                "operator": {
                    "description": "Operator for the filter.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "rhs": {
                    "type": "string"
                }
            }
        },
        "get.dto.alerts.AlertCauseDTO": {
            "id": "get.dto.alerts.AlertCauseDTO",
            "required": [],
            "properties": {
                "actions": {
                    "description": "Possible actions to resolve this alert",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "additional_links": {
                    "description": "Additional links",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "alert_namespace": {
                    "description": "Namespace this alert belongs to",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "cause": {
                    "description": "Detailed description",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "chart_queries": {
                    "$ref": "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;",
                    "description": "Charts that are relevant to this cause",
                    "typeName": "DEFAULT"
                },
                "details": {
                    "description": "Symptoms for this cause",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "has_global_details": {
                    "description": "Whether the alert has global details or not",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "id": {
                    "description": "Cause Id",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "num_resolved_count": {
                    "description": "Number of times this cause has resolved the alert",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "parent_cause_id": {
                    "description": "Id of the alert/cause this is a possible cause for",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "title": {
                    "description": "Short description",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "troubleshooting_steps": {
                    "description": "Steps to determine whether this is the cause.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO": {
            "id": "get.dto.alerts.AlertDTO",
            "required": [],
            "properties": {
                "acknowledged": {
                    "type": "boolean"
                },
                "acknowledged_by_username": {
                    "type": "string"
                },
                "acknowledged_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "affected_entities": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$AffectedEntity"
                    },
                    "type": "array"
                },
                "alert_details": {
                    "$ref": "get.dto.alerts.AlertDTO$AlertDetailsDTO"
                },
                "alert_title": {
                    "type": "string"
                },
                "alert_type_uuid": {
                    "type": "string"
                },
                "auto_resolved": {
                    "type": "boolean"
                },
                "check_id": {
                    "type": "string"
                },
                "classifications": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "context_types": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "context_values": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "created_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "detailed_message": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "impact_types": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "last_occurrence_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "node_uuid": {
                    "type": "string"
                },
                "originating_cluster_uuid": {
                    "type": "string"
                },
                "possible_causes": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertCauseDTO"
                    },
                    "type": "array"
                },
                "resolved": {
                    "type": "boolean"
                },
                "resolved_by_username": {
                    "type": "string"
                },
                "resolved_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "service_v_m_id": {
                    "type": "string"
                },
                "severity": {
                    "description": "This field describes the severity of the alert.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "user_defined": {
                    "type": "boolean"
                }
            }
        },
        "get.dto.alerts.AlertDTO$AffectedEntity": {
            "id": "get.dto.alerts.AlertDTO$AffectedEntity",
            "required": [],
            "properties": {
                "entity_name": {
                    "type": "string"
                },
                "entity_type": {
                    "type": "string"
                },
                "entity_type_display_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "get.dto.alerts.AlertDTO$AlertDetailsDTO": {
            "id": "get.dto.alerts.AlertDTO$AlertDetailsDTO",
            "required": [],
            "properties": {
                "metric_details": {
                    "description": "List of metric details associated with the alert",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$MetricDetails"
                    },
                    "notes": "List of metric details associated with the alert",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "severity_trails": {
                    "description": "List that contains severity level change details",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$SeverityTrail"
                    },
                    "notes": "List that contains severity level change details",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$MetricDetails": {
            "id": "get.dto.alerts.AlertDTO$MetricDetails",
            "required": [],
            "properties": {
                "comparison_operator": {
                    "description": "Comparison Operator to be applied for teh values.",
                    "notes": "Comparison Operator",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "condition_type": {
                    "description": "Condition Type that the current metric is associated with.",
                    "enum": [
                        "STATIC_THRESHOLD",
                        "ANOMALY",
                        "SAFETY_ZONE"
                    ],
                    "notes": "Condition Type that the current metric is associated with.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "data_type": {
                    "description": "Data Type of the value.",
                    "enum": [
                        "LONG",
                        "DOUBLE",
                        "BOOLEAN",
                        "STRING"
                    ],
                    "notes": "Data Type of the value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entity_id": {
                    "description": "UUID of the entity",
                    "notes": "UUID of the entity",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entity_type": {
                    "description": "Entity Type",
                    "notes": "Entity Type",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_display_name": {
                    "description": "Display name of the metric",
                    "notes": "Display name of the metric",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_name": {
                    "description": "Name of the metric",
                    "notes": "Name of the metric",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_value_details": {
                    "description": "List of metric values at different instances of time in the alert lifecycle",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$MetricValueDetails"
                    },
                    "notes": "List of metric values at different instances of time in the alert lifecycle",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "unit": {
                    "description": "Unit of the metric value.",
                    "notes": "Unit of the metric value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$MetricValueDetails": {
            "id": "get.dto.alerts.AlertDTO$MetricValueDetails",
            "required": [],
            "properties": {
                "metric_threshold_value": {
                    "description": "Threshold value of the metric that was specified in the policy at that given time.",
                    "notes": "Threshold value of the metric that was specified in the policy at that given time.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_value": {
                    "description": "Actual value of the metric at that given time.",
                    "notes": "Actual value of the metric at that given time.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "state_change_time_stamp_in_usecs": {
                    "description": "Time at which the alert's state change occurred.",
                    "format": "int64",
                    "notes": "Time at which the alert's state change occurred.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$SeverityTrail": {
            "id": "get.dto.alerts.AlertDTO$SeverityTrail",
            "required": [],
            "properties": {
                "severity": {
                    "description": "Severity level of the alert. Can be INFO, WARNING or CRITICAL",
                    "notes": "Severity level of the alert. Can be INFO, WARNING or CRITICAL",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "severity_change_timestamp_in_usecs": {
                    "description": "Time at which the severity level change occurred",
                    "format": "int64",
                    "notes": "Time at which the severity level change occurred",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertSummaryDTO": {
            "id": "get.dto.alerts.AlertSummaryDTO",
            "required": [],
            "properties": {
                "alert_summaries": {
                    "$ref": "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;"
                },
                "count": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "get.dto.appliance.configuration.DiskDTO": {
            "id": "get.dto.appliance.configuration.DiskDTO",
            "required": [],
            "properties": {
                "alert_summary": {
                    "$ref": "get.dto.alerts.AlertSummaryDTO"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "cvm_ip_address": {
                    "type": "string"
                },
                "data_migrated": {
                    "type": "boolean"
                },
                "disk_hardware_config": {
                    "$ref": "get.dto.appliance.configuration.DiskHardwareConfigDTO"
                },
                "disk_size": {
                    "format": "int64",
                    "type": "integer"
                },
                "disk_status": {
                    "enum": [
                        "NORMAL",
                        "DATA_MIGRATION_INITIATED",
                        "MARKED_FOR_REMOVAL_BUT_NOT_DETACHABLE",
                        "DETACHABLE"
                    ],
                    "type": "string"
                },
                "disk_uuid": {
                    "type": "string"
                },
                "dynamic_ring_changing_node": {
                    "$ref": "get.dto.appliance.configuration.NodeDTO"
                },
                "health_summary": {
                    "$ref": "get.dto.health.check.HealthSummaryDTO"
                },
                "host_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_node_uuid": {
                    "type": "string"
                },
                "last_service_v_m_id": {
                    "type": "string"
                },
                "location": {
                    "format": "int32",
                    "type": "integer"
                },
                "marked_for_removal": {
                    "type": "boolean"
                },
                "mount_path": {
                    "type": "string"
                },
                "node_uuid": {
                    "type": "string"
                },
                "online": {
                    "type": "boolean"
                },
                "password_protected": {
                    "type": "boolean"
                },
                "self_encrypting_drive": {
                    "type": "boolean"
                },
                "service_v_m_id": {
                    "type": "string"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "storage_tier_name": {
                    "type": "string"
                },
                "usage_stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                }
            }
        },
        "get.dto.appliance.configuration.DiskHardwareConfigDTO": {
            "id": "get.dto.appliance.configuration.DiskHardwareConfigDTO",
            "required": [],
            "properties": {
                "background_operation": {
                    "type": "string"
                },
                "bad": {
                    "type": "boolean"
                },
                "boot_disk": {
                    "type": "boolean"
                },
                "can_add_as_new_disk": {
                    "type": "boolean"
                },
                "can_add_as_old_disk": {
                    "type": "boolean"
                },
                "current_firmware_version": {
                    "type": "string"
                },
                "disk_id": {
                    "type": "string"
                },
                "disk_uuid": {
                    "type": "string"
                },
                "location": {
                    "format": "int32",
                    "type": "integer"
                },
                "model": {
                    "type": "string"
                },
                "mount_path": {
                    "type": "string"
                },
                "mounted": {
                    "type": "boolean"
                },
                "only_boot_disk": {
                    "type": "boolean"
                },
                "serial_number": {
                    "type": "string"
                },
                "target_firmware_version": {
                    "type": "string"
                },
                "under_diagnosis": {
                    "type": "boolean"
                },
                "vendor": {
                    "type": "string"
                }
            }
        },
        "get.dto.appliance.configuration.NodeDTO": {
            "id": "get.dto.appliance.configuration.NodeDTO",
            "required": [],
            "properties": {
                "alert_summary": {
                    "$ref": "get.dto.alerts.AlertSummaryDTO"
                },
                "backplane_ip": {
                    "type": "string"
                },
                "bios_model": {
                    "description": "Specifies the model of bios, present on the node",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "bios_version": {
                    "description": "Specifies the version of bios, present on the node",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "block_location": {
                    "type": "string"
                },
                "block_model": {
                    "type": "string"
                },
                "block_model_name": {
                    "type": "string"
                },
                "block_serial": {
                    "type": "string"
                },
                "bmc_model": {
                    "description": "Specifies the model of bmc, present on the node",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "bmc_version": {
                    "description": "Specifies the version of bmc, present on the node",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "boot_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "controller_vm_backplane_ip": {
                    "type": "string"
                },
                "cpu_capacity_in_hz": {
                    "format": "int64",
                    "type": "integer"
                },
                "cpu_frequency_in_hz": {
                    "format": "int64",
                    "type": "integer"
                },
                "cpu_model": {
                    "type": "string"
                },
                "default_vhd_location": {
                    "description": "The default location configured on the Hyper-V node for storing virtual hard disk files.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "default_vhd_storage_container_id": {
                    "description": "Specifies the ID of the Nutanix container if the default location for storing virtual hard disk files on the Hyper-V node happens to be a Nutanix container.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "default_vhd_storage_container_uuid": {
                    "description": "Specifies the UUID of the Nutanix container if the default location for storing virtual hard disk files on the Hyper-V node happens to be a Nutanix container.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "default_vm_location": {
                    "description": "The default location configured on the Hyper-V node for storing virtual machine configuration files.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "default_vm_storage_container_id": {
                    "description": "Specifies the Id of the Nutanix container if the default location for storing virtual machine configuration files on the Hyper-V node happens to be a Nutanix storage container.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "default_vm_storage_container_uuid": {
                    "description": "Specifies the UUID of the Nutanix container if the default location for storing virtual machine configuration files on the Hyper-V node happens to be a Nutanix storage container.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "disk_hardware_configs": {
                    "$ref": "java.util.Map&lt;java.lang.Integer, get.dto.appliance.configuration.DiskHardwareConfigDTO&gt;",
                    "description": "The disk hardware configurations",
                    "typeName": "DEFAULT"
                },
                "dynamic_ring_changing_node": {
                    "$ref": "get.dto.appliance.configuration.NodeDTO"
                },
                "failover_cluster_fqdn": {
                    "description": "The name of the Hyper-V failover cluster that this node is a part of. Applies only if the node runs Hyper-V",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "failover_cluster_node_state": {
                    "description": "If this node runs Hyper-V and is part of a failovercluster, this property specifies the state of the nodein the failover cluster.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpu_driver_version": {
                    "description": "Host driver version of the GPUs.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "has_csr": {
                    "type": "boolean"
                },
                "hba_firmwares_list": {
                    "description": "Specifies the version and model info of the hba, present on the node",
                    "items": {
                        "$ref": "get.dto.appliance.configuration.NodeDTO$HbaFirmware"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "health_summary": {
                    "$ref": "get.dto.health.check.HealthSummaryDTO"
                },
                "host_gpus": {
                    "description": "The host GPUs.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "host_in_maintenance_mode": {
                    "type": "boolean"
                },
                "host_maintenance_mode_reason": {
                    "type": "string"
                },
                "host_nic_ids": {
                    "description": "The host nic ids",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "hypervisor_address": {
                    "type": "string"
                },
                "hypervisor_full_name": {
                    "type": "string"
                },
                "hypervisor_key": {
                    "type": "string"
                },
                "hypervisor_password": {
                    "type": "string"
                },
                "hypervisor_state": {
                    "type": "string"
                },
                "hypervisor_type": {
                    "type": "string"
                },
                "hypervisor_username": {
                    "type": "string"
                },
                "ipmi_address": {
                    "type": "string"
                },
                "ipmi_password": {
                    "type": "string"
                },
                "ipmi_username": {
                    "type": "string"
                },
                "is_degraded": {
                    "type": "boolean"
                },
                "key_management_device_to_certificate_status": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;"
                },
                "management_server_name": {
                    "type": "string"
                },
                "memory_capacity_in_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "metadata_store_status": {
                    "type": "string"
                },
                "metadata_store_status_message": {
                    "type": "string"
                },
                "monitored": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "num_cpu_cores": {
                    "format": "int64",
                    "type": "integer"
                },
                "num_cpu_sockets": {
                    "format": "int64",
                    "type": "integer"
                },
                "num_cpu_threads": {
                    "format": "int64",
                    "type": "integer"
                },
                "num_v_ms": {
                    "format": "int64",
                    "type": "integer"
                },
                "oplog_disk_pct": {
                    "format": "float",
                    "type": "number"
                },
                "oplog_disk_size": {
                    "format": "int64",
                    "type": "integer"
                },
                "position": {
                    "$ref": "get.dto.appliance.configuration.NodePositionDTO"
                },
                "rdma_backplane_ips": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "reboot_pending": {
                    "description": "If this node runs Hyper-V, this property indicates that a reboot is pending for the earlier initiated domain joining to be complete.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "removal_status": {
                    "items": {
                        "enum": [
                            "NA",
                            "AWAITING_CONFIG_DATA_MIGRATION",
                            "AWAITING_DATA_MIGRATION",
                            "AWAITING_HOST_EVACUATION",
                            "AWAITING_CLUSTER_RESTART"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "serial": {
                    "type": "string"
                },
                "service_v_m_external_i_p": {
                    "type": "string"
                },
                "service_v_m_id": {
                    "type": "string"
                },
                "state": {
                    "enum": [
                        "NEW",
                        "NORMAL",
                        "MARKED_FOR_REMOVAL_BUT_NOT_DETACHABLE",
                        "DETACHABLE"
                    ],
                    "type": "string"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "usage_stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "uuid": {
                    "type": "string"
                },
                "vzone_name": {
                    "type": "string"
                }
            }
        },
        "get.dto.appliance.configuration.NodeDTO$HbaFirmware": {
            "id": "get.dto.appliance.configuration.NodeDTO$HbaFirmware",
            "required": [],
            "properties": {
                "hba_model": {
                    "description": "Specifies the model of hba, present on the node",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "hba_version": {
                    "description": "Specifies the version of hba, present on the node",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.appliance.configuration.NodePositionDTO": {
            "id": "get.dto.appliance.configuration.NodePositionDTO",
            "required": [],
            "properties": {
                "name": {
                    "type": "string"
                },
                "ordinal": {
                    "format": "int32",
                    "type": "integer"
                },
                "physical_position": {
                    "enum": [
                        "C",
                        "L",
                        "R",
                        "TL",
                        "TR",
                        "BL",
                        "BR"
                    ],
                    "type": "string"
                }
            }
        },
        "get.dto.health.check.EntityTypeHealthCheckSummaryDTO": {
            "id": "get.dto.health.check.EntityTypeHealthCheckSummaryDTO",
            "required": [],
            "properties": {
                "checks_in_error": {
                    "$ref": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;"
                },
                "detailed_check_summary": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;"
                }
            }
        },
        "get.dto.health.check.HealthSummaryDTO": {
            "id": "get.dto.health.check.HealthSummaryDTO",
            "required": [],
            "properties": {
                "entity_type_summaries": {
                    "items": {
                        "$ref": "get.dto.health.check.EntityTypeHealthCheckSummaryDTO"
                    },
                    "type": "array"
                },
                "health_check_summaries": {
                    "$ref": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;"
                },
                "health_status": {
                    "enum": [
                        "Critical",
                        "Warning",
                        "Good",
                        "Unknown",
                        "Error"
                    ],
                    "type": "string"
                }
            }
        },
        "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;": {
            "id": "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.Integer, get.dto.appliance.configuration.DiskHardwareConfigDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.Integer, get.dto.appliance.configuration.DiskHardwareConfigDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.lang.String&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.lang.String&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;",
            "required": [],
            "properties": {}
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/PrismGateway/services/rest/v2.0",
    "resourcePath": "/events",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/events/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of Events.",
                    "notes": "Get the list of Events generated in the cluster.",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getEvents",
                    "parameters": [
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of events",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Events which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "entity_type",
                            "description": "Entity type",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "entity_ids",
                            "description": "Entity ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "event_ids",
                            "description": "Event ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "detailed_info",
                            "description": "Get detailed info",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/events/acknowledge",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Acknowledge events.",
                    "notes": "Acknowledge events using a filter criteria.",
                    "type": "create.dto.alerts.ManageAlertsDTO",
                    "nickname": "acknowledgeEvents",
                    "parameters": [
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "severity",
                            "description": "Severity",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "entity_type",
                            "description": "Entity Type",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "entity_type_ids",
                            "description": "Entity Type Ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of events",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/events/{id}/acknowledge",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Acknowledge Event.",
                    "notes": "Acknowledge Event with the specified Id.",
                    "type": "update.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "acknowledgeEvent",
                    "parameters": [
                        {
                            "name": "id",
                            "description": "Event Id",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "create.dto.alerts.ManageAlertsDTO": {
            "id": "create.dto.alerts.ManageAlertsDTO",
            "required": [],
            "properties": {
                "alert_status_list": {
                    "items": {
                        "$ref": "create.dto.alerts.ResolveAcknowledgeAlertDTO"
                    },
                    "type": "array"
                },
                "num_failed_updates": {
                    "format": "int32",
                    "type": "integer"
                },
                "num_successful_updates": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "create.dto.alerts.ResolveAcknowledgeAlertDTO": {
            "id": "create.dto.alerts.ResolveAcknowledgeAlertDTO",
            "required": [],
            "properties": {
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "successful": {
                    "type": "boolean"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.ResultContentDescriptor"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.dto.EntityMetadata": {
            "id": "get.dto.EntityMetadata",
            "required": [],
            "properties": {
                "additional_fields": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "context_hint_field": {
                    "type": "string"
                },
                "context_hint_value": {
                    "type": "string"
                },
                "entity_id": {
                    "type": "string"
                },
                "entity_name": {
                    "type": "string"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                }
            }
        },
        "get.dto.ResultContentDescriptor": {
            "id": "get.dto.ResultContentDescriptor",
            "required": [],
            "properties": {
                "metadata": {
                    "$ref": "get.dto.ResultMetadata"
                },
                "perspectives": {
                    "items": {
                        "$ref": "get.dto.ResultContentDescriptor$Perspective"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.ResultContentDescriptor$Perspective": {
            "id": "get.dto.ResultContentDescriptor$Perspective",
            "required": [],
            "properties": {
                "format": {
                    "enum": [
                        "TABLE",
                        "BAR_CHART",
                        "PIE_CHART",
                        "TIME_SERIES",
                        "KEY_VALUE",
                        "COUNT",
                        "HEALTH_SUMMARY",
                        "ALERT_INFO",
                        "CAPACITY",
                        "OTHER"
                    ],
                    "type": "string"
                },
                "metadata": {
                    "$ref": "get.dto.ResultMetadata"
                },
                "query": {},
                "result": {},
                "type": {
                    "type": "string"
                }
            }
        },
        "get.dto.ResultMetadata": {
            "id": "get.dto.ResultMetadata",
            "required": [],
            "properties": {
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filters": {
                    "items": {
                        "$ref": "get.dto.ResultMetadata$Filter"
                    },
                    "type": "array"
                },
                "instances": {
                    "items": {
                        "$ref": "get.dto.EntityMetadata"
                    },
                    "type": "array"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "get.dto.ResultMetadata$Filter": {
            "id": "get.dto.ResultMetadata$Filter",
            "required": [],
            "properties": {
                "display_for_rhs": {
                    "type": "string"
                },
                "lhs": {
                    "type": "string"
                },
                "operator": {
                    "description": "Operator for the filter.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "rhs": {
                    "type": "string"
                }
            }
        },
        "get.dto.alerts.AlertCauseDTO": {
            "id": "get.dto.alerts.AlertCauseDTO",
            "required": [],
            "properties": {
                "actions": {
                    "description": "Possible actions to resolve this alert",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "additional_links": {
                    "description": "Additional links",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "alert_namespace": {
                    "description": "Namespace this alert belongs to",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "cause": {
                    "description": "Detailed description",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "chart_queries": {
                    "$ref": "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;",
                    "description": "Charts that are relevant to this cause",
                    "typeName": "DEFAULT"
                },
                "details": {
                    "description": "Symptoms for this cause",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "has_global_details": {
                    "description": "Whether the alert has global details or not",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "id": {
                    "description": "Cause Id",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "num_resolved_count": {
                    "description": "Number of times this cause has resolved the alert",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "parent_cause_id": {
                    "description": "Id of the alert/cause this is a possible cause for",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "title": {
                    "description": "Short description",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "troubleshooting_steps": {
                    "description": "Steps to determine whether this is the cause.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO": {
            "id": "get.dto.alerts.AlertDTO",
            "required": [],
            "properties": {
                "acknowledged": {
                    "type": "boolean"
                },
                "acknowledged_by_username": {
                    "type": "string"
                },
                "acknowledged_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "affected_entities": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$AffectedEntity"
                    },
                    "type": "array"
                },
                "alert_details": {
                    "$ref": "get.dto.alerts.AlertDTO$AlertDetailsDTO"
                },
                "alert_title": {
                    "type": "string"
                },
                "alert_type_uuid": {
                    "type": "string"
                },
                "auto_resolved": {
                    "type": "boolean"
                },
                "check_id": {
                    "type": "string"
                },
                "classifications": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "context_types": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "context_values": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "created_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "detailed_message": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "impact_types": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "last_occurrence_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "node_uuid": {
                    "type": "string"
                },
                "originating_cluster_uuid": {
                    "type": "string"
                },
                "possible_causes": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertCauseDTO"
                    },
                    "type": "array"
                },
                "resolved": {
                    "type": "boolean"
                },
                "resolved_by_username": {
                    "type": "string"
                },
                "resolved_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "service_v_m_id": {
                    "type": "string"
                },
                "severity": {
                    "description": "This field describes the severity of the alert.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "user_defined": {
                    "type": "boolean"
                }
            }
        },
        "get.dto.alerts.AlertDTO$AffectedEntity": {
            "id": "get.dto.alerts.AlertDTO$AffectedEntity",
            "required": [],
            "properties": {
                "entity_name": {
                    "type": "string"
                },
                "entity_type": {
                    "type": "string"
                },
                "entity_type_display_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "get.dto.alerts.AlertDTO$AlertDetailsDTO": {
            "id": "get.dto.alerts.AlertDTO$AlertDetailsDTO",
            "required": [],
            "properties": {
                "metric_details": {
                    "description": "List of metric details associated with the alert",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$MetricDetails"
                    },
                    "notes": "List of metric details associated with the alert",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "severity_trails": {
                    "description": "List that contains severity level change details",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$SeverityTrail"
                    },
                    "notes": "List that contains severity level change details",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$MetricDetails": {
            "id": "get.dto.alerts.AlertDTO$MetricDetails",
            "required": [],
            "properties": {
                "comparison_operator": {
                    "description": "Comparison Operator to be applied for teh values.",
                    "notes": "Comparison Operator",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "condition_type": {
                    "description": "Condition Type that the current metric is associated with.",
                    "enum": [
                        "STATIC_THRESHOLD",
                        "ANOMALY",
                        "SAFETY_ZONE"
                    ],
                    "notes": "Condition Type that the current metric is associated with.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "data_type": {
                    "description": "Data Type of the value.",
                    "enum": [
                        "LONG",
                        "DOUBLE",
                        "BOOLEAN",
                        "STRING"
                    ],
                    "notes": "Data Type of the value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entity_id": {
                    "description": "UUID of the entity",
                    "notes": "UUID of the entity",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entity_type": {
                    "description": "Entity Type",
                    "notes": "Entity Type",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_display_name": {
                    "description": "Display name of the metric",
                    "notes": "Display name of the metric",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_name": {
                    "description": "Name of the metric",
                    "notes": "Name of the metric",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_value_details": {
                    "description": "List of metric values at different instances of time in the alert lifecycle",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$MetricValueDetails"
                    },
                    "notes": "List of metric values at different instances of time in the alert lifecycle",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "unit": {
                    "description": "Unit of the metric value.",
                    "notes": "Unit of the metric value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$MetricValueDetails": {
            "id": "get.dto.alerts.AlertDTO$MetricValueDetails",
            "required": [],
            "properties": {
                "metric_threshold_value": {
                    "description": "Threshold value of the metric that was specified in the policy at that given time.",
                    "notes": "Threshold value of the metric that was specified in the policy at that given time.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_value": {
                    "description": "Actual value of the metric at that given time.",
                    "notes": "Actual value of the metric at that given time.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "state_change_time_stamp_in_usecs": {
                    "description": "Time at which the alert's state change occurred.",
                    "format": "int64",
                    "notes": "Time at which the alert's state change occurred.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$SeverityTrail": {
            "id": "get.dto.alerts.AlertDTO$SeverityTrail",
            "required": [],
            "properties": {
                "severity": {
                    "description": "Severity level of the alert. Can be INFO, WARNING or CRITICAL",
                    "notes": "Severity level of the alert. Can be INFO, WARNING or CRITICAL",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "severity_change_timestamp_in_usecs": {
                    "description": "Time at which the severity level change occurred",
                    "format": "int64",
                    "notes": "Time at which the severity level change occurred",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "java.util.Map&lt;java.lang.String, java.lang.String&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.lang.String&gt;",
            "required": [],
            "properties": {}
        },
        "update.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "update.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/PrismGateway/services/rest/v2.0",
    "resourcePath": "/file_groups",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/file_groups/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "List file groups.",
                    "notes": "List file groups.",
                    "type": "get.base.EntityCollection&lt;get.dto.dr.FileGroupDTO&gt;",
                    "nickname": "listFileGroups",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of file group",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/file_groups/{uuid}/delete_files",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Remove files for a specific file group.",
                    "notes": "Remove files for a specific file group.",
                    "type": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "deleteFiles",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of file group",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.dr.FileGroupDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.dr.FileGroupDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.dr.FileGroupDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.dto.ErrorDetails": {
            "id": "get.dto.ErrorDetails",
            "required": [],
            "properties": {
                "entity_id": {
                    "type": "string"
                },
                "error_code": {
                    "format": "int32",
                    "type": "integer"
                },
                "error_message": {
                    "type": "string"
                }
            }
        },
        "get.dto.dr.FileGroupDTO": {
            "id": "get.dto.dr.FileGroupDTO",
            "required": [],
            "properties": {
                "error_details": {
                    "$ref": "get.dto.ErrorDetails",
                    "description": "Error details.",
                    "typeName": "DEFAULT"
                },
                "file_clone_paths": {
                    "description": "Cloned file in this file group.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "file_group_uuid": {
                    "description": "UUID of the file group.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "protection_domain_name": {
                    "description": "Name of the protection domain the file group cloned from.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "snapshot_id": {
                    "description": "Id of the snapshot the file group cloned from.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "snapshot_uuid": {
                    "description": "UUID of the snapshot the file group cloned from.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "state": {
                    "description": "Deployment state of this file group.",
                    "enum": [
                        "NOT_STARTED",
                        "IN_PROGRESS",
                        "COMPLETED"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "v_store_path_prefixes": {
                    "description": "Path prefixes of vStores in this file group.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "vm_ids": {
                    "description": "Ids of vms in this file group.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/api/nutanix/v2.0",
    "resourcePath": "/ha",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/ha/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get current HA configuration.",
                    "notes": "",
                    "type": "get.dto.acropolis.HaConfigDTO",
                    "nickname": "getHaConfig",
                    "parameters": [],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Enable, disable or modify HA configuration.",
                    "notes": "",
                    "type": "update.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "updateHaConfig",
                    "parameters": [
                        {
                            "description": "HA configuration",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.acropolis.HaUpdateDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "get.dto.acropolis.HaConfigDTO": {
            "id": "get.dto.acropolis.HaConfigDTO",
            "required": [],
            "properties": {
                "failover_enabled": {
                    "description": "Whether HA should be invoked upon host failure.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "failover_in_progress_host_uuids": {
                    "description": "UUIDs of hosts that are part of in-progress failover",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "ha_state": {
                    "description": "HA state of the cluster",
                    "enum": [
                        "HIGHLY_AVAILABLE",
                        "HEALING",
                        "BEST_EFFORT",
                        "DISABLED"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "logical_timestamp": {
                    "description": "Logical timestamp of the configuration.",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "num_host_failures_to_tolerate": {
                    "description": "Number of host failures tolerated.",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "reservation_type": {
                    "description": "Type of reservation (hosts or segments).",
                    "enum": [
                        "RESERVE_HOSTS",
                        "RESERVE_SEGMENTS",
                        "NO_RESERVATIONS"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "reserved_host_uuids": {
                    "description": "UUIDs of hosts reserved for failover.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.acropolis.HaUpdateDTO": {
            "id": "update.dto.acropolis.HaUpdateDTO",
            "required": [],
            "properties": {
                "enable_failover": {
                    "description": "Whether HA should be invoked upon host failure.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "evacuation_option": {
                    "description": "Indicates the action we take to evacuate VMs powered on the host.",
                    "enum": [
                        "POWER_OFF",
                        "COLD_MIGRATE",
                        "LIVE_MIGRATE"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "logical_timestamp": {
                    "description": "Logical timestamp for HA configuration.",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "num_host_failures_to_tolerate": {
                    "description": "Number of host failures tolerated.",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "reservation_type": {
                    "description": "Type of HA reservation (segments or hosts).",
                    "enum": [
                        "RESERVE_HOSTS",
                        "RESERVE_SEGMENTS",
                        "NO_RESERVATIONS"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.acropolis.ReturnValueDTO$TaskIdDTO": {
            "id": "update.dto.acropolis.ReturnValueDTO$TaskIdDTO",
            "required": [],
            "properties": {
                "task_uuid": {
                    "description": "UUID of the task.",
                    "notes": "UUID of the task.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/PrismGateway/services/rest/v2.0",
    "resourcePath": "/health_checks",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/health_checks/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of Health Checks.",
                    "notes": "Get the list of Health Checks configured in the cluster.",
                    "type": "get.base.EntityCollection&lt;get.dto.health.check.HealthCheckDTO&gt;",
                    "nickname": "getHealthChecks",
                    "parameters": [
                        {
                            "name": "check_ids",
                            "description": "Check Ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "global_config",
                            "description": "Whether to get the global config list or not.",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "include_internal_checks",
                            "description": "Whether to include internal checks or not.",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "category_types",
                            "description": "Categories of the Health Check.",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PATCH",
                    "summary": "Modify Health Check details.",
                    "notes": "Modify the specified health check details.",
                    "type": "patch.dto.health.check.HealthCheckDTO",
                    "nickname": "patchHealthCheck",
                    "parameters": [
                        {
                            "description": "An Health Check instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "patch.dto.RequestDTO&lt;patch.dto.health.check.HealthCheckDTO&gt;"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Update Health Check details.",
                    "notes": "Update the specified health check details.",
                    "type": "update.dto.health.check.HealthCheckDTO",
                    "nickname": "updateHealthCheck",
                    "parameters": [
                        {
                            "description": "An Health Check instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.health.check.HealthCheckDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/health_checks/{id}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get Health Check details.",
                    "notes": "Get the health check with the specified id.",
                    "type": "get.dto.health.check.HealthCheckDTO",
                    "nickname": "getHealthCheck",
                    "parameters": [
                        {
                            "name": "id",
                            "description": "Id of the health check",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "global_config",
                            "description": "Whether to get the global config list or not.",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "get.base.EntityCollection&lt;get.dto.health.check.HealthCheckDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.health.check.HealthCheckDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.health.check.HealthCheckDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.dto.health.check.HealthCheckDTO": {
            "id": "get.dto.health.check.HealthCheckDTO",
            "description": "health-check",
            "required": [],
            "properties": {
                "affected_entity_types": {
                    "description": "Affected entity types.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "alert_config_exception_groups": {
                    "description": "Those clusters that have their Alert configurable params that are different from that in PC",
                    "items": {
                        "$ref": "get.dto.health.check.HealthCheckDTO$AlertConfigExceptionGroup"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "alert_configurable_parameters": {
                    "description": "Configurable Parameters for the Alert Type.",
                    "items": {
                        "$ref": "get.dto.health.check.HealthCheckDTO$AlertConfigParamDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "alert_type_id": {
                    "description": "Id of an alert type.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "applicable_for_multi_cluster": {
                    "description": "Whether the check is applicable for Prism Central or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "applicable_for_single_cluster": {
                    "description": "Whether the check is applicable for Prism Element or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "auto_resolve": {
                    "description": "Auto Resolve status for this check.",
                    "enum": [
                        "ENABLED",
                        "DISABLED",
                        "NOT_SUPPORTED"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "causes": {
                    "description": "Causes.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "check_type": {
                    "description": "Whether the health check is scheduled or event driven.",
                    "enum": [
                        "SCHEDULED",
                        "NOT_SCHEDULED",
                        "EVENT_DRIVEN"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "classifications": {
                    "description": "Classification of the Health Check. Ex: DR, Hardware, etc",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "description": {
                    "description": "Description of a health check.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "enabled": {
                    "description": "Whether health check is enabled.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "exception_count": {
                    "description": "Numbers of clusters having exceptions w.r.t Alert config.",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "id": {
                    "description": "Id of a health check.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "impact_types": {
                    "description": "Impact type on affected entities.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "is_global_config": {
                    "description": "Whether the check is a default one or not",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_user_defined": {
                    "description": "Whether the health check is user defined or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "kb_list": {
                    "description": "List of kb article numbers.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "message": {
                    "description": "Message for an alert type.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metrics": {
                    "description": "Metrics.",
                    "items": {
                        "$ref": "get.dto.health.check.HealthCheckDTO$HealthCheckMetricDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "modified_by_username": {
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "modified_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Name of a health check.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "parameters": {
                    "$ref": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckDTO$HealthCheckParameterDTO&gt;",
                    "description": "Parameters.",
                    "typeName": "DEFAULT"
                },
                "policy_uuid": {
                    "description": "Policy Uuid of the health check. Will be set only for user defined policies.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "resolutions": {
                    "description": "Resolutions.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "schedule_interval_in_secs": {
                    "description": "Interval between checks in seconds.",
                    "format": "int32",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "scope": {
                    "description": "Scope of health check.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "severity_threshold_infos": {
                    "description": "Enable/Disable info for each Severity.",
                    "items": {
                        "$ref": "get.dto.health.check.HealthCheckDTO$SeverityThresholdInfoDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "title": {
                    "description": "Title of an alert type.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.health.check.HealthCheckDTO$AlertConfigExceptionGroup": {
            "id": "get.dto.health.check.HealthCheckDTO$AlertConfigExceptionGroup",
            "required": [],
            "properties": {
                "auto_resolve": {
                    "enum": [
                        "ENABLED",
                        "DISABLED",
                        "NOT_SUPPORTED"
                    ],
                    "type": "string"
                },
                "cluster_uuids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "configurable_parameters": {
                    "items": {
                        "$ref": "get.dto.health.check.HealthCheckDTO$AlertConfigParamDTO"
                    },
                    "type": "array"
                },
                "severity_threshold_infos": {
                    "items": {
                        "$ref": "get.dto.health.check.HealthCheckDTO$SeverityThresholdInfoDTO"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.health.check.HealthCheckDTO$AlertConfigParamDTO": {
            "id": "get.dto.health.check.HealthCheckDTO$AlertConfigParamDTO",
            "description": "DTO representing the configurable parameters for an alert type",
            "required": [],
            "properties": {
                "parameter_boolean_value": {
                    "description": "If the parameter value is a Boolean, its value.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "parameter_default_boolean_value": {
                    "description": "If the parameter value is a Boolean, its default value.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "parameter_default_long_value": {
                    "description": "If the parameter value is Long, its default value.",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "parameter_default_string_value": {
                    "description": "If the parameter value is a String, its default value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "parameter_display_name": {
                    "description": "Display name of the parameter.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "parameter_long_value": {
                    "description": "If the parameter value is Long, its value.",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "parameter_name": {
                    "description": "Name of the parameter.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "parameter_string_value": {
                    "description": "If the parameter value is a String, its value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "parameter_unit": {
                    "description": "Unit of the parameter value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "parameter_valid_values": {
                    "description": "Valid values for a parameter",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "severity": {
                    "description": "Severity for which this parameter value applies.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.health.check.HealthCheckDTO$HealthCheckMetricDTO": {
            "id": "get.dto.health.check.HealthCheckDTO$HealthCheckMetricDTO",
            "required": [],
            "properties": {
                "display_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "get.dto.health.check.HealthCheckDTO$SeverityThresholdInfoDTO": {
            "id": "get.dto.health.check.HealthCheckDTO$SeverityThresholdInfoDTO",
            "required": [],
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "severity": {
                    "type": "string"
                }
            }
        },
        "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckDTO$HealthCheckParameterDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckDTO$HealthCheckParameterDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, patch.dto.health.check.HealthCheckDTO$HealthCheckParameterDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, patch.dto.health.check.HealthCheckDTO$HealthCheckParameterDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckDTO$HealthCheckParameterDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckDTO$HealthCheckParameterDTO&gt;",
            "required": [],
            "properties": {}
        },
        "patch.dto.RequestDTO&lt;patch.dto.health.check.HealthCheckDTO&gt;": {
            "id": "patch.dto.RequestDTO&lt;patch.dto.health.check.HealthCheckDTO&gt;",
            "required": [],
            "properties": {
                "cluster_uuid": {
                    "type": "string"
                },
                "generic_d_t_o": {
                    "$ref": "patch.dto.health.check.HealthCheckDTO"
                },
                "operation": {
                    "type": "string"
                }
            }
        },
        "patch.dto.health.check.HealthCheckDTO": {
            "id": "patch.dto.health.check.HealthCheckDTO",
            "description": "health-check",
            "required": [],
            "properties": {
                "affected_entity_types": {
                    "description": "Affected entity types.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "alert_configurable_parameters": {
                    "description": "Configurable Parameters for the Alert Type.",
                    "items": {
                        "$ref": "patch.dto.health.check.HealthCheckDTO$AlertConfigParamDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "alert_type_id": {
                    "description": "Id of an alert type.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "applicable_for_multi_cluster": {
                    "description": "Whether the check is applicable for Prism Central or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "applicable_for_single_cluster": {
                    "description": "Whether the check is applicable for Prism Element or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "auto_resolve": {
                    "description": "Auto Resolve status for this check.",
                    "enum": [
                        "ENABLED",
                        "DISABLED",
                        "NOT_SUPPORTED"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "causes": {
                    "description": "Causes.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "check_type": {
                    "description": "Whether the health check is scheduled or event driven.",
                    "enum": [
                        "SCHEDULED",
                        "NOT_SCHEDULED",
                        "EVENT_DRIVEN"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "classifications": {
                    "description": "Classification of the Health Check. Ex: DR, Hardware, etc",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "description": {
                    "description": "Description of a health check.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "enabled": {
                    "description": "Whether health check is enabled.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "id": {
                    "description": "Id of a health check.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "impact_types": {
                    "description": "Impact type on affected entities.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "is_global_config": {
                    "description": "Whether the check is a default one or not",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_user_defined": {
                    "description": "Whether the health check is user defined or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "kb_list": {
                    "description": "List of kb article numbers.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "message": {
                    "description": "Message for an alert type.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metrics": {
                    "description": "Metrics.",
                    "items": {
                        "$ref": "patch.dto.health.check.HealthCheckDTO$HealthCheckMetricDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "modified_by_username": {
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "modified_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Name of a health check.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "parameters": {
                    "$ref": "java.util.Map&lt;java.lang.String, patch.dto.health.check.HealthCheckDTO$HealthCheckParameterDTO&gt;",
                    "description": "Parameters.",
                    "typeName": "DEFAULT"
                },
                "policy_uuid": {
                    "description": "Policy Uuid of the health check. Will be set only for user defined policies.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "resolutions": {
                    "description": "Resolutions.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "schedule_interval_in_secs": {
                    "description": "Interval between checks in seconds.",
                    "format": "int32",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "scope": {
                    "description": "Scope of health check.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "severity_threshold_infos": {
                    "description": "Enable/Disable info for each Severity.",
                    "items": {
                        "$ref": "patch.dto.health.check.HealthCheckDTO$SeverityThresholdInfoDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "patch.dto.health.check.HealthCheckDTO$AlertConfigParamDTO": {
            "id": "patch.dto.health.check.HealthCheckDTO$AlertConfigParamDTO",
            "description": "DTO representing the configurable parameters for an alert type",
            "required": [
                "parameter_name",
                "severity"
            ],
            "properties": {
                "parameter_boolean_value": {
                    "description": "If the parameter value is a Boolean, its value.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "parameter_default_boolean_value": {
                    "description": "If the parameter value is a Boolean, its default value.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "parameter_default_long_value": {
                    "description": "If the parameter value is Long, its default value.",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "parameter_default_string_value": {
                    "description": "If the parameter value is a String, its default value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "parameter_display_name": {
                    "description": "Display name of the parameter.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "parameter_long_value": {
                    "description": "If the parameter value is Long, its value.",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "parameter_name": {
                    "description": "Name of the parameter.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "parameter_string_value": {
                    "description": "If the parameter value is a String, its value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "parameter_unit": {
                    "description": "Unit of the parameter value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "parameter_valid_values": {
                    "description": "Valid values for a parameter",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "severity": {
                    "description": "Severity for which this parameter value applies.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "patch.dto.health.check.HealthCheckDTO$HealthCheckMetricDTO": {
            "id": "patch.dto.health.check.HealthCheckDTO$HealthCheckMetricDTO",
            "required": [],
            "properties": {
                "display_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "patch.dto.health.check.HealthCheckDTO$SeverityThresholdInfoDTO": {
            "id": "patch.dto.health.check.HealthCheckDTO$SeverityThresholdInfoDTO",
            "required": [],
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "severity": {
                    "type": "string"
                }
            }
        },
        "update.dto.health.check.HealthCheckDTO": {
            "id": "update.dto.health.check.HealthCheckDTO",
            "description": "health-check",
            "required": [],
            "properties": {
                "affected_entity_types": {
                    "description": "Affected entity types.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "alert_configurable_parameters": {
                    "description": "Configurable Parameters for the Alert Type.",
                    "items": {
                        "$ref": "update.dto.health.check.HealthCheckDTO$AlertConfigParamDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "alert_type_id": {
                    "description": "Id of an alert type.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "applicable_for_multi_cluster": {
                    "description": "Whether the check is applicable for Prism Central or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "applicable_for_single_cluster": {
                    "description": "Whether the check is applicable for Prism Element or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "auto_resolve": {
                    "description": "Auto Resolve status for this check.",
                    "enum": [
                        "ENABLED",
                        "DISABLED",
                        "NOT_SUPPORTED"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "causes": {
                    "description": "Causes.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "check_type": {
                    "description": "Whether the health check is scheduled or event driven.",
                    "enum": [
                        "SCHEDULED",
                        "NOT_SCHEDULED",
                        "EVENT_DRIVEN"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "classifications": {
                    "description": "Classification of the Health Check. Ex: DR, Hardware, etc",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "description": {
                    "description": "Description of a health check.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "enabled": {
                    "description": "Whether health check is enabled.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "id": {
                    "description": "Id of a health check.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "impact_types": {
                    "description": "Impact type on affected entities.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "is_global_config": {
                    "description": "Whether the check is a default one or not",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_user_defined": {
                    "description": "Whether the health check is user defined or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "kb_list": {
                    "description": "List of kb article numbers.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "message": {
                    "description": "Message for an alert type.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metrics": {
                    "description": "Metrics.",
                    "items": {
                        "$ref": "update.dto.health.check.HealthCheckDTO$HealthCheckMetricDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "modified_by_username": {
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "modified_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Name of a health check.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "parameters": {
                    "$ref": "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckDTO$HealthCheckParameterDTO&gt;",
                    "description": "Parameters.",
                    "typeName": "DEFAULT"
                },
                "policy_uuid": {
                    "description": "Policy Uuid of the health check. Will be set only for user defined policies.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "resolutions": {
                    "description": "Resolutions.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "schedule_interval_in_secs": {
                    "description": "Interval between checks in seconds.",
                    "format": "int32",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "scope": {
                    "description": "Scope of health check.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "severity_threshold_infos": {
                    "description": "Enable/Disable info for each Severity.",
                    "items": {
                        "$ref": "update.dto.health.check.HealthCheckDTO$SeverityThresholdInfoDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.health.check.HealthCheckDTO$AlertConfigParamDTO": {
            "id": "update.dto.health.check.HealthCheckDTO$AlertConfigParamDTO",
            "description": "DTO representing the configurable parameters for an alert type",
            "required": [
                "parameter_name",
                "severity"
            ],
            "properties": {
                "parameter_boolean_value": {
                    "description": "If the parameter value is a Boolean, its value.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "parameter_default_boolean_value": {
                    "description": "If the parameter value is a Boolean, its default value.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "parameter_default_long_value": {
                    "description": "If the parameter value is Long, its default value.",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "parameter_default_string_value": {
                    "description": "If the parameter value is a String, its default value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "parameter_display_name": {
                    "description": "Display name of the parameter.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "parameter_long_value": {
                    "description": "If the parameter value is Long, its value.",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "parameter_name": {
                    "description": "Name of the parameter.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "parameter_string_value": {
                    "description": "If the parameter value is a String, its value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "parameter_unit": {
                    "description": "Unit of the parameter value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "parameter_valid_values": {
                    "description": "Valid values for a parameter",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "severity": {
                    "description": "Severity for which this parameter value applies.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.health.check.HealthCheckDTO$HealthCheckMetricDTO": {
            "id": "update.dto.health.check.HealthCheckDTO$HealthCheckMetricDTO",
            "required": [],
            "properties": {
                "display_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "update.dto.health.check.HealthCheckDTO$SeverityThresholdInfoDTO": {
            "id": "update.dto.health.check.HealthCheckDTO$SeverityThresholdInfoDTO",
            "required": [],
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "severity": {
                    "type": "string"
                }
            }
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/PrismGateway/services/rest/v2.0",
    "resourcePath": "/hosts",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/hosts/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of Physical Hosts.",
                    "notes": "Get the list of Physical Hosts configured in the cluster.",
                    "type": "get.base.EntityCollection&lt;get.dto.appliance.configuration.NodeDTO&gt;",
                    "nickname": "getHosts",
                    "parameters": [
                        {
                            "name": "count",
                            "description": "Number of Physical Hosts to retrieve",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "filter_criteria",
                            "description": "Filter criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "sort_criteria",
                            "description": "Sort criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "search_string",
                            "description": "Search string",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "search_attribute_list",
                            "description": "Search attribute list",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "projection",
                            "description": "Projections on the attributes",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/alerts",
            "operations": [
                {
                    "deprecated": "true",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of alerts generated on any Host.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getHostAlerts",
                    "parameters": [
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of alerts",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "resolved",
                            "description": "Alerts which have been resolved",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Alerts which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "severity",
                            "description": "Alert severities",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "alert_type_uuid",
                            "description": "Alert type ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/events",
            "operations": [
                {
                    "deprecated": "true",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of events generated on any Host.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getHostEvents",
                    "parameters": [
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of events",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Events which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/gpu_profiles",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of virtual GPU profiles for all physical Hosts.",
                    "notes": "Get the list of virtual GPU profiles for all physical Hosts.",
                    "type": "get.base.EntityCollection&lt;get.dto.uhura.VirtualGPUProfileDTO&gt;",
                    "nickname": "getVirtualGpuProfiles",
                    "parameters": [],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/host_gpus",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of GPUs for all physical Host.",
                    "notes": "Get the list of GPUs for all physical Host.",
                    "type": "get.base.EntityCollection&lt;get.dto.uhura.HostGPUDTO&gt;",
                    "nickname": "getHostGpus",
                    "parameters": [
                        {
                            "name": "count",
                            "description": "Number of host GPUs to retrieve",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "filter_criteria",
                            "description": "Filter criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "sort_criteria",
                            "description": "Sort criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "search_string",
                            "description": "Search string",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/{uuid}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get a Physical Host.",
                    "notes": "Get a Physical Host with the specified id.",
                    "type": "get.dto.appliance.configuration.NodeDTO",
                    "nickname": "getHost",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of a Physical Host",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "projection",
                            "description": "Projections on the attributes",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/{uuid}/alerts",
            "operations": [
                {
                    "deprecated": "true",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of alerts generated on a specified Host.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getAlertsForHost",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of a Host",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of alerts",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "resolved",
                            "description": "Alerts which have been resolved",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Alerts which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "severity",
                            "description": "Alert severities",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "alert_type_uuid",
                            "description": "Alert type ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/{uuid}/enter_maintenance_mode",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Put a host in maintenance mode.",
                    "notes": "Put a host in maintenance mode. <br/><br/>It can be specified if Virtual Machines currently running on the host need to be powered off, live migrated or cold migrated. The host will be marked as unschedulable, so that no new Virtual Machines can be instantiated on it. Subsequently, an attempt is made to evacuate VMs from the host. <br/><br/>If the evacuation attempt fails (e.g., because there are insufficient resources available elsewhere in the cluster), the host will remain in the entering maintenance mode state, where it is marked unschedulable, waiting for user remediation. <br/><br/>This operation is idempotent and can be run again with different options like powering off the Virtual Machines, live or cold migrating them. <br/><br/>This is also an asynchronous operation that results in the creation of a task object. <br/><br/>The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "enterMaintenanceMode",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of host to put in maintenance mode",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Maintenance mode options",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.acropolis.MaintenanceModeDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/{uuid}/events",
            "operations": [
                {
                    "deprecated": "true",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of events generated on a specified Host.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getEventsForHost",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of a Host",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of events",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Events which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/{uuid}/exit_maintenance_mode",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Pull a host out of maintenance mode or abort a prior attempt.",
                    "notes": "Pull a host out of maintenance mode or abort a prior attempt to enter maintenance mode even if the attempt is ongoing. <br/><br/>This is an idempotent operation. If the host is no longer in maintenance mode, this command has no effect. <br/><br/>This is an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API. <br/><br/>If a logical timestamp is specified, then this operation will be rejected if the logical timestamp specified is not the value of the host logical timestamp. The logical timestamp can be obtained from the host object.",
                    "type": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "exitMaintenanceMode",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of host to pull out of maintenance mode",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Logical timestamp associated with host object",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.acropolis.RequestValueDTO$LogicalTimestampDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/{uuid}/host_gpus",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of GPUs for a physical Host.",
                    "notes": "Get the list of GPUs for a physical Host.",
                    "type": "get.base.EntityCollection&lt;get.dto.uhura.HostGPUDTO&gt;",
                    "nickname": "getGpusforHost",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of the Host",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "count",
                            "description": "Number of host GPUs to retrieve",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "filter_criteria",
                            "description": "Filter criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "sort_criteria",
                            "description": "Sort criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "search_string",
                            "description": "Search string",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/{uuid}/host_gpus/{gpu_uuid}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get a particular GPU for a physical Host.",
                    "notes": "Get a particular GPU for a physical Host.",
                    "type": "get.dto.uhura.HostGPUDTO",
                    "nickname": "getGpuforHost",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of the Host",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "gpu_uuid",
                            "description": "UUID of the Host GPU",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/{uuid}/host_gpus/{gpu_uuid}/stats/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get stats for a particular GPU for a physical Host.",
                    "notes": "Get stats for a particular GPU for a physical Host.",
                    "type": "get.base.StatsResponse",
                    "nickname": "getHostGpuStats",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of the Host",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "gpu_uuid",
                            "description": "UUID of the Host GPU",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "metrics",
                            "description": "List of metrics",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "interval_in_secs",
                            "description": "Sampling interval of stats",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/{uuid}/stats/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the stats for a specified Physical Host.",
                    "notes": "If start time and end time are included in the query string, then historical stats are retrieved. Otherwise, the latest stats are retrieved.",
                    "type": "get.base.StatsResponse",
                    "nickname": "getHostStats",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of a Physical Host",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "metrics",
                            "description": "List of metrics",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "interval_in_secs",
                            "description": "Sampling interval of stats",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "create.dto.acropolis.MaintenanceModeDTO": {
            "id": "create.dto.acropolis.MaintenanceModeDTO",
            "required": [],
            "properties": {
                "evacuation_option": {
                    "description": "Indicates the action we take to evacuate Virtual Machines powered on the host. Virtual Machines can be either powered off, live migrated or cold migrated. ",
                    "enum": [
                        "POWER_OFF",
                        "COLD_MIGRATE",
                        "LIVE_MIGRATE"
                    ],
                    "notes": "VM Evacuation action.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "logical_timestamp": {
                    "description": "Logical timestamp that may be provided for consistency. This is an optional field. The current value for the logical timestamp can be obtained from the host object.",
                    "format": "int64",
                    "notes": "Logical timestamp provided for consistency.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "non_migratable_vm_option": {
                    "description": "Indicates the action to take for non migratable VMs.Non migratable VMs like ones with GPUs assigned can choose to be ACPI powered off or fail the maintenance mode.",
                    "enum": [
                        "BLOCK",
                        "ACPI_SHUTDOWN_AND_POWER_OFF"
                    ],
                    "notes": "Indicates the action to take for non migratable VMs.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.RequestValueDTO$LogicalTimestampDTO": {
            "id": "create.dto.acropolis.RequestValueDTO$LogicalTimestampDTO",
            "required": [],
            "properties": {
                "logical_timestamp": {
                    "description": "Logical timestamp that may be provided for consistency.",
                    "format": "int64",
                    "notes": "Logical timestamp provided for consistency.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.ReturnValueDTO$TaskIdDTO": {
            "id": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
            "required": [],
            "properties": {
                "task_uuid": {
                    "description": "UUID of the task.",
                    "notes": "UUID of the task.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.ResultContentDescriptor"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.appliance.configuration.NodeDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.appliance.configuration.NodeDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.appliance.configuration.NodeDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.uhura.HostGPUDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.uhura.HostGPUDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.uhura.HostGPUDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.uhura.VirtualGPUProfileDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.uhura.VirtualGPUProfileDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.uhura.VirtualGPUProfileDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.base.StatsResponse": {
            "id": "get.base.StatsResponse",
            "required": [],
            "properties": {
                "stats_specific_responses": {
                    "items": {
                        "$ref": "get.base.StatsResponse$StatsSpecificResponse"
                    },
                    "type": "array"
                }
            }
        },
        "get.base.StatsResponse$StatsSpecificResponse": {
            "id": "get.base.StatsResponse$StatsSpecificResponse",
            "required": [],
            "properties": {
                "interval_in_secs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "metric": {
                    "type": "string"
                },
                "start_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "successful": {
                    "type": "boolean"
                },
                "values": {
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.EntityMetadata": {
            "id": "get.dto.EntityMetadata",
            "required": [],
            "properties": {
                "additional_fields": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "context_hint_field": {
                    "type": "string"
                },
                "context_hint_value": {
                    "type": "string"
                },
                "entity_id": {
                    "type": "string"
                },
                "entity_name": {
                    "type": "string"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                }
            }
        },
        "get.dto.ResultContentDescriptor": {
            "id": "get.dto.ResultContentDescriptor",
            "required": [],
            "properties": {
                "metadata": {
                    "$ref": "get.dto.ResultMetadata"
                },
                "perspectives": {
                    "items": {
                        "$ref": "get.dto.ResultContentDescriptor$Perspective"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.ResultContentDescriptor$Perspective": {
            "id": "get.dto.ResultContentDescriptor$Perspective",
            "required": [],
            "properties": {
                "format": {
                    "enum": [
                        "TABLE",
                        "BAR_CHART",
                        "PIE_CHART",
                        "TIME_SERIES",
                        "KEY_VALUE",
                        "COUNT",
                        "HEALTH_SUMMARY",
                        "ALERT_INFO",
                        "CAPACITY",
                        "OTHER"
                    ],
                    "type": "string"
                },
                "metadata": {
                    "$ref": "get.dto.ResultMetadata"
                },
                "query": {},
                "result": {},
                "type": {
                    "type": "string"
                }
            }
        },
        "get.dto.ResultMetadata": {
            "id": "get.dto.ResultMetadata",
            "required": [],
            "properties": {
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filters": {
                    "items": {
                        "$ref": "get.dto.ResultMetadata$Filter"
                    },
                    "type": "array"
                },
                "instances": {
                    "items": {
                        "$ref": "get.dto.EntityMetadata"
                    },
                    "type": "array"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "get.dto.ResultMetadata$Filter": {
            "id": "get.dto.ResultMetadata$Filter",
            "required": [],
            "properties": {
                "display_for_rhs": {
                    "type": "string"
                },
                "lhs": {
                    "type": "string"
                },
                "operator": {
                    "description": "Operator for the filter.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "rhs": {
                    "type": "string"
                }
            }
        },
        "get.dto.alerts.AlertCauseDTO": {
            "id": "get.dto.alerts.AlertCauseDTO",
            "required": [],
            "properties": {
                "actions": {
                    "description": "Possible actions to resolve this alert",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "additional_links": {
                    "description": "Additional links",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "alert_namespace": {
                    "description": "Namespace this alert belongs to",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "cause": {
                    "description": "Detailed description",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "chart_queries": {
                    "$ref": "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;",
                    "description": "Charts that are relevant to this cause",
                    "typeName": "DEFAULT"
                },
                "details": {
                    "description": "Symptoms for this cause",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "has_global_details": {
                    "description": "Whether the alert has global details or not",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "id": {
                    "description": "Cause Id",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "num_resolved_count": {
                    "description": "Number of times this cause has resolved the alert",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "parent_cause_id": {
                    "description": "Id of the alert/cause this is a possible cause for",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "title": {
                    "description": "Short description",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "troubleshooting_steps": {
                    "description": "Steps to determine whether this is the cause.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO": {
            "id": "get.dto.alerts.AlertDTO",
            "required": [],
            "properties": {
                "acknowledged": {
                    "type": "boolean"
                },
                "acknowledged_by_username": {
                    "type": "string"
                },
                "acknowledged_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "affected_entities": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$AffectedEntity"
                    },
                    "type": "array"
                },
                "alert_details": {
                    "$ref": "get.dto.alerts.AlertDTO$AlertDetailsDTO"
                },
                "alert_title": {
                    "type": "string"
                },
                "alert_type_uuid": {
                    "type": "string"
                },
                "auto_resolved": {
                    "type": "boolean"
                },
                "check_id": {
                    "type": "string"
                },
                "classifications": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "context_types": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "context_values": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "created_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "detailed_message": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "impact_types": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "last_occurrence_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "node_uuid": {
                    "type": "string"
                },
                "originating_cluster_uuid": {
                    "type": "string"
                },
                "possible_causes": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertCauseDTO"
                    },
                    "type": "array"
                },
                "resolved": {
                    "type": "boolean"
                },
                "resolved_by_username": {
                    "type": "string"
                },
                "resolved_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "service_v_m_id": {
                    "type": "string"
                },
                "severity": {
                    "description": "This field describes the severity of the alert.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "user_defined": {
                    "type": "boolean"
                }
            }
        },
        "get.dto.alerts.AlertDTO$AffectedEntity": {
            "id": "get.dto.alerts.AlertDTO$AffectedEntity",
            "required": [],
            "properties": {
                "entity_name": {
                    "type": "string"
                },
                "entity_type": {
                    "type": "string"
                },
                "entity_type_display_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "get.dto.alerts.AlertDTO$AlertDetailsDTO": {
            "id": "get.dto.alerts.AlertDTO$AlertDetailsDTO",
            "required": [],
            "properties": {
                "metric_details": {
                    "description": "List of metric details associated with the alert",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$MetricDetails"
                    },
                    "notes": "List of metric details associated with the alert",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "severity_trails": {
                    "description": "List that contains severity level change details",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$SeverityTrail"
                    },
                    "notes": "List that contains severity level change details",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$MetricDetails": {
            "id": "get.dto.alerts.AlertDTO$MetricDetails",
            "required": [],
            "properties": {
                "comparison_operator": {
                    "description": "Comparison Operator to be applied for teh values.",
                    "notes": "Comparison Operator",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "condition_type": {
                    "description": "Condition Type that the current metric is associated with.",
                    "enum": [
                        "STATIC_THRESHOLD",
                        "ANOMALY",
                        "SAFETY_ZONE"
                    ],
                    "notes": "Condition Type that the current metric is associated with.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "data_type": {
                    "description": "Data Type of the value.",
                    "enum": [
                        "LONG",
                        "DOUBLE",
                        "BOOLEAN",
                        "STRING"
                    ],
                    "notes": "Data Type of the value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entity_id": {
                    "description": "UUID of the entity",
                    "notes": "UUID of the entity",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entity_type": {
                    "description": "Entity Type",
                    "notes": "Entity Type",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_display_name": {
                    "description": "Display name of the metric",
                    "notes": "Display name of the metric",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_name": {
                    "description": "Name of the metric",
                    "notes": "Name of the metric",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_value_details": {
                    "description": "List of metric values at different instances of time in the alert lifecycle",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$MetricValueDetails"
                    },
                    "notes": "List of metric values at different instances of time in the alert lifecycle",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "unit": {
                    "description": "Unit of the metric value.",
                    "notes": "Unit of the metric value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$MetricValueDetails": {
            "id": "get.dto.alerts.AlertDTO$MetricValueDetails",
            "required": [],
            "properties": {
                "metric_threshold_value": {
                    "description": "Threshold value of the metric that was specified in the policy at that given time.",
                    "notes": "Threshold value of the metric that was specified in the policy at that given time.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_value": {
                    "description": "Actual value of the metric at that given time.",
                    "notes": "Actual value of the metric at that given time.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "state_change_time_stamp_in_usecs": {
                    "description": "Time at which the alert's state change occurred.",
                    "format": "int64",
                    "notes": "Time at which the alert's state change occurred.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$SeverityTrail": {
            "id": "get.dto.alerts.AlertDTO$SeverityTrail",
            "required": [],
            "properties": {
                "severity": {
                    "description": "Severity level of the alert. Can be INFO, WARNING or CRITICAL",
                    "notes": "Severity level of the alert. Can be INFO, WARNING or CRITICAL",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "severity_change_timestamp_in_usecs": {
                    "description": "Time at which the severity level change occurred",
                    "format": "int64",
                    "notes": "Time at which the severity level change occurred",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertSummaryDTO": {
            "id": "get.dto.alerts.AlertSummaryDTO",
            "required": [],
            "properties": {
                "alert_summaries": {
                    "$ref": "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;"
                },
                "count": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "get.dto.appliance.configuration.NodeDTO": {
            "id": "get.dto.appliance.configuration.NodeDTO",
            "required": [],
            "properties": {
                "alert_summary": {
                    "$ref": "get.dto.alerts.AlertSummaryDTO"
                },
                "backplane_ip": {
                    "type": "string"
                },
                "bios_model": {
                    "description": "Specifies the model of bios, present on the node",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "bios_version": {
                    "description": "Specifies the version of bios, present on the node",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "block_location": {
                    "type": "string"
                },
                "block_model": {
                    "type": "string"
                },
                "block_model_name": {
                    "type": "string"
                },
                "block_serial": {
                    "type": "string"
                },
                "bmc_model": {
                    "description": "Specifies the model of bmc, present on the node",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "bmc_version": {
                    "description": "Specifies the version of bmc, present on the node",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "boot_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "controller_vm_backplane_ip": {
                    "type": "string"
                },
                "cpu_capacity_in_hz": {
                    "format": "int64",
                    "type": "integer"
                },
                "cpu_frequency_in_hz": {
                    "format": "int64",
                    "type": "integer"
                },
                "cpu_model": {
                    "type": "string"
                },
                "default_vhd_location": {
                    "description": "The default location configured on the Hyper-V node for storing virtual hard disk files.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "default_vhd_storage_container_id": {
                    "description": "Specifies the ID of the Nutanix container if the default location for storing virtual hard disk files on the Hyper-V node happens to be a Nutanix container.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "default_vhd_storage_container_uuid": {
                    "description": "Specifies the UUID of the Nutanix container if the default location for storing virtual hard disk files on the Hyper-V node happens to be a Nutanix container.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "default_vm_location": {
                    "description": "The default location configured on the Hyper-V node for storing virtual machine configuration files.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "default_vm_storage_container_id": {
                    "description": "Specifies the Id of the Nutanix container if the default location for storing virtual machine configuration files on the Hyper-V node happens to be a Nutanix storage container.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "default_vm_storage_container_uuid": {
                    "description": "Specifies the UUID of the Nutanix container if the default location for storing virtual machine configuration files on the Hyper-V node happens to be a Nutanix storage container.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "disk_hardware_configs": {
                    "$ref": "java.util.Map&lt;java.lang.Integer, get.dto.appliance.configuration.DiskHardwareConfigDTO&gt;",
                    "description": "The disk hardware configurations",
                    "typeName": "DEFAULT"
                },
                "dynamic_ring_changing_node": {
                    "$ref": "get.dto.appliance.configuration.NodeDTO"
                },
                "failover_cluster_fqdn": {
                    "description": "The name of the Hyper-V failover cluster that this node is a part of. Applies only if the node runs Hyper-V",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "failover_cluster_node_state": {
                    "description": "If this node runs Hyper-V and is part of a failovercluster, this property specifies the state of the nodein the failover cluster.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpu_driver_version": {
                    "description": "Host driver version of the GPUs.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "has_csr": {
                    "type": "boolean"
                },
                "hba_firmwares_list": {
                    "description": "Specifies the version and model info of the hba, present on the node",
                    "items": {
                        "$ref": "get.dto.appliance.configuration.NodeDTO$HbaFirmware"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "health_summary": {
                    "$ref": "get.dto.health.check.HealthSummaryDTO"
                },
                "host_gpus": {
                    "description": "The host GPUs.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "host_in_maintenance_mode": {
                    "type": "boolean"
                },
                "host_maintenance_mode_reason": {
                    "type": "string"
                },
                "host_nic_ids": {
                    "description": "The host nic ids",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "hypervisor_address": {
                    "type": "string"
                },
                "hypervisor_full_name": {
                    "type": "string"
                },
                "hypervisor_key": {
                    "type": "string"
                },
                "hypervisor_password": {
                    "type": "string"
                },
                "hypervisor_state": {
                    "type": "string"
                },
                "hypervisor_type": {
                    "type": "string"
                },
                "hypervisor_username": {
                    "type": "string"
                },
                "ipmi_address": {
                    "type": "string"
                },
                "ipmi_password": {
                    "type": "string"
                },
                "ipmi_username": {
                    "type": "string"
                },
                "is_degraded": {
                    "type": "boolean"
                },
                "key_management_device_to_certificate_status": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;"
                },
                "management_server_name": {
                    "type": "string"
                },
                "memory_capacity_in_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "metadata_store_status": {
                    "type": "string"
                },
                "metadata_store_status_message": {
                    "type": "string"
                },
                "monitored": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "num_cpu_cores": {
                    "format": "int64",
                    "type": "integer"
                },
                "num_cpu_sockets": {
                    "format": "int64",
                    "type": "integer"
                },
                "num_cpu_threads": {
                    "format": "int64",
                    "type": "integer"
                },
                "num_v_ms": {
                    "format": "int64",
                    "type": "integer"
                },
                "oplog_disk_pct": {
                    "format": "float",
                    "type": "number"
                },
                "oplog_disk_size": {
                    "format": "int64",
                    "type": "integer"
                },
                "position": {
                    "$ref": "get.dto.appliance.configuration.NodePositionDTO"
                },
                "rdma_backplane_ips": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "reboot_pending": {
                    "description": "If this node runs Hyper-V, this property indicates that a reboot is pending for the earlier initiated domain joining to be complete.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "removal_status": {
                    "items": {
                        "enum": [
                            "NA",
                            "AWAITING_CONFIG_DATA_MIGRATION",
                            "AWAITING_DATA_MIGRATION",
                            "AWAITING_HOST_EVACUATION",
                            "AWAITING_CLUSTER_RESTART"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "serial": {
                    "type": "string"
                },
                "service_v_m_external_i_p": {
                    "type": "string"
                },
                "service_v_m_id": {
                    "type": "string"
                },
                "state": {
                    "enum": [
                        "NEW",
                        "NORMAL",
                        "MARKED_FOR_REMOVAL_BUT_NOT_DETACHABLE",
                        "DETACHABLE"
                    ],
                    "type": "string"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "usage_stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "uuid": {
                    "type": "string"
                },
                "vzone_name": {
                    "type": "string"
                }
            }
        },
        "get.dto.appliance.configuration.NodeDTO$HbaFirmware": {
            "id": "get.dto.appliance.configuration.NodeDTO$HbaFirmware",
            "required": [],
            "properties": {
                "hba_model": {
                    "description": "Specifies the model of hba, present on the node",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "hba_version": {
                    "description": "Specifies the version of hba, present on the node",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.appliance.configuration.NodePositionDTO": {
            "id": "get.dto.appliance.configuration.NodePositionDTO",
            "required": [],
            "properties": {
                "name": {
                    "type": "string"
                },
                "ordinal": {
                    "format": "int32",
                    "type": "integer"
                },
                "physical_position": {
                    "enum": [
                        "C",
                        "L",
                        "R",
                        "TL",
                        "TR",
                        "BL",
                        "BR"
                    ],
                    "type": "string"
                }
            }
        },
        "get.dto.health.check.EntityTypeHealthCheckSummaryDTO": {
            "id": "get.dto.health.check.EntityTypeHealthCheckSummaryDTO",
            "required": [],
            "properties": {
                "checks_in_error": {
                    "$ref": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;"
                },
                "detailed_check_summary": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;"
                }
            }
        },
        "get.dto.health.check.HealthSummaryDTO": {
            "id": "get.dto.health.check.HealthSummaryDTO",
            "required": [],
            "properties": {
                "entity_type_summaries": {
                    "items": {
                        "$ref": "get.dto.health.check.EntityTypeHealthCheckSummaryDTO"
                    },
                    "type": "array"
                },
                "health_check_summaries": {
                    "$ref": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;"
                },
                "health_status": {
                    "enum": [
                        "Critical",
                        "Warning",
                        "Good",
                        "Unknown",
                        "Error"
                    ],
                    "type": "string"
                }
            }
        },
        "get.dto.uhura.GPUConfigDTO": {
            "id": "get.dto.uhura.GPUConfigDTO",
            "required": [],
            "properties": {
                "assignable": {
                    "description": "Whether the GPU can be assigned to a Virtual Machine.",
                    "notes": "Whether the GPU can be assigned to a Virtual Machine.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "device_id": {
                    "description": "Device ID of the GPU resource.",
                    "format": "int32",
                    "notes": "Device ID of the GPU resource.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "device_name": {
                    "description": "Vendor device name of the GPU resource.",
                    "notes": "Vendor device name of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "fraction": {
                    "description": "Fraction of the physical GPU. Only applicable for a vGPU instance.",
                    "format": "int32",
                    "notes": "Fraction of the physical GPU. Only applicable for a vGPU instance.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "frame_buffer_size_bytes": {
                    "description": "GPU framebuffer size in bytes.",
                    "format": "int64",
                    "notes": "GPU framebuffer size.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "gpu_mode": {
                    "description": "Current mode of the physical GPU. Not valid on vGPU resources.",
                    "enum": [
                        "UNUSED",
                        "USED_FOR_PASSTHROUGH",
                        "USED_FOR_VIRTUAL"
                    ],
                    "notes": "Current mode of the physical GPU.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpu_profile": {
                    "description": "Profile of the GPU.",
                    "notes": "Profile of the GPU.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpu_type": {
                    "description": "Type of the GPU resource.",
                    "enum": [
                        "PASS_THROUGH_GRAPHICS",
                        "PASS_THROUGH_COMPUTE",
                        "VIRTUAL"
                    ],
                    "notes": "Type of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpu_vendor": {
                    "description": "Vendor of the GPU resource.",
                    "enum": [
                        "NVIDIA",
                        "INTEL",
                        "AMD"
                    ],
                    "notes": "Vendor of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "guest_driver_version": {
                    "description": "Last determined guest driver version.",
                    "notes": "Last determined guest driver version.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "in_use": {
                    "description": "Whether the GPU resource is in use or not.",
                    "notes": "Whether the GPU resource is in use or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "licenses": {
                    "description": "List of license types associated with this GPU.",
                    "items": {
                        "type": "string"
                    },
                    "notes": "List of license types.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "max_resolution": {
                    "description": "Maximum resolution per display heads.",
                    "notes": "Maximum resolution per display heads.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "num_virtual_display_heads": {
                    "description": "Number of supported virtual display heads.",
                    "format": "int32",
                    "notes": "Number of supported virtual display heads.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "numa_node": {
                    "description": "The NUMA node where the GPU belongs to.",
                    "format": "int32",
                    "notes": "The NUMA node where the GPU belongs to.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "sbdf": {
                    "description": "Unique device information for the GPU resource.",
                    "notes": "Unique device information for the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vm_uuids": {
                    "description": "List of UUIDs of the Virtual Machines where the GPU resource is assigned.",
                    "items": {
                        "type": "string"
                    },
                    "notes": "List of UUIDs of the Virtual Machines where the GPU resource is assigned.",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.uhura.HostGPUDTO": {
            "id": "get.dto.uhura.HostGPUDTO",
            "required": [],
            "properties": {
                "cluster_name": {
                    "description": "Name of the cluster where the GPU resource is present.",
                    "notes": "Name of the cluster where the GPU resource is present.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "cluster_uuid": {
                    "description": "UUID of the cluster where the GPU resource is present.",
                    "notes": "UUID of the cluster where the GPU resource is present.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpu_config": {
                    "$ref": "get.dto.uhura.GPUConfigDTO",
                    "description": "Configuration of the GPU resource.",
                    "notes": "Configuration of the GPU resource.",
                    "typeName": "DEFAULT"
                },
                "id": {
                    "description": "ID of the GPU resource.",
                    "notes": "ID of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "node_id": {
                    "description": "Id of the node where the GPU resource is present.",
                    "notes": "Id of the node where the GPU resource is present.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "node_uuid": {
                    "description": "UUID of the node where the GPU resource is present.",
                    "notes": "UUID of the node where the GPU resource is present.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "num_vgpus_allocated": {
                    "description": "Number of vGPUs allocated.",
                    "format": "int32",
                    "notes": "Number of vGPUs allocated.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "UUID of the GPU resource.",
                    "notes": "UUID of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.uhura.VirtualGPUProfileDTO": {
            "id": "get.dto.uhura.VirtualGPUProfileDTO",
            "required": [],
            "properties": {
                "allocated_vm_uuids": {
                    "description": "List of UUIDs of virtual machines that have been allocated a GPU belonging to this profile.",
                    "items": {
                        "type": "string"
                    },
                    "notes": "List of UUIDs of virtual machines that have been allocated a GPU belonging to this profile.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "gpu_config": {
                    "$ref": "get.dto.uhura.GPUConfigDTO",
                    "description": "Configuration of the GPU resource.",
                    "notes": "Configuration of the GPU resource.",
                    "typeName": "DEFAULT"
                }
            }
        },
        "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;": {
            "id": "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.Integer, get.dto.appliance.configuration.DiskHardwareConfigDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.Integer, get.dto.appliance.configuration.DiskHardwareConfigDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.lang.String&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.lang.String&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;",
            "required": [],
            "properties": {}
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/PrismGateway/services/rest/v2.0",
    "resourcePath": "/http_proxies",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/http_proxies/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of HTTP Proxies.",
                    "notes": "Get the list of HTTP Proxies configured in the cluster.",
                    "type": "get.base.EntityCollection&lt;get.dto.appliance.configuration.HttpProxyDTO&gt;",
                    "nickname": "getHttpProxies",
                    "parameters": [],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PATCH",
                    "summary": "Modify an HTTP Proxy.",
                    "notes": "Modify the specified HTTP Proxy.",
                    "type": "patch.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "patchHttpProxy",
                    "parameters": [
                        {
                            "description": "An HTTP Proxy instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "patch.dto.RequestDTO&lt;patch.dto.appliance.configuration.HttpProxyDTO&gt;"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Add an HTTP Proxy.",
                    "notes": "Add an HTTP Proxy to the cluster.",
                    "type": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "addHttpProxy",
                    "parameters": [
                        {
                            "description": "An HTTP Proxy instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.appliance.configuration.HttpProxyDTO"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Update an HTTP Proxy.",
                    "notes": "Update the specified HTTP Proxy.",
                    "type": "update.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "editHttpProxy",
                    "parameters": [
                        {
                            "description": "An HTTP Proxy instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.appliance.configuration.HttpProxyDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/http_proxies/{name}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete an HTTP Proxy.",
                    "notes": "Delete an HTTP Proxy with the specified name.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "deleteHttpProxy",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of an HTTP Proxy",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get an HTTP Proxy.",
                    "notes": "Get an HTTP Proxy with the specified name.",
                    "type": "get.dto.appliance.configuration.HttpProxyDTO",
                    "nickname": "getHttpProxy",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of an HTTP Proxy",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "create.dto.appliance.configuration.HttpProxyDTO": {
            "id": "create.dto.appliance.configuration.HttpProxyDTO",
            "description": "http-proxy",
            "required": [
                "name",
                "address",
                "port"
            ],
            "properties": {
                "address": {
                    "description": "Address of the proxy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Proxy name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "password": {
                    "description": "Password for proxy authentication",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "port": {
                    "description": "Port on which proxy is binding",
                    "format": "int32",
                    "maximum": "65536",
                    "minimum": "0",
                    "notes": "Any port number which is in the range 0 - 65536",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "proxy_types": {
                    "description": "Proxy types to send applicable traffic",
                    "items": {
                        "enum": [
                            "HTTP",
                            "HTTPS",
                            "SOCKS"
                        ],
                        "type": "string"
                    },
                    "notes": "Proxy types to send applicable traffic. Supports 'http' 'https', and 'socks' proxy configuration.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "username": {
                    "description": "Username for proxy authentication",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.appliance.configuration.HttpProxyDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.appliance.configuration.HttpProxyDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.appliance.configuration.HttpProxyDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.dto.appliance.configuration.HttpProxyDTO": {
            "id": "get.dto.appliance.configuration.HttpProxyDTO",
            "description": "http-proxy",
            "required": [],
            "properties": {
                "address": {
                    "description": "Address of the proxy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Proxy name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "password": {
                    "description": "Password for proxy authentication",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "port": {
                    "description": "Port on which proxy is binding",
                    "format": "int32",
                    "maximum": "65536",
                    "minimum": "0",
                    "notes": "Any port number which is in the range 0 - 65536",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "proxy_types": {
                    "description": "Proxy types to send applicable traffic",
                    "items": {
                        "enum": [
                            "HTTP",
                            "HTTPS",
                            "SOCKS"
                        ],
                        "type": "string"
                    },
                    "notes": "Proxy types to send applicable traffic. Supports 'http' 'https', and 'socks' proxy configuration.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "username": {
                    "description": "Username for proxy authentication",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "patch.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "patch.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "patch.dto.RequestDTO&lt;patch.dto.appliance.configuration.HttpProxyDTO&gt;": {
            "id": "patch.dto.RequestDTO&lt;patch.dto.appliance.configuration.HttpProxyDTO&gt;",
            "required": [],
            "properties": {
                "cluster_uuid": {
                    "type": "string"
                },
                "generic_d_t_o": {
                    "$ref": "patch.dto.appliance.configuration.HttpProxyDTO"
                },
                "operation": {
                    "type": "string"
                }
            }
        },
        "patch.dto.appliance.configuration.HttpProxyDTO": {
            "id": "patch.dto.appliance.configuration.HttpProxyDTO",
            "description": "http-proxy",
            "required": [
                "name"
            ],
            "properties": {
                "address": {
                    "description": "Address of the proxy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Proxy name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "password": {
                    "description": "Password for proxy authentication",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "port": {
                    "description": "Port on which proxy is binding",
                    "format": "int32",
                    "maximum": "65536",
                    "minimum": "0",
                    "notes": "Any port number which is in the range 0 - 65536",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "proxy_types": {
                    "description": "Proxy types to send applicable traffic",
                    "items": {
                        "enum": [
                            "HTTP",
                            "HTTPS",
                            "SOCKS"
                        ],
                        "type": "string"
                    },
                    "notes": "Proxy types to send applicable traffic. Supports 'http' 'https', and 'socks' proxy configuration.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "username": {
                    "description": "Username for proxy authentication",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "update.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "update.dto.appliance.configuration.HttpProxyDTO": {
            "id": "update.dto.appliance.configuration.HttpProxyDTO",
            "description": "http-proxy",
            "required": [
                "name",
                "address",
                "port"
            ],
            "properties": {
                "address": {
                    "description": "Address of the proxy",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Proxy name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "password": {
                    "description": "Password for proxy authentication",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "port": {
                    "description": "Port on which proxy is binding",
                    "format": "int32",
                    "maximum": "65536",
                    "minimum": "0",
                    "notes": "Any port number which is in the range 0 - 65536",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "proxy_types": {
                    "description": "Proxy types to send applicable traffic",
                    "items": {
                        "enum": [
                            "HTTP",
                            "HTTPS",
                            "SOCKS"
                        ],
                        "type": "string"
                    },
                    "notes": "Proxy types to send applicable traffic. Supports 'http' 'https', and 'socks' proxy configuration.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "username": {
                    "description": "Username for proxy authentication",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/api/nutanix/v2.0",
    "resourcePath": "/images",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/images/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of Disk Images.",
                    "notes": "Get the list of Images",
                    "type": "get.base.EntityCollection&lt;get.dto.acropolis.ImageInfoDTO&gt;",
                    "nickname": "getImages",
                    "parameters": [
                        {
                            "name": "include_vm_disk_sizes",
                            "description": "Include VmDisk sizes",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Create a Disk Image.",
                    "notes": "Create a Image with specified configuration. <br/><br/>There are two modes of creation, one mode you either provide some source (URL, vmdisk, or uploaded file) or you just create the metadata for the image. <br/>If a UUID is specified for the Image, this operation will be idempotent. <br/><br/>This is an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "createImage",
                    "parameters": [
                        {
                            "description": "Image Creation Specs",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.acropolis.ImageSpecDTO"
                        },
                        {
                            "name": "X-NTNX-PC-UUID",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "header",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/images/{uuid}/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete a Disk Image.",
                    "notes": "Delete a Disk Image. <br/><br/>This is an idempotent operation.<br/><br/>The logical timestamp can optionally be provided for consistency. If a logical timestamp is specified, then this operation will be rejected if the logical timestamp specified is not the value of the Image logical timestamp. The logical timestamp can be obtained from the Image Info object. <br/><br/>This is also an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "delete.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "deleteImage",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Id of the Image",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "logical_timestamp",
                            "description": "Logical timestamp for synchronized delete",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "X-NTNX-PC-UUID",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "header",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get details of a specific Image based on the given Id.",
                    "notes": "Get details of a specific Disk Image based on the given Id.",
                    "type": "get.dto.acropolis.ImageInfoDTO",
                    "nickname": "getImage",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Id of the Image",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "include_vm_disk_sizes",
                            "description": "Include VmDisk size",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Update a Disk Image.",
                    "notes": "Update a Disk Image. <br/><br/>Fields that are not set or are not specified are ignored.<br/><br/>If an Image is already in ACTIVE state then its source can't be updated. But you can still update the image name, image type and image annotation.<br/><br/>If a logical timestamp is specified, then this operation will be rejected if the logical timestamp specified is not the value of the Image logical timestamp. The logical timestamp can be obtained from the Image object.",
                    "type": "update.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "updateImage",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Id of the Disk Image",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Disk Image Update Info",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.acropolis.ImageSpecDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "create.dto.acropolis.ImageImportSpecDTO": {
            "id": "create.dto.acropolis.ImageImportSpecDTO",
            "required": [],
            "properties": {
                "checksum": {
                    "description": "The Checksum in bytes.",
                    "notes": "The Checksum of the image.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "checksum_type": {
                    "description": "The type of Checksum to be used for the Image. Possible values are \"SHA_256\" and \"SHA_1\".",
                    "enum": [
                        "SHA_256",
                        "SHA_1"
                    ],
                    "notes": "The Checksum type of the image.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "storage_container_id": {
                    "description": "ID of a Storage Container which will contain the newly created Image. Storage container UUID, ID, or Name must be provided.",
                    "format": "int64",
                    "notes": "ID of a Storage Container which will contain the newly created Image.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "storage_container_name": {
                    "description": "Name of a Storage Container which will contain the newly created Image. Storage container UUID, ID, or Name must be provided.",
                    "notes": "Name of a Storage Container which will contain the newly created Image.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "description": "UUID of a Storage Container which will contain the newly created Image. Storage container UUID, ID, or Name must be provided.",
                    "notes": "UUID of a Storage Container which will contain the newly created Image.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "url": {
                    "description": "A string describing the source URL for the Image. Note that the source URL can point to an NFS or HTTP target. NFS URLs should look like: nfs://<source address>/<path to file>",
                    "notes": "A string describing the source URL for the Image.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.ImageSpecDTO": {
            "id": "create.dto.acropolis.ImageSpecDTO",
            "required": [],
            "properties": {
                "annotation": {
                    "description": "A string describing the Image.",
                    "notes": "A string describing the Image.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "image_import_spec": {
                    "$ref": "create.dto.acropolis.ImageImportSpecDTO",
                    "description": "The spec for the imported image. Either this or the VMDiskSpecCloneDTO needs to be specified",
                    "notes": "The spec for the imported image",
                    "typeName": "DEFAULT"
                },
                "image_type": {
                    "description": "The Image type specifies whether its a Disk image or ISO image. Possible values are \"disk_image\" and \"iso_image\".",
                    "enum": [
                        "DISK_IMAGE",
                        "ISO_IMAGE"
                    ],
                    "notes": "The Image type.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "The Image's human readable name.",
                    "notes": "The Image's human readable name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "A version 4 UUID that the client may specify for idempotence.",
                    "notes": "A version 4 UUID that the client may specify for idempotence.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vm_disk_clone_spec": {
                    "$ref": "create.dto.uhura.VmDiskCloneDTO",
                    "description": "The spec for the VMDisk to be cloned. Either this or the ImageImportSpecDTO needs to be specified",
                    "notes": "The spec for the VMDisk to be cloned",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.ReturnValueDTO$TaskIdDTO": {
            "id": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
            "required": [],
            "properties": {
                "task_uuid": {
                    "description": "UUID of the task.",
                    "notes": "UUID of the task.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.VMDiskAddressDTO": {
            "id": "create.dto.acropolis.VMDiskAddressDTO",
            "required": [],
            "properties": {
                "device_bus": {
                    "description": "The device bus for the virtual disk device.Possible values are SCSI, IDE and PCI. Along with this the deviceIndex is used to specify a vdisk address. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "enum": [
                        "SCSI",
                        "IDE",
                        "PCI",
                        "SATA",
                        "SPAPR"
                    ],
                    "notes": "The device bus for the virtual disk device.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "device_index": {
                    "description": "Index of the device on the adapter type. If left unspecified, the system will allocate the next available slot on the default bus.",
                    "format": "int32",
                    "notes": "Index of the device on the adapter type.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "ndfs_filepath": {
                    "description": "NDFS path to existing virtual disk. This field will not be set when this message is used in a create mode.When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "NDFS path to existing virtual disk.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vmdisk_uuid": {
                    "description": "Virtual disk identifier. This field will not be set when this message is used in a create mode. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "Virtual disk identifier.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "volume_group_uuid": {
                    "type": "string"
                }
            }
        },
        "create.dto.uhura.VmDiskCloneDTO": {
            "id": "create.dto.uhura.VmDiskCloneDTO",
            "required": [
                "disk_address"
            ],
            "properties": {
                "disk_address": {
                    "$ref": "create.dto.acropolis.VMDiskAddressDTO",
                    "description": "Address of the source disk or image from which to clone. Disk address is represented by vmdisk_uuid or ndfs_filepath.",
                    "notes": "Address of the source disk or image from which to clone.",
                    "typeName": "DEFAULT"
                },
                "minimum_size": {
                    "description": "The minimum size of the resulting clone in bytes. This should only be specified if 'vmdisk_uuid' is specified.",
                    "format": "int64",
                    "notes": "The minimum size of the resulting clone in bytes.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "snapshot_group_uuid": {
                    "description": "UUID of the snapshot consistency group from which to clone a snapshot vmdisk.",
                    "notes": "UUID of the snapshot consistency group from which to clone a snapshot vmdisk.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "storage_container_uuid": {
                    "description": "The Uuid of the storage container in which the specified image or vmdisk is stored. If the source is a vmdisk, this field is recommended, but optional. If the source is a snapshot vmdisk, this field is required. If the source is an absolute image path, this field is prohibited. If the source is a relative image path, this field is required.",
                    "notes": "The Uuid of the storage container in which the specified image or vmdisk is stored.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "delete.dto.acropolis.ReturnValueDTO$TaskIdDTO": {
            "id": "delete.dto.acropolis.ReturnValueDTO$TaskIdDTO",
            "required": [],
            "properties": {
                "task_uuid": {
                    "description": "UUID of the task.",
                    "notes": "UUID of the task.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.acropolis.ImageInfoDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.acropolis.ImageInfoDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.acropolis.ImageInfoDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.dto.acropolis.ImageInfoDTO": {
            "id": "get.dto.acropolis.ImageInfoDTO",
            "required": [],
            "properties": {
                "annotation": {
                    "description": "A string describing the Image.",
                    "notes": "A string describing the Image.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "checksum": {
                    "description": "The Checksum in bytes.",
                    "notes": "The Checksum of the image.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "checksum_type": {
                    "description": "The type of Checksum to be used for the Image. Possible values are \"SHA_256\" and \"SHA_1\".",
                    "enum": [
                        "SHA_256",
                        "SHA_1"
                    ],
                    "notes": "The Checksum type of the image.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "created_time_in_usecs": {
                    "description": "The epoch time in microseconds when this image was created.",
                    "format": "int64",
                    "notes": "The Image creation time.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "deleted": {
                    "description": "Indicates whether the image has been deleted or not.",
                    "notes": "Indicates whether the image has been deleted or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "image_state": {
                    "description": "The Image state specifies whether its usable or not. Possible values are \"ACTIVE\" and \"INACTIVE\".",
                    "enum": [
                        "ACTIVE",
                        "INACTIVE"
                    ],
                    "notes": "The Image state.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "image_type": {
                    "description": "The Image type specifies whether its a disk image or ISO image. Possible values are \"DISK_IMAGE\" and \"ISO_IMAGE\".",
                    "enum": [
                        "DISK_IMAGE",
                        "ISO_IMAGE"
                    ],
                    "notes": "The Image type.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "logical_timestamp": {
                    "description": "The Image logical timestamp. This can be used as input to other Image related APIs for consistency",
                    "format": "int64",
                    "notes": "The Image logical timestamp.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "A string depicting the Image name.",
                    "notes": "A string depicting the Image name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "storage_container_id": {
                    "description": "An ID identifying the container the Image resides.",
                    "format": "int64",
                    "notes": "An ID identifying the container in which the Image resides.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "description": "A version 4 UUID identifying the container where the Image resides.",
                    "notes": "A version 4 UUID identifying the container in which where the Image resides.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "updated_time_in_usecs": {
                    "description": "The epoch time in microseconds when this image was updated.",
                    "format": "int64",
                    "notes": "The Image update time.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "A version 4 UUID identifying the Image.",
                    "notes": "A version 4 UUID identifying the Image.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vm_disk_id": {
                    "description": "A version 4 UUID identifying the backing VMDisk.",
                    "notes": "A version 4 UUID identifying the backing VMDisk.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vm_disk_size": {
                    "description": "This is only filled in on demand whenever an image is fetched and the size is requested.",
                    "format": "int64",
                    "notes": "The Image's VMDisk size in bytes.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.acropolis.ImageImportSpecDTO": {
            "id": "update.dto.acropolis.ImageImportSpecDTO",
            "required": [],
            "properties": {
                "checksum": {
                    "description": "The Checksum in bytes.",
                    "notes": "The Checksum of the image.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "checksum_type": {
                    "description": "The type of Checksum to be used for the Image. Possible values are \"SHA_256\" and \"SHA_1\".",
                    "enum": [
                        "SHA_256",
                        "SHA_1"
                    ],
                    "notes": "The Checksum type of the image.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "storage_container_id": {
                    "description": "ID of a Storage Container which will contain the newly created Image. Storage container UUID, ID, or Name must be provided.",
                    "format": "int64",
                    "notes": "ID of a Storage Container which will contain the newly created Image.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "storage_container_name": {
                    "description": "Name of a Storage Container which will contain the newly created Image. Storage container UUID, ID, or Name must be provided.",
                    "notes": "Name of a Storage Container which will contain the newly created Image.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "description": "UUID of a Storage Container which will contain the newly created Image. Storage container UUID, ID, or Name must be provided.",
                    "notes": "UUID of a Storage Container which will contain the newly created Image.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "url": {
                    "description": "A string describing the source URL for the Image. Note that the source URL can point to an NFS or HTTP target. NFS URLs should look like: nfs://<source address>/<path to file>",
                    "notes": "A string describing the source URL for the Image.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.acropolis.ImageSpecDTO": {
            "id": "update.dto.acropolis.ImageSpecDTO",
            "required": [],
            "properties": {
                "annotation": {
                    "description": "A string describing the Image.",
                    "notes": "A string describing the Image.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "image_import_spec": {
                    "$ref": "update.dto.acropolis.ImageImportSpecDTO",
                    "description": "The spec for the imported image. Either this or the VMDiskSpecCloneDTO needs to be specified",
                    "notes": "The spec for the imported image",
                    "typeName": "DEFAULT"
                },
                "image_type": {
                    "description": "The Image type specifies whether its a Disk image or ISO image. Possible values are \"disk_image\" and \"iso_image\".",
                    "enum": [
                        "DISK_IMAGE",
                        "ISO_IMAGE"
                    ],
                    "notes": "The Image type.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "logical_timestamp": {
                    "description": "Logical timestamp specified for consistency. This can be obtained from the Image Info object.",
                    "format": "int64",
                    "notes": "Logical timestamp specified for consistency.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "The Image's human readable name.",
                    "notes": "The Image's human readable name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vm_disk_clone_spec": {
                    "$ref": "update.dto.uhura.VmDiskCloneDTO",
                    "description": "The spec for the VMDisk to be cloned. Either this or the ImageImportSpecDTO needs to be specified",
                    "notes": "The spec for the VMDisk to be cloned",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.acropolis.ReturnValueDTO$TaskIdDTO": {
            "id": "update.dto.acropolis.ReturnValueDTO$TaskIdDTO",
            "required": [],
            "properties": {
                "task_uuid": {
                    "description": "UUID of the task.",
                    "notes": "UUID of the task.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.acropolis.VMDiskAddressDTO": {
            "id": "update.dto.acropolis.VMDiskAddressDTO",
            "required": [],
            "properties": {
                "device_bus": {
                    "description": "The device bus for the virtual disk device.Possible values are SCSI, IDE and PCI. Along with this the deviceIndex is used to specify a vdisk address. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "enum": [
                        "SCSI",
                        "IDE",
                        "PCI",
                        "SATA",
                        "SPAPR"
                    ],
                    "notes": "The device bus for the virtual disk device.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "device_index": {
                    "description": "Index of the device on the adapter type. If left unspecified, the system will allocate the next available slot on the default bus.",
                    "format": "int32",
                    "notes": "Index of the device on the adapter type.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "ndfs_filepath": {
                    "description": "NDFS path to existing virtual disk. This field will not be set when this message is used in a create mode.When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "NDFS path to existing virtual disk.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vmdisk_uuid": {
                    "description": "Virtual disk identifier. This field will not be set when this message is used in a create mode. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "Virtual disk identifier.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "volume_group_uuid": {
                    "type": "string"
                }
            }
        },
        "update.dto.uhura.VmDiskCloneDTO": {
            "id": "update.dto.uhura.VmDiskCloneDTO",
            "required": [],
            "properties": {
                "disk_address": {
                    "$ref": "update.dto.acropolis.VMDiskAddressDTO",
                    "description": "Address of the source disk or image from which to clone. Disk address is represented by vmdisk_uuid or ndfs_filepath.",
                    "notes": "Address of the source disk or image from which to clone.",
                    "typeName": "DEFAULT"
                },
                "minimum_size": {
                    "description": "The minimum size of the resulting clone in bytes. This should only be specified if 'vmdisk_uuid' is specified.",
                    "format": "int64",
                    "notes": "The minimum size of the resulting clone in bytes.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "snapshot_group_uuid": {
                    "description": "UUID of the snapshot consistency group from which to clone a snapshot vmdisk.",
                    "notes": "UUID of the snapshot consistency group from which to clone a snapshot vmdisk.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "storage_container_uuid": {
                    "description": "The Uuid of the storage container in which the specified image or vmdisk is stored. If the source is a vmdisk, this field is recommended, but optional. If the source is a snapshot vmdisk, this field is required. If the source is an absolute image path, this field is prohibited. If the source is a relative image path, this field is required.",
                    "notes": "The Uuid of the storage container in which the specified image or vmdisk is stored.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/api/nutanix/v2.0",
    "resourcePath": "/iscsi_clients",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/iscsi_clients/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Retrieve Iscsi Client configuration",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.acropolis.volumegroups.IscsiClientDTO&gt;",
                    "nickname": "getIscsiClients",
                    "parameters": [],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/iscsi_clients/{uuid}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Retrieve Iscsi Client configuration",
                    "notes": "",
                    "type": "get.dto.acropolis.volumegroups.IscsiClientDTO",
                    "nickname": "getIscsiClient",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Unique identifier for the iscsi client",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Modify an existing Iscsi Client configuration",
                    "notes": "",
                    "type": "update.dto.acropolis.volumegroups.IscsiClientDTO",
                    "nickname": "updateVolumeGroup",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of the Iscsi client",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Update Iscsi client",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.acropolis.volumegroups.IscsiClientDTO"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                }
            ]
        }
    ],
    "models": {
        "get.base.EntityCollection&lt;get.dto.acropolis.volumegroups.IscsiClientDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.acropolis.volumegroups.IscsiClientDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.acropolis.volumegroups.IscsiClientDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.dto.acropolis.volumegroups.ClientAuthenticationDTO": {
            "id": "get.dto.acropolis.volumegroups.ClientAuthenticationDTO",
            "required": [],
            "properties": {
                "auth_type": {
                    "description": "Type of the authentication",
                    "enum": [
                        "CHAP",
                        "NONE"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "password": {
                    "description": "Password of the supported authentication type",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.acropolis.volumegroups.IscsiClientDTO": {
            "id": "get.dto.acropolis.volumegroups.IscsiClientDTO",
            "required": [],
            "properties": {
                "client_address": {
                    "description": "Unique identifier for the client, it can be either iqn or ip address",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "enabled_authentications": {
                    "description": "List of supported authentication types",
                    "items": {
                        "$ref": "get.dto.acropolis.volumegroups.ClientAuthenticationDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "Uuid of the iscsi client",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "update.dto.acropolis.volumegroups.ClientAuthenticationDTO": {
            "id": "update.dto.acropolis.volumegroups.ClientAuthenticationDTO",
            "required": [],
            "properties": {
                "auth_type": {
                    "description": "Type of the authentication",
                    "enum": [
                        "CHAP",
                        "NONE"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "password": {
                    "description": "Password of the supported authentication type",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.acropolis.volumegroups.IscsiClientDTO": {
            "id": "update.dto.acropolis.volumegroups.IscsiClientDTO",
            "required": [
                "client_address"
            ],
            "properties": {
                "client_address": {
                    "description": "Unique identifier for the client, it can be either iqn or ip address",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "enabled_authentications": {
                    "description": "List of supported authentication types",
                    "items": {
                        "$ref": "update.dto.acropolis.volumegroups.ClientAuthenticationDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "Uuid of the iscsi client",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/api/nutanix/v2.0",
    "resourcePath": "/networks",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/networks/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get list of networks.",
                    "notes": "Get list of networks configured in the cluster.",
                    "type": "get.base.EntityCollection&lt;get.dto.acropolis.NetworkConfigDTO&gt;",
                    "nickname": "getNetworks",
                    "parameters": [],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Create a network.",
                    "notes": "Create a network with specified L2 and L3 configuration. <br/><br/>Each VM network interface is bound to a virtual network (see POST /vms/nic_create/). While a virtual network is in use by a VM, it cannot be modified or deleted. <br/><br/>Currently, the only supported L2 type is VLAN. Each virtual network is bound to a single VLAN, and trunking VLANs to a virtual network is not supported. A virtual network on VLAN 66 would be named 'vlan.66'. Each virtual network maps to a hypervisor-specific default vswitch. On KVM, this is 'br0'. To use a different vswitch (e.g., with different uplinks), you can append the vswitch name to the network identifier. For example, 'vlan.66.br1'. This virtual switch should exists on all hosts, and the physical switch ports for the vswitch uplinks are properly configured to receive VLAN-tagged traffic. <br/><br/>On hypervisors where it is supported, a virtual network may have an IPv4 configuration. Such a network is a 'managed L3' network. A network without a IPv4 configuration is an 'unmanaged L3' network. A network must be configured as 'managed L3' or 'unmanaged L3' at creation time. It is not possible to convert one to the other. A particular L2 (i.e., a particular VLAN) may have at most one managed network defined at a time. <br/><br/>To create a managed network, the user specifies the 'ipConfig'. This consists of an IPv4 default gateway address and subnet in CIDR notation. The user may optionally specify a DHCP server address, to avoid conflict with other services on the network. By default, the last available host address in the subnet is used. Every virtual NIC on a managed network must be assigned an IPv4 address at NIC creation time. <br/><br/>All DHCP traffic on the network will be rerouted to an internal DHCP server, who hands out configured IPv4 addresses. DHCP traffic on the physical network will not reach the virtual network, and vice versa. A managed network may have zero or more non-overlapping DHCP pools. Each pool must be entirely contained within the network's managed subnet. In the absence of a DHCP pool, the user must specify an IPv4 address when creating a virtual network adapter (see POST /vms/nic_create). If the managed network has a DHCP pool, the user need not provide an address; the NIC will automatically be assigned an IPv4 address from one of the pools at creation time, provided at least one address is available. Addresses in the DHCP pool are not reserved. That is, a user may manually specify an address belonging to the pool when creating a virtual adapter.",
                    "type": "create.dto.acropolis.ReturnValueDTO$NetworkIdDTO",
                    "nickname": "createNetwork",
                    "parameters": [
                        {
                            "description": "Network config info",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.acropolis.NetworkConfigDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/networks/{uuid}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete a network.",
                    "notes": "Delete a network. <br/><br/>A network cannot be deleted while Virtual Machines are still attached to it. <br/><br/>The logical timestamp can optionally be provided for consistency. If a logical timestamp is specified, then this operation will be rejected if the logical timestamp specified is not the value of the virtual network logical timestamp. The logical timestamp can be obtained from the virtual network object.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "deleteNetwork",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Id of the network",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "logical_timestamp",
                            "description": "Logical timestamp for synchronized delete",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get info of a network.",
                    "notes": "Get info of a network in the cluster.",
                    "type": "get.dto.acropolis.NetworkConfigDTO",
                    "nickname": "getNetwork",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of the network",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Update a network.",
                    "notes": "Update a network. <br/><br/>The logical timestamp can optionally be provided for consistency. If a logical timestamp is specified, then this operation will be rejected if the logical timestamp specified is not the value of the virtual network logical timestamp. The logical timestamp can be obtained from the virtual network object.",
                    "type": "update.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "updateNetwork",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of the network",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Updated network spec",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.acropolis.NetworkConfigDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/networks/{uuid}/addresses",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get IP addresses assigned in the specified managed network.",
                    "notes": "Get IP addresses assigned in the specified managed network.",
                    "type": "get.base.EntityCollection&lt;get.dto.acropolis.AddressAssignmentDTO&gt;",
                    "nickname": "getNetworkAddressTable",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Id of the network",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/networks/{uuid}/blacklist_ip/{ipaddress}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Remove an IP address from the managed network blacklist.",
                    "notes": "Remove an IP address from the blacklist that prevents it from being used by the managed network. <br/><br/>The logical timestamp can optionally be provided for consistency. If a logical timestamp is specified, then this operation will be rejected if the logical timestamp specified is not the value of the virtual network logical timestamp. The logical timestamp can be obtained from the virtual network object.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "unreserveIP",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Id of the network",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "ipaddress",
                            "description": "IP address",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/networks/{uuid}/blacklist_ip_addresses",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Blacklist an IP address from managed network.",
                    "notes": "Blacklist an IP address from being used by a managed network. <br/><br/>A blacklisted IP address cannot be assigned to a VM network adapter. This property may be useful for avoiding conflicts between VMs and other hosts on the physical network. <br/><br/>The logical timestamp can optionally be provided for consistency. If a logical timestamp is specified, then this operation will be rejected if the logical timestamp specified is not the value of the virtual network logical timestamp. The logical timestamp can be obtained from the virtual network object.",
                    "type": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "reserveIP",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Id of the network",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "IP addresses to reserve Comma-separated list of IP addresses.",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.PrimitiveDTO&lt;java.lang.String&gt;"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "create.dto.PrimitiveDTO&lt;java.lang.String&gt;": {
            "id": "create.dto.PrimitiveDTO&lt;java.lang.String&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "create.dto.acropolis.IpConfigDTO": {
            "id": "create.dto.acropolis.IpConfigDTO",
            "required": [
                "network_address",
                "prefix_length"
            ],
            "properties": {
                "default_gateway": {
                    "description": "Default gateway",
                    "notes": "Default gateway",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "dhcp_options": {
                    "$ref": "create.dto.acropolis.IpConfigDTO$DhcpOptions",
                    "description": "Options passed along to client via DHCP. Options that are supported are Domain Name, Domain name servers and Domain search",
                    "notes": "DHCP options",
                    "typeName": "DEFAULT"
                },
                "dhcp_server_address": {
                    "description": "The IP address of the DHCP server",
                    "notes": "The IP address of the DHCP server",
                    "type": "string",
                    "typeName": "IP4_ADDRESS"
                },
                "network_address": {
                    "description": "The network address",
                    "notes": "The network address",
                    "type": "string",
                    "typeName": "IP4_ADDRESS"
                },
                "pool": {
                    "description": "List of IP address pools. Each IP address pool has a start and end address",
                    "items": {
                        "$ref": "create.dto.acropolis.IpConfigDTO$IpPool"
                    },
                    "notes": "List of IP address pools",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "prefix_length": {
                    "description": "Length of network prefix in number of bits",
                    "format": "int32",
                    "notes": "Length of network prefix in number of bits",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.IpConfigDTO$DhcpOptions": {
            "id": "create.dto.acropolis.IpConfigDTO$DhcpOptions",
            "required": [],
            "properties": {
                "boot_file_name": {
                    "description": "The filename that is to be downloaded from the TFTP server",
                    "notes": "Bootfile name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "domain_name": {
                    "description": "Domain name.",
                    "notes": "Domain name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "domain_name_servers": {
                    "description": "Domain name servers to be configured for the network. Consult RFC 2132 for encoding/decoding.",
                    "notes": "Domain name servers.",
                    "type": "string",
                    "typeName": "IP4_ADDRESS_LIST"
                },
                "domain_search": {
                    "description": "Domains to search in the network. Use space as the delimiter.",
                    "notes": "Domain search.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "tftp_server_name": {
                    "description": "The FQDN or IP address of the TFTP server from which the file is to be downloaded.",
                    "notes": "TFTP Server name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.IpConfigDTO$IpPool": {
            "id": "create.dto.acropolis.IpConfigDTO$IpPool",
            "required": [
                "range"
            ],
            "properties": {
                "range": {
                    "description": "Ip pool range with start address and end address. The expected format is \"startIpAddress endIpAddress\"",
                    "notes": "Ip pool range.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.NetworkConfigDTO": {
            "id": "create.dto.acropolis.NetworkConfigDTO",
            "required": [
                "vlan_id"
            ],
            "properties": {
                "annotation": {
                    "description": "The annotation of the network",
                    "notes": "The annotation of the network",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "ip_config": {
                    "$ref": "create.dto.acropolis.IpConfigDTO",
                    "description": "For managed L3 networks, this is the IP configuration.",
                    "notes": "For managed L3 networks, this is the IP configuration.",
                    "typeName": "DEFAULT"
                },
                "logical_timestamp": {
                    "description": "Logical timestamp of the network configuration that may may be provided for consistency.",
                    "format": "int64",
                    "notes": "Logical timestamp of the network.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "The name of the network",
                    "notes": "The name of the network",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "The UUID of the network",
                    "notes": "The UUID of the network",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vlan_id": {
                    "description": "VLAN ID of the bridged network.",
                    "format": "int32",
                    "notes": "VLAN ID of the bridged network.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "vswitch_name": {
                    "description": "The name of the vswitch",
                    "notes": "The name of the vswitch",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.ReturnValueDTO$NetworkIdDTO": {
            "id": "create.dto.acropolis.ReturnValueDTO$NetworkIdDTO",
            "required": [],
            "properties": {
                "network_uuid": {
                    "description": "UUID of the network.",
                    "notes": "UUID of the network.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.acropolis.AddressAssignmentDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.acropolis.AddressAssignmentDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.acropolis.AddressAssignmentDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.acropolis.NetworkConfigDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.acropolis.NetworkConfigDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.acropolis.NetworkConfigDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.dto.acropolis.AddressAssignmentDTO": {
            "id": "get.dto.acropolis.AddressAssignmentDTO",
            "required": [],
            "properties": {
                "deleted": {
                    "description": "Indicates that the assignment has been marked for deletion. If this is set to true, then this assignment is no longer valid and is waiting to be garbage collected.",
                    "notes": "Whether assignment has been marked for deletion.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "entity_uuid": {
                    "description": "The version 4 UUID of the entity which owns this  address assignment",
                    "notes": "The version 4 UUID of the entity which owns this address assignment",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "ip_address": {
                    "description": "The IP address that has been assigned.",
                    "notes": "The IP address that has been assigned.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "mac_address": {
                    "description": "The MAC address that the IP address belongs to",
                    "notes": "The MAC address that the IP address belongs to",
                    "type": "string",
                    "typeName": "MAC_ADDRESS"
                },
                "network_uuid": {
                    "description": "The version 4 UUID of the network. This should not be set in the assignment table.",
                    "notes": "The version 4 UUID of the network",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "overlay_network_id": {
                    "description": "VNI of the overlay network.",
                    "format": "int32",
                    "notes": "VNI of the overlay network.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "type": {
                    "description": "Indicates whether the address has been assigned to a Virtual Machine or has been blacklisted and excluded from allocation or has asigned to an internal component.",
                    "enum": [
                        "VM",
                        "RESERVATION",
                        "INFRASTRUCTURE"
                    ],
                    "notes": "Assignment type of the address.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.acropolis.IpConfigDTO": {
            "id": "get.dto.acropolis.IpConfigDTO",
            "required": [],
            "properties": {
                "default_gateway": {
                    "description": "Default gateway",
                    "notes": "Default gateway",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "dhcp_options": {
                    "$ref": "get.dto.acropolis.IpConfigDTO$DhcpOptions",
                    "description": "Options passed along to client via DHCP. Options that are supported are Domain Name, Domain name servers and Domain search",
                    "notes": "DHCP options",
                    "typeName": "DEFAULT"
                },
                "dhcp_server_address": {
                    "description": "The IP address of the DHCP server",
                    "notes": "The IP address of the DHCP server",
                    "type": "string",
                    "typeName": "IP4_ADDRESS"
                },
                "network_address": {
                    "description": "The network address",
                    "notes": "The network address",
                    "type": "string",
                    "typeName": "IP4_ADDRESS"
                },
                "pool": {
                    "description": "List of IP address pools. Each IP address pool has a start and end address",
                    "items": {
                        "$ref": "get.dto.acropolis.IpConfigDTO$IpPool"
                    },
                    "notes": "List of IP address pools",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "prefix_length": {
                    "description": "Length of network prefix in number of bits",
                    "format": "int32",
                    "notes": "Length of network prefix in number of bits",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.acropolis.IpConfigDTO$DhcpOptions": {
            "id": "get.dto.acropolis.IpConfigDTO$DhcpOptions",
            "required": [],
            "properties": {
                "boot_file_name": {
                    "description": "The filename that is to be downloaded from the TFTP server",
                    "notes": "Bootfile name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "domain_name": {
                    "description": "Domain name.",
                    "notes": "Domain name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "domain_name_servers": {
                    "description": "Domain name servers to be configured for the network. Consult RFC 2132 for encoding/decoding.",
                    "notes": "Domain name servers.",
                    "type": "string",
                    "typeName": "IP4_ADDRESS_LIST"
                },
                "domain_search": {
                    "description": "Domains to search in the network. Use space as the delimiter.",
                    "notes": "Domain search.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "tftp_server_name": {
                    "description": "The FQDN or IP address of the TFTP server from which the file is to be downloaded.",
                    "notes": "TFTP Server name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.acropolis.IpConfigDTO$IpPool": {
            "id": "get.dto.acropolis.IpConfigDTO$IpPool",
            "required": [],
            "properties": {
                "range": {
                    "description": "Ip pool range with start address and end address. The expected format is \"startIpAddress endIpAddress\"",
                    "notes": "Ip pool range.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.acropolis.NetworkConfigDTO": {
            "id": "get.dto.acropolis.NetworkConfigDTO",
            "required": [],
            "properties": {
                "annotation": {
                    "description": "The annotation of the network",
                    "notes": "The annotation of the network",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "ip_config": {
                    "$ref": "get.dto.acropolis.IpConfigDTO",
                    "description": "For managed L3 networks, this is the IP configuration.",
                    "notes": "For managed L3 networks, this is the IP configuration.",
                    "typeName": "DEFAULT"
                },
                "logical_timestamp": {
                    "description": "Logical timestamp of the network configuration that may may be provided for consistency.",
                    "format": "int64",
                    "notes": "Logical timestamp of the network.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "The name of the network",
                    "notes": "The name of the network",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "network_type": {
                    "description": "The type of network, i.e external or internal network",
                    "enum": [
                        "EXTERNAL",
                        "INTERNAL"
                    ],
                    "notes": "The type of network",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "The UUID of the network",
                    "notes": "The UUID of the network",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vlan_id": {
                    "description": "VLAN ID of the bridged network.",
                    "format": "int32",
                    "notes": "VLAN ID of the bridged network.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "vswitch_name": {
                    "description": "The name of the vswitch",
                    "notes": "The name of the vswitch",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "update.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "update.dto.acropolis.IpConfigDTO": {
            "id": "update.dto.acropolis.IpConfigDTO",
            "required": [
                "network_address",
                "prefix_length"
            ],
            "properties": {
                "default_gateway": {
                    "description": "Default gateway",
                    "notes": "Default gateway",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "dhcp_options": {
                    "$ref": "update.dto.acropolis.IpConfigDTO$DhcpOptions",
                    "description": "Options passed along to client via DHCP. Options that are supported are Domain Name, Domain name servers and Domain search",
                    "notes": "DHCP options",
                    "typeName": "DEFAULT"
                },
                "dhcp_server_address": {
                    "description": "The IP address of the DHCP server",
                    "notes": "The IP address of the DHCP server",
                    "type": "string",
                    "typeName": "IP4_ADDRESS"
                },
                "network_address": {
                    "description": "The network address",
                    "notes": "The network address",
                    "type": "string",
                    "typeName": "IP4_ADDRESS"
                },
                "pool": {
                    "description": "List of IP address pools. Each IP address pool has a start and end address",
                    "items": {
                        "$ref": "update.dto.acropolis.IpConfigDTO$IpPool"
                    },
                    "notes": "List of IP address pools",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "prefix_length": {
                    "description": "Length of network prefix in number of bits",
                    "format": "int32",
                    "notes": "Length of network prefix in number of bits",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.acropolis.IpConfigDTO$DhcpOptions": {
            "id": "update.dto.acropolis.IpConfigDTO$DhcpOptions",
            "required": [],
            "properties": {
                "boot_file_name": {
                    "description": "The filename that is to be downloaded from the TFTP server",
                    "notes": "Bootfile name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "domain_name": {
                    "description": "Domain name.",
                    "notes": "Domain name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "domain_name_servers": {
                    "description": "Domain name servers to be configured for the network. Consult RFC 2132 for encoding/decoding.",
                    "notes": "Domain name servers.",
                    "type": "string",
                    "typeName": "IP4_ADDRESS_LIST"
                },
                "domain_search": {
                    "description": "Domains to search in the network. Use space as the delimiter.",
                    "notes": "Domain search.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "tftp_server_name": {
                    "description": "The FQDN or IP address of the TFTP server from which the file is to be downloaded.",
                    "notes": "TFTP Server name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.acropolis.IpConfigDTO$IpPool": {
            "id": "update.dto.acropolis.IpConfigDTO$IpPool",
            "required": [
                "range"
            ],
            "properties": {
                "range": {
                    "description": "Ip pool range with start address and end address. The expected format is \"startIpAddress endIpAddress\"",
                    "notes": "Ip pool range.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.acropolis.NetworkConfigDTO": {
            "id": "update.dto.acropolis.NetworkConfigDTO",
            "required": [],
            "properties": {
                "annotation": {
                    "description": "The annotation of the network",
                    "notes": "The annotation of the network",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "ip_config": {
                    "$ref": "update.dto.acropolis.IpConfigDTO",
                    "description": "For managed L3 networks, this is the IP configuration.",
                    "notes": "For managed L3 networks, this is the IP configuration.",
                    "typeName": "DEFAULT"
                },
                "logical_timestamp": {
                    "description": "Logical timestamp of the network configuration that may may be provided for consistency.",
                    "format": "int64",
                    "notes": "Logical timestamp of the network.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "The name of the network",
                    "notes": "The name of the network",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "The UUID of the network",
                    "notes": "The UUID of the network",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vlan_id": {
                    "description": "VLAN ID of the bridged network.",
                    "format": "int32",
                    "notes": "VLAN ID of the bridged network.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "vswitch_name": {
                    "description": "The name of the vswitch",
                    "notes": "The name of the vswitch",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/PrismGateway/services/rest/v2.0",
    "resourcePath": "/protection_domains",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/protection_domains/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of Protection Domains.",
                    "notes": "Get the list of Protection Domains configured in the cluster.",
                    "type": "get.base.EntityCollection&lt;get.dto.dr.ProtectionDomainDTO&gt;",
                    "nickname": "getProtectionDomains",
                    "parameters": [
                        {
                            "name": "names",
                            "description": "Protection Domain names",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "metro_avail",
                            "description": "Metro Availability Protection Domain",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "vstore_name",
                            "description": "vStore name",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "remote_site_name",
                            "description": "Remote Site name",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "include_deleted",
                            "description": "Include deleted",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "projection",
                            "description": "Projections on the attributes",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Add a Protection Domain.",
                    "notes": "A protection domain to be used for Disaster Recovery and Backups.",
                    "type": "create.dto.dr.ProtectionDomainDTO",
                    "nickname": "addProtectionDomain",
                    "parameters": [
                        {
                            "description": "A Protection Domain instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.dr.ProtectionDomainCreateDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/alerts",
            "operations": [
                {
                    "deprecated": "true",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of alerts generated on any Protection Domain.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getProtectionDomainAlerts",
                    "parameters": [
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of alerts",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "resolved",
                            "description": "Alerts which have been resolved",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Alerts which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "severity",
                            "description": "Alert severities",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "alert_type_uuid",
                            "description": "Alert type ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/consistency_groups/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get list of Consistency groups.",
                    "notes": "Get list of Consistency groups in the cluster.",
                    "type": "get.base.EntityCollection&lt;get.dto.dr.ConsistencyGroupDTO&gt;",
                    "nickname": "getConsistencyGroups",
                    "parameters": [
                        {
                            "name": "protection_domains",
                            "description": "Protection Domain names",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "consistency_groups",
                            "description": "Consistency Group names",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "include_deleted",
                            "description": "Include deleted",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/dr_snapshots/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of Snapshots.",
                    "notes": "Get the list of Snapshots created in Protection Domains.",
                    "type": "get.base.EntityCollection&lt;get.dto.dr.SnapshotDTO&gt;",
                    "nickname": "getAllProtectionDomainSnapshots",
                    "parameters": [
                        {
                            "name": "count",
                            "description": "Number of DR Snapshots to retrieve",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "filter_criteria",
                            "description": "Filter criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "sort_criteria",
                            "description": "Sort criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "full_details",
                            "description": "Whether to include consistency group / vm details",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/events",
            "operations": [
                {
                    "deprecated": "true",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of events generated on any Protection Domain.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getProtectionDomainEvents",
                    "parameters": [
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of events",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Events which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/oob_schedules/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of Out-Of-Band schedules in Protection Domains.",
                    "notes": "Get the list of Out-Of-Band schedules in Protection Domains  configured in the cluster.",
                    "type": "array",
                    "items": {
                        "$ref": "get.dto.dr.OutOfBandSchedulePoliciesDTO"
                    },
                    "nickname": "getOutOfBandSchedules",
                    "parameters": [
                        {
                            "name": "protection_domain_names",
                            "description": "Names of Protection Domains",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/pending_actions/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get list of pending actions.",
                    "notes": "Get list of pending actions in the cluster.",
                    "type": "array",
                    "items": {
                        "$ref": "get.dto.dr.PdPendingActionsDTO"
                    },
                    "nickname": "getPendingActions",
                    "parameters": [
                        {
                            "name": "protection_domain_names",
                            "description": "Names of Protection Domains",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/pending_replications/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get list of pending replications.",
                    "notes": "Get list of pending replications in the cluster.",
                    "type": "array",
                    "items": {
                        "$ref": "get.dto.dr.PendingReplicationDTO"
                    },
                    "nickname": "getProtectionDomainPendingReplications",
                    "parameters": [
                        {
                            "name": "protection_domain_names",
                            "description": "Protection Domain names",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "remote_site_names",
                            "description": "Remote Site names",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/replications/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get list of replications.",
                    "notes": "Get list of replications in the cluster.",
                    "type": "get.base.EntityCollection&lt;get.dto.dr.ReplicationDTO&gt;",
                    "nickname": "getReplications",
                    "parameters": [
                        {
                            "name": "protection_domain_names",
                            "description": "Protection Domain names",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "remote_site_names",
                            "description": "Remote Site names",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/status",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the Data Protection status for all Protection Domains.",
                    "notes": "",
                    "type": "get.dto.dr.BackupAndDrStatus",
                    "nickname": "getStatus",
                    "parameters": [],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/unprotected_vms/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get list of unprotected VMs in a cluster.",
                    "notes": "Get list of unprotected VMs in a cluster that can participate in Nutanix native Backup and DR.",
                    "type": "get.base.EntityCollection&lt;get.dto.stats.VMDTO&gt;",
                    "nickname": "getUnprotectedVms",
                    "parameters": [
                        {
                            "name": "host_uuids",
                            "description": "Host Uuids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "vm_ids",
                            "description": "VM IDs",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "vm_names",
                            "description": "VM Names",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "storage_container_names",
                            "description": "Storage Container Names",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{name}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete a Protection Domain.",
                    "notes": "Mark a Protection domain for removal. Protection domain will be removed from the cluster when all outstanding operations on it are cancelled.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "markProtectionDomainForRemoval",
                    "parameters": [
                        {
                            "name": "skip_remote_check",
                            "description": "Skip checking remote Protection Domain",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get a Protection Domain.",
                    "notes": "Get a Protection Domain with the specified name.",
                    "type": "get.dto.dr.ProtectionDomainDTO",
                    "nickname": "getProtectionDomainByName",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "metro_avail",
                            "description": "Whether to include only Metro Availability related protection domains",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "vstore_name",
                            "description": "vStore name",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "remote_site_name",
                            "description": "Remote Site name",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "projection",
                            "description": "Projections on the attributes",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{name}/activate",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Activate a protection domain",
                    "notes": "Activate a protection domain with the specified name.",
                    "type": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "markProtectionDomainActive",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Id of the snapshot",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.PrimitiveDTO&lt;java.lang.String&gt;"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{name}/alerts",
            "operations": [
                {
                    "deprecated": "true",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of alerts generated on a specified Protection Domain.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getAlertsForProtectionDomain",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of alerts",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "resolved",
                            "description": "Alerts which have been resolved",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Alerts which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "severity",
                            "description": "Alert severities",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "alert_type_uuid",
                            "description": "Alert type ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{name}/consistency_groups/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get list of Consistency groups in a Protection Domain.",
                    "notes": "Get list of Consistency groups in a specified Protection Domain.",
                    "type": "get.base.EntityCollection&lt;get.dto.dr.ConsistencyGroupDTO&gt;",
                    "nickname": "getConsistencyGroupsInPd",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{name}/deactivate",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Deactivate a protection domain.",
                    "notes": "Deactivate a protection domain with the specified name.",
                    "type": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "markProtectionDomainInactive",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{name}/dr_snapshots/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of Snapshots in a Protection Domain.",
                    "notes": "Get the list of Snapshots created in a specified Protection Domain.",
                    "type": "get.base.EntityCollection&lt;get.dto.dr.SnapshotDTO&gt;",
                    "nickname": "getSnapshotsForPd",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "count",
                            "description": "Number of DR Snapshots to retrieve",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "filter_criteria",
                            "description": "Filter criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "sort_criteria",
                            "description": "Sort criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "full_details",
                            "description": "Whether to include consistency group / vm details",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "oob_schedule_ids",
                            "description": "OOB Schedule Ids for filtering",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "format": "int64",
                                "type": "integer"
                            }
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{name}/events",
            "operations": [
                {
                    "deprecated": "true",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of events generated on a specified Protection Domain.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getEventsForProtectionDomain",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of events",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Events which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{name}/migrate",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Migrate an active Protection Domain to a DR site.",
                    "notes": "Mark the specified Protection domain as inactive and failover to the given Remote Site.",
                    "type": "create.base.EntityCollection&lt;create.dto.dr.VirtualMachine&gt;",
                    "nickname": "migrateProtectionDomain",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Name of the Remote Site",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.PrimitiveDTO&lt;java.lang.String&gt;"
                        },
                        {
                            "name": "skip_vm_mobility_check",
                            "description": "Flag to specify whether mobility check has to be skipped",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{name}/oob_schedules",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Add a out of band snapshot schedule in a Protection Domain.",
                    "notes": "Add a out of band(i.e one time) snapshot schedule in a Protection Domain having specified name.",
                    "type": "create.dto.dr.OutOfBandSchedulePoliciesDTO$Schedule",
                    "nickname": "addOutOfBandSchedule",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "A Out of band snapshot schedule instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.dr.OutOfBandSchedulePoliciesDTO$Schedule"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{name}/oob_schedules/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of Out-Of-Band schedules in a Protection Domain.",
                    "notes": "Get the list of Out-Of-Band schedules in a Protection Domain with the specified name.",
                    "type": "array",
                    "items": {
                        "$ref": "get.dto.dr.OutOfBandSchedulePoliciesDTO"
                    },
                    "nickname": "getOutOfBandSchedulesForPd",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{name}/oob_schedules/{scheduleId}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete a Out-Of-Band schedule.",
                    "notes": "Delete a Out-Of-Band schedule having specified id.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "removeOutOfBandSchedule",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "schedule_id",
                            "description": "Id of the Out-Of-Band schedule",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{name}/pending_actions/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get list of pending actions in the Protection Domain.",
                    "notes": "Get list of pending actions in the specified Protection Domain.",
                    "type": "array",
                    "items": {
                        "$ref": "get.dto.dr.PdPendingActionsDTO"
                    },
                    "nickname": "getPendingActionsForPd",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{name}/pending_replications/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get list of pending replications in the Protection Domain.",
                    "notes": "Get list of pending replications in the Protection Domain with the specified name.",
                    "type": "array",
                    "items": {
                        "$ref": "get.dto.dr.PendingReplicationDTO"
                    },
                    "nickname": "getPendingReplicationsInPd",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "remote_site_names",
                            "description": "Names of Remote Sites",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{name}/protect_vms",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Add Virtual Machines to a Protection Domain.",
                    "notes": "Add Virtual Machines to a Protection Domain to enable Backup and disaster recovery.",
                    "type": "create.dto.dr.ProtectionDomainDTO",
                    "nickname": "addVmsByNamesToProtectionDomain",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Add VMs request instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.dr.AddVMsToPdRequestDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{name}/replications/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get list of replications in a Protection Domain.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.dr.ReplicationDTO&gt;",
                    "nickname": "getReplicationsForPd",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{name}/restore_entities",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Rollback Virtual Machines and/or NFS files.",
                    "notes": "Rollback Virtual Machines and/or NFS files in a Protection Domain to a given Snapshot",
                    "type": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "restoreEntities",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Restore request instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.dr.RestoreEntitiesRequestDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{name}/rollback",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Rollback an active Protection domain.",
                    "notes": "Rollback the specified active Protection domain to a given snapshot.",
                    "type": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "rollbackProtectionDomain",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Id of the snapshot",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.PrimitiveDTO&lt;java.lang.String&gt;"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{name}/schedules",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Retrieve all snapshot schedules from a Protection Domain.",
                    "notes": "Retrieve all snapshot schedules from the specified Protection Domain.",
                    "type": "array",
                    "items": {
                        "$ref": "get.dto.dr.CronScheduleDTO"
                    },
                    "nickname": "getCronSchedules",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Add a snapshot schedule to a Protection Domain.",
                    "notes": "Add a snapshot schedule to the specified Protection Domain.",
                    "type": "create.dto.dr.CronScheduleDTO",
                    "nickname": "addCronSchedule",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "A snapshot schedule instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.dr.CronScheduleDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{name}/snapshots/{snapshot_id}/clone",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Restore Virtual Machines and/or NFS files.",
                    "notes": "Restore Virtual Machines and/or NFS files in a Protection Domain to a given Snapshot",
                    "type": "create.dto.dr.FileGroupDTO",
                    "nickname": "restoreSnapshot",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "snapshot_id",
                            "description": "Snapshot Id",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Restore request instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.dr.RestoreEntitiesRequestDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{name}/stats/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the stats for a specified Protection Domain.",
                    "notes": "If start time and end time are included in the query string, then historical stats are retrieved. Otherwise, the latest stats are retrieved.",
                    "type": "get.base.StatsResponse",
                    "nickname": "getProtectionDomainStats",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "metrics",
                            "description": "List of metrics",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "interval_in_secs",
                            "description": "Sampling interval of stats",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{name}/unprotect_vms",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Remove Virtual Machines from a Protection Domain.",
                    "notes": "",
                    "type": "create.dto.dr.ProtectionDomainDTO",
                    "nickname": "removeVmsFromProtectionDomain",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "List of VMs",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{pd_name}/break_replication_timeout",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Updates Metro Availability timeout for a specific protection domain.",
                    "notes": "Updates Metro Availability timeout for a specific protection domain.",
                    "type": "update.dto.dr.ProtectionDomainDTO",
                    "nickname": "updateStretchCluster",
                    "parameters": [
                        {
                            "name": "pd_name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Metro Availability setting",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.dr.ProtectionDomainDTO$Stretch"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{pd_name}/consistency_groups/{cg_name}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Updates Consistency Group for a specific protection domain.",
                    "notes": "Updates Consistency Group for a specific protection domain.",
                    "type": "update.dto.dr.ConsistencyGroupDTO",
                    "nickname": "updateConsistencyGroup",
                    "parameters": [
                        {
                            "name": "pd_name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "cg_name",
                            "description": "Name of the Consistency Group",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Consistency group details",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.dr.ConsistencyGroupDTO"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{pd_name}/failure_handling",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Change failure handling mode for a protection domain",
                    "notes": "Change failure handling mode for a protection domain",
                    "type": "update.dto.dr.ProtectionDomainDTO",
                    "nickname": "updateStretchFailureHandling",
                    "parameters": [
                        {
                            "name": "pd_name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Protection domain name and Failure handling mode",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.dr.FailureHandlingDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{pd_name}/metro_avail_disable",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Disables Metro Availability for a specific protection domain.",
                    "notes": "Disables Metro Availability for a specific protection domain.",
                    "type": "create.dto.dr.ProtectionDomainDTO",
                    "nickname": "stopStretchCluster",
                    "parameters": [
                        {
                            "name": "skip_remote_check",
                            "description": "Skip checking remote Protection Domain",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "pd_name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{pd_name}/metro_avail_enable",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Enables Metro Availability for a specific protection domain.",
                    "notes": "Enables Metro Availability for a specific protection domain based on VStore and remote site.",
                    "type": "create.dto.dr.ProtectionDomainDTO",
                    "nickname": "startStretchCluster",
                    "parameters": [
                        {
                            "name": "pd_name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "re_enable",
                            "description": "Re-enable operation",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "skip_remote_check",
                            "description": "Skip checking remote Protection Domain",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "force",
                            "description": "Skip checking remote container emptiness",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "description": "VStore name and Remote site name",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.dr.ProtectionDomainDTO$Stretch"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{pd_name}/promote",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Promotes to active Metro Availability role for a specific protection domain.",
                    "notes": "Promotes to active Metro Availability role for a specific protection domain.",
                    "type": "create.dto.dr.ProtectionDomainDTO",
                    "nickname": "promoteStretchCluster",
                    "parameters": [
                        {
                            "name": "skip_remote_check",
                            "description": "Skip checking remote Protection Domain",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "pd_name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "force",
                            "description": "Force to perform the action",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{pd_name}/schedules",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Remove all snapshot schedules from a Protection Domain.",
                    "notes": "Remove all snapshot schedules from the specified ProtectionDomain.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "clearCronSchedules",
                    "parameters": [
                        {
                            "name": "pd_name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{pd_name}/schedules/{id}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Remove a snapshot schedule from a Protection Domain.",
                    "notes": "Remove a snapshot schedule from the specified Protection Domain.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "removeCronSchedule",
                    "parameters": [
                        {
                            "name": "pd_name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "id",
                            "description": "Id of the snapshot schedule",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Replace a snapshot schedule of a Protection Domain.",
                    "notes": "Replace a snapshot schedule of the specified Protection Domain.",
                    "type": "update.dto.dr.CronScheduleDTO",
                    "nickname": "replaceCronSchedule",
                    "parameters": [
                        {
                            "name": "pd_name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "id",
                            "description": "Id of the snapshot schedule",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "A snapshot schedule instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.dr.CronScheduleDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{pd_name}/schedules/{id}/retention_policies",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Clear retention policies of a snapshot schedule of a Protection Domain.",
                    "notes": "Clear retention policies of specified snapshot scheudule from the specified Protection Domain.",
                    "type": "delete.dto.dr.CronScheduleDTO",
                    "nickname": "clearRetentionPolicy",
                    "parameters": [
                        {
                            "name": "pd_ame",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "id",
                            "description": "ID of the snapshot schedule",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Set retention policies of a snapshot schedule of a Protection Domain.",
                    "notes": "Set retention policies of specified snapshot schedule from the specified Protection Domain.",
                    "type": "create.dto.dr.CronScheduleDTO",
                    "nickname": "setRetentionPolicy",
                    "parameters": [
                        {
                            "name": "pd_name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "id",
                            "description": "ID of the snapshot schedule",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "The retention policies instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.dr.RetentionPolicyDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{protection_domain_name}/dr_snapshots/{snapshot_id}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete a snapshot.",
                    "notes": "Delete a snapshot of a Protection Domain.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "removeSnapshot",
                    "parameters": [
                        {
                            "name": "protection_domain_name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "snapshot_id",
                            "description": "Id of the snapshot",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{protection_domain_name}/dr_snapshots/{snapshot_id}/retain",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Retain a snapshot.",
                    "notes": "Retain a snapshot of a Protection Domain.",
                    "type": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "modifySnapshot",
                    "parameters": [
                        {
                            "name": "protection_domain_name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "snapshot_id",
                            "description": "Id of the snapshot",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "retention time in microseconds",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.PrimitiveDTO&lt;java.lang.Long&gt;"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/protection_domains/{protection_domain_name}/replications/{id}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Abort a replication.",
                    "notes": "Abort a replication in a Protection Domain.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "abortReplication",
                    "parameters": [
                        {
                            "name": "protection_domain_name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "id",
                            "description": "Id of the replication",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Update the state of the replication.",
                    "notes": "Update the state of the replication in a Protection Domain.",
                    "type": "update.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "updateReplication",
                    "parameters": [
                        {
                            "name": "protection_domain_name",
                            "description": "Name of the Protection Domain",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "id",
                            "description": "Id of the replication",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "integer"
                        },
                        {
                            "description": "One of pause, resume or abort",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.PrimitiveDTO&lt;java.lang.String&gt;"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "create.base.EntityCollection&lt;create.dto.dr.VirtualMachine&gt;": {
            "id": "create.base.EntityCollection&lt;create.dto.dr.VirtualMachine&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "create.dto.dr.VirtualMachine"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "create.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "create.base.Metadata"
                }
            }
        },
        "create.base.ErrorInfo": {
            "id": "create.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "create.base.Metadata": {
            "id": "create.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "create.dto.PrimitiveDTO&lt;java.lang.Long&gt;": {
            "id": "create.dto.PrimitiveDTO&lt;java.lang.Long&gt;",
            "required": [],
            "properties": {
                "value": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "create.dto.PrimitiveDTO&lt;java.lang.String&gt;": {
            "id": "create.dto.PrimitiveDTO&lt;java.lang.String&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "create.dto.alerts.AlertSummaryDTO": {
            "id": "create.dto.alerts.AlertSummaryDTO",
            "required": [],
            "properties": {
                "alert_summaries": {
                    "$ref": "java.util.Map&lt;create.dto.alerts.AlertDTO$AlertSeverity, create.base.EntityCollection&lt;create.dto.alerts.AlertDTO&gt;&gt;"
                },
                "count": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "create.dto.dr.AddVMsToPdRequestDTO": {
            "id": "create.dto.dr.AddVMsToPdRequestDTO",
            "required": [],
            "properties": {
                "app_consistent_snapshots": {
                    "type": "boolean"
                },
                "consistency_group_name": {
                    "type": "string"
                },
                "ids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "ignore_dup_or_missing_vms": {
                    "type": "boolean"
                },
                "names": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "uuids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            }
        },
        "create.dto.dr.CronScheduleDTO": {
            "id": "create.dto.dr.CronScheduleDTO",
            "required": [],
            "properties": {
                "app_consistent": {
                    "description": "Create app consistent snapshots",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "duration_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "end_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "every_nth": {
                    "format": "int32",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "pd_name": {
                    "type": "string"
                },
                "retention_policy": {
                    "$ref": "create.dto.dr.RetentionPolicyDTO"
                },
                "rollup_schedule_uuid": {
                    "description": " UUID that helps identify that cron schedules are part of a rollup schedule.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "start_times_in_usecs": {
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "type": "array"
                },
                "suspended": {
                    "type": "boolean"
                },
                "timezone_offset": {
                    "description": "Timezone offset in seconds w.r.t GMT in which the start time is being specified. Defaults to 0, which is GMT",
                    "format": "int32",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "type": {
                    "enum": [
                        "SECONDLY",
                        "MINUTELY",
                        "HOURLY",
                        "DAILY",
                        "WEEKLY",
                        "MONTHLY"
                    ],
                    "type": "string"
                },
                "user_start_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "values": {
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "type": "array"
                }
            }
        },
        "create.dto.dr.FileGroupDTO": {
            "id": "create.dto.dr.FileGroupDTO",
            "required": [],
            "properties": {}
        },
        "create.dto.dr.NfsFile": {
            "id": "create.dto.dr.NfsFile",
            "required": [],
            "properties": {
                "consistency_group": {
                    "type": "string"
                },
                "nfs_file_path": {
                    "type": "string"
                },
                "nfs_handle": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "create.dto.dr.OutOfBandSchedulePoliciesDTO$Schedule": {
            "id": "create.dto.dr.OutOfBandSchedulePoliciesDTO$Schedule",
            "required": [],
            "properties": {
                "app_consistent": {
                    "description": "Create app consistent snapshots",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "remote_site_names": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "schedule_id": {
                    "format": "int64",
                    "type": "integer"
                },
                "schedule_start_time_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "snapshot_retention_time_secs": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "create.dto.dr.ProtectionDomainCreateDTO": {
            "id": "create.dto.dr.ProtectionDomainCreateDTO",
            "required": [
                "value"
            ],
            "properties": {
                "annotations": {
                    "description": "Annotations of the protection domain",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "value": {
                    "description": "Name of the protection domain",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.dr.ProtectionDomainDTO": {
            "id": "create.dto.dr.ProtectionDomainDTO",
            "required": [],
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "alert_summary": {
                    "$ref": "create.dto.alerts.AlertSummaryDTO"
                },
                "annotations": {
                    "description": "Annotations for the protection domain",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "cron_schedules": {
                    "items": {
                        "$ref": "create.dto.dr.CronScheduleDTO"
                    },
                    "type": "array"
                },
                "health_summary": {
                    "$ref": "create.dto.health.check.HealthSummaryDTO"
                },
                "marked_for_removal": {
                    "type": "boolean"
                },
                "metro_avail": {
                    "$ref": "create.dto.dr.ProtectionDomainDTO$Stretch"
                },
                "min_snapshot_to_retain": {
                    "format": "int32",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "next_snapshot_time_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "nfs_files": {
                    "items": {
                        "$ref": "create.dto.dr.NfsFile"
                    },
                    "type": "array"
                },
                "ongoing_replication_count": {
                    "format": "int64",
                    "type": "integer"
                },
                "pending_replication_count": {
                    "format": "int64",
                    "type": "integer"
                },
                "remote_site_names": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "replication_links": {
                    "items": {
                        "$ref": "create.dto.dr.ReplicationLinkDTO"
                    },
                    "type": "array"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "sync_replications": {
                    "items": {
                        "$ref": "create.dto.dr.SyncReplicationDTO"
                    },
                    "type": "array"
                },
                "total_user_written_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "usage_stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "vms": {
                    "items": {
                        "$ref": "create.dto.dr.VirtualMachine"
                    },
                    "type": "array"
                },
                "volume_groups": {
                    "items": {
                        "$ref": "create.dto.dr.VolumeGroup"
                    },
                    "type": "array"
                },
                "vstore_id": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "create.dto.dr.ProtectionDomainDTO$Stretch": {
            "id": "create.dto.dr.ProtectionDomainDTO$Stretch",
            "required": [],
            "properties": {
                "failure_handling": {
                    "enum": [
                        "NONE",
                        "AUTOMATIC",
                        "MANUAL",
                        "WITNESS"
                    ],
                    "type": "string"
                },
                "remote_site": {
                    "type": "string"
                },
                "role": {
                    "enum": [
                        "ACTIVE",
                        "STANDBY"
                    ],
                    "type": "string"
                },
                "status": {
                    "enum": [
                        "ENABLE_METRO_AVAIL_IN_PROGRESS",
                        "DISABLE_METRO_AVAIL_IN_PROGRESS",
                        "PROMOTE_METRO_AVAIL_IN_PROGRESS",
                        "DEMOTE_METRO_AVAIL_IN_PROGRESS",
                        "REMOTE_UNREACHABLE",
                        "DECOUPLED",
                        "SYNCHRONIZING",
                        "ENABLED",
                        "DISABLED",
                        "SYNC_INCOMPLETE",
                        "PENDING",
                        "ERROR"
                    ],
                    "type": "string"
                },
                "storage_container": {
                    "type": "string"
                }
            }
        },
        "create.dto.dr.ReplicationLinkDTO": {
            "id": "create.dto.dr.ReplicationLinkDTO",
            "required": [],
            "properties": {
                "current_replicating_snapshot_id": {
                    "type": "string"
                },
                "current_replicating_snapshot_total_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "current_replicating_snapshot_transmitted_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "last_replication_end_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_replication_start_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_successful_replication_snapshot_id": {
                    "type": "string"
                },
                "protection_domain_name": {
                    "type": "string"
                },
                "remote_site_name": {
                    "type": "string"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                }
            }
        },
        "create.dto.dr.RestoreEntitiesRequestDTO": {
            "id": "create.dto.dr.RestoreEntitiesRequestDTO",
            "required": [],
            "properties": {
                "nfs_files": {
                    "description": "Names of NFS files to be restored",
                    "items": {
                        "type": "string"
                    },
                    "notes": "Names of NFS files to be restored.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "path_prefix": {
                    "description": "Path prefix to be applied for cloning VMs. It is recommended to not use path_prefix while restoring a virtual machine or volume group.",
                    "notes": "Path prefix to be applied for cloning VMs.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "replace": {
                    "description": "Whether to replace entities.",
                    "notes": "Whether to replace entities.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "snapshot_id": {
                    "description": "Id of the snapshot to restore entities from.",
                    "notes": "Id of the snapshot to restore entities from.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vg_name_prefix": {
                    "description": "Name prefix to be applied for cloning VGs.",
                    "notes": "Name prefix to be applied for cloning VGs.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vm_name_prefix": {
                    "description": "Name prefix to be applied for cloning VMs.",
                    "notes": "Name prefix to be applied for cloning VMs.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vm_names": {
                    "description": "Names of VM to be restored.",
                    "items": {
                        "type": "string"
                    },
                    "notes": "Names of VM to be restored.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "vm_uuids": {
                    "description": "Uuids of VM to be restored.",
                    "items": {
                        "type": "string"
                    },
                    "notes": "Uuids of VM to be restored.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "volume_group_uuids": {
                    "description": "UUIDs of Volume Groups to be restored",
                    "items": {
                        "type": "string"
                    },
                    "notes": "UUIDs of Volume Groups to be restored.",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.dr.RetentionPolicyDTO": {
            "id": "create.dto.dr.RetentionPolicyDTO",
            "required": [],
            "properties": {
                "d_e_f_a_u_l_t__l_o_c_a_l__r_e_t_e_n_t_i_o_n": {
                    "format": "int32",
                    "type": "integer"
                },
                "d_e_f_a_u_l_t__r_e_m_o_t_e__r_e_t_e_n_t_i_o_n": {
                    "format": "int32",
                    "type": "integer"
                },
                "local_max_snapshots": {
                    "format": "int32",
                    "type": "integer"
                },
                "local_retention_period": {
                    "description": "Maximum number of days/weeks/months a snapshot is to be retained locally.",
                    "format": "int32",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "local_retention_type": {
                    "description": "Retention type for local Snapshots i.e. DAYS/ WEEKS/ MONTHS/ NUM_SNAPSHOTS",
                    "enum": [
                        "NUM_SNAPSHOTS",
                        "DAYS",
                        "WEEKS",
                        "MONTHS"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "remote_max_snapshots": {
                    "$ref": "java.util.HashMap&lt;java.lang.String, java.lang.Integer&gt;"
                },
                "remote_retention_period": {
                    "$ref": "java.util.HashMap&lt;java.lang.String, java.lang.Integer&gt;",
                    "description": "Maximum number of days/weeks/months a remote snapshot is to be retained remotely.",
                    "typeName": "DEFAULT"
                },
                "remote_retention_type": {
                    "$ref": "java.util.HashMap&lt;java.lang.String, create.dto.dr.RetentionPolicyDTO$RetentionType&gt;",
                    "description": "Retention type for remote Snapshots i.e. DAYS/ WEEKS/ MONTHS/ NUM_SNAPSHOTS",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.dr.SyncReplicationDTO": {
            "id": "create.dto.dr.SyncReplicationDTO",
            "required": [],
            "properties": {
                "id": {
                    "type": "string"
                },
                "protection_domain_name": {
                    "type": "string"
                },
                "remote_site_name": {
                    "type": "string"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                }
            }
        },
        "create.dto.dr.VirtualMachine": {
            "id": "create.dto.dr.VirtualMachine",
            "required": [],
            "properties": {
                "app_consistent_snapshots": {
                    "description": "Whether consistency group performs app consistent snapshots",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "consistency_group": {
                    "description": "Consistency group of a vm",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vm_handle": {
                    "description": "Internal data-structure used by Cerebro to uniquely identify a vm Should it be displayed to user?",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "vm_id": {
                    "description": "Unique identifier of a virtual machine within a Hypervisor.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vm_power_state_on_recovery": {
                    "description": "Power state after vm recovery. Default power state is POWEREDOFF.",
                    "enum": [
                        "Powered Off",
                        "Powered On",
                        "Power state at time of snapshot"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.dr.VolumeGroup": {
            "id": "create.dto.dr.VolumeGroup",
            "required": [],
            "properties": {
                "consistency_group": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nfs_file_paths": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "related_entity_uuids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "volume_group_uuid": {
                    "type": "string"
                }
            }
        },
        "create.dto.health.check.EntityTypeHealthCheckSummaryDTO": {
            "id": "create.dto.health.check.EntityTypeHealthCheckSummaryDTO",
            "required": [],
            "properties": {
                "checks_in_error": {
                    "$ref": "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckErrorsDTO&gt;"
                },
                "detailed_check_summary": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;"
                }
            }
        },
        "create.dto.health.check.HealthSummaryDTO": {
            "id": "create.dto.health.check.HealthSummaryDTO",
            "required": [],
            "properties": {
                "entity_type_summaries": {
                    "items": {
                        "$ref": "create.dto.health.check.EntityTypeHealthCheckSummaryDTO"
                    },
                    "type": "array"
                },
                "health_check_summaries": {
                    "$ref": "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckSummaryDTO&gt;"
                },
                "health_status": {
                    "enum": [
                        "Critical",
                        "Warning",
                        "Good",
                        "Unknown",
                        "Error"
                    ],
                    "type": "string"
                }
            }
        },
        "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "delete.dto.dr.CronScheduleDTO": {
            "id": "delete.dto.dr.CronScheduleDTO",
            "required": [],
            "properties": {
                "app_consistent": {
                    "description": "Create app consistent snapshots",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "duration_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "end_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "every_nth": {
                    "format": "int32",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "pd_name": {
                    "type": "string"
                },
                "retention_policy": {
                    "$ref": "delete.dto.dr.RetentionPolicyDTO"
                },
                "rollup_schedule_uuid": {
                    "description": " UUID that helps identify that cron schedules are part of a rollup schedule.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "start_times_in_usecs": {
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "type": "array"
                },
                "suspended": {
                    "type": "boolean"
                },
                "timezone_offset": {
                    "description": "Timezone offset in seconds w.r.t GMT in which the start time is being specified. Defaults to 0, which is GMT",
                    "format": "int32",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "type": {
                    "enum": [
                        "SECONDLY",
                        "MINUTELY",
                        "HOURLY",
                        "DAILY",
                        "WEEKLY",
                        "MONTHLY"
                    ],
                    "type": "string"
                },
                "user_start_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "values": {
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "type": "array"
                }
            }
        },
        "delete.dto.dr.RetentionPolicyDTO": {
            "id": "delete.dto.dr.RetentionPolicyDTO",
            "required": [],
            "properties": {
                "d_e_f_a_u_l_t__l_o_c_a_l__r_e_t_e_n_t_i_o_n": {
                    "format": "int32",
                    "type": "integer"
                },
                "d_e_f_a_u_l_t__r_e_m_o_t_e__r_e_t_e_n_t_i_o_n": {
                    "format": "int32",
                    "type": "integer"
                },
                "local_max_snapshots": {
                    "format": "int32",
                    "type": "integer"
                },
                "local_retention_period": {
                    "description": "Maximum number of days/weeks/months a snapshot is to be retained locally.",
                    "format": "int32",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "local_retention_type": {
                    "description": "Retention type for local Snapshots i.e. DAYS/ WEEKS/ MONTHS/ NUM_SNAPSHOTS",
                    "enum": [
                        "NUM_SNAPSHOTS",
                        "DAYS",
                        "WEEKS",
                        "MONTHS"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "remote_max_snapshots": {
                    "$ref": "java.util.HashMap&lt;java.lang.String, java.lang.Integer&gt;"
                },
                "remote_retention_period": {
                    "$ref": "java.util.HashMap&lt;java.lang.String, java.lang.Integer&gt;",
                    "description": "Maximum number of days/weeks/months a remote snapshot is to be retained remotely.",
                    "typeName": "DEFAULT"
                },
                "remote_retention_type": {
                    "$ref": "java.util.HashMap&lt;java.lang.String, delete.dto.dr.RetentionPolicyDTO$RetentionType&gt;",
                    "description": "Retention type for remote Snapshots i.e. DAYS/ WEEKS/ MONTHS/ NUM_SNAPSHOTS",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.ResultContentDescriptor"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.dr.ConsistencyGroupDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.dr.ConsistencyGroupDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.dr.ConsistencyGroupDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.dr.ProtectionDomainDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.dr.ProtectionDomainDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.dr.ProtectionDomainDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.dr.ReplicationDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.dr.ReplicationDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.dr.ReplicationDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.dr.SnapshotDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.dr.SnapshotDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.dr.SnapshotDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.stats.VMDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.stats.VMDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.stats.VMDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.base.StatsResponse": {
            "id": "get.base.StatsResponse",
            "required": [],
            "properties": {
                "stats_specific_responses": {
                    "items": {
                        "$ref": "get.base.StatsResponse$StatsSpecificResponse"
                    },
                    "type": "array"
                }
            }
        },
        "get.base.StatsResponse$StatsSpecificResponse": {
            "id": "get.base.StatsResponse$StatsSpecificResponse",
            "required": [],
            "properties": {
                "interval_in_secs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "metric": {
                    "type": "string"
                },
                "start_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "successful": {
                    "type": "boolean"
                },
                "values": {
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.EntityMetadata": {
            "id": "get.dto.EntityMetadata",
            "required": [],
            "properties": {
                "additional_fields": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "context_hint_field": {
                    "type": "string"
                },
                "context_hint_value": {
                    "type": "string"
                },
                "entity_id": {
                    "type": "string"
                },
                "entity_name": {
                    "type": "string"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                }
            }
        },
        "get.dto.ResultContentDescriptor": {
            "id": "get.dto.ResultContentDescriptor",
            "required": [],
            "properties": {
                "metadata": {
                    "$ref": "get.dto.ResultMetadata"
                },
                "perspectives": {
                    "items": {
                        "$ref": "get.dto.ResultContentDescriptor$Perspective"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.ResultContentDescriptor$Perspective": {
            "id": "get.dto.ResultContentDescriptor$Perspective",
            "required": [],
            "properties": {
                "format": {
                    "enum": [
                        "TABLE",
                        "BAR_CHART",
                        "PIE_CHART",
                        "TIME_SERIES",
                        "KEY_VALUE",
                        "COUNT",
                        "HEALTH_SUMMARY",
                        "ALERT_INFO",
                        "CAPACITY",
                        "OTHER"
                    ],
                    "type": "string"
                },
                "metadata": {
                    "$ref": "get.dto.ResultMetadata"
                },
                "query": {},
                "result": {},
                "type": {
                    "type": "string"
                }
            }
        },
        "get.dto.ResultMetadata": {
            "id": "get.dto.ResultMetadata",
            "required": [],
            "properties": {
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filters": {
                    "items": {
                        "$ref": "get.dto.ResultMetadata$Filter"
                    },
                    "type": "array"
                },
                "instances": {
                    "items": {
                        "$ref": "get.dto.EntityMetadata"
                    },
                    "type": "array"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "get.dto.ResultMetadata$Filter": {
            "id": "get.dto.ResultMetadata$Filter",
            "required": [],
            "properties": {
                "display_for_rhs": {
                    "type": "string"
                },
                "lhs": {
                    "type": "string"
                },
                "operator": {
                    "description": "Operator for the filter.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "rhs": {
                    "type": "string"
                }
            }
        },
        "get.dto.alerts.AlertCauseDTO": {
            "id": "get.dto.alerts.AlertCauseDTO",
            "required": [],
            "properties": {
                "actions": {
                    "description": "Possible actions to resolve this alert",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "additional_links": {
                    "description": "Additional links",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "alert_namespace": {
                    "description": "Namespace this alert belongs to",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "cause": {
                    "description": "Detailed description",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "chart_queries": {
                    "$ref": "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;",
                    "description": "Charts that are relevant to this cause",
                    "typeName": "DEFAULT"
                },
                "details": {
                    "description": "Symptoms for this cause",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "has_global_details": {
                    "description": "Whether the alert has global details or not",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "id": {
                    "description": "Cause Id",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "num_resolved_count": {
                    "description": "Number of times this cause has resolved the alert",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "parent_cause_id": {
                    "description": "Id of the alert/cause this is a possible cause for",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "title": {
                    "description": "Short description",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "troubleshooting_steps": {
                    "description": "Steps to determine whether this is the cause.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO": {
            "id": "get.dto.alerts.AlertDTO",
            "required": [],
            "properties": {
                "acknowledged": {
                    "type": "boolean"
                },
                "acknowledged_by_username": {
                    "type": "string"
                },
                "acknowledged_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "affected_entities": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$AffectedEntity"
                    },
                    "type": "array"
                },
                "alert_details": {
                    "$ref": "get.dto.alerts.AlertDTO$AlertDetailsDTO"
                },
                "alert_title": {
                    "type": "string"
                },
                "alert_type_uuid": {
                    "type": "string"
                },
                "auto_resolved": {
                    "type": "boolean"
                },
                "check_id": {
                    "type": "string"
                },
                "classifications": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "context_types": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "context_values": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "created_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "detailed_message": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "impact_types": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "last_occurrence_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "node_uuid": {
                    "type": "string"
                },
                "originating_cluster_uuid": {
                    "type": "string"
                },
                "possible_causes": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertCauseDTO"
                    },
                    "type": "array"
                },
                "resolved": {
                    "type": "boolean"
                },
                "resolved_by_username": {
                    "type": "string"
                },
                "resolved_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "service_v_m_id": {
                    "type": "string"
                },
                "severity": {
                    "description": "This field describes the severity of the alert.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "user_defined": {
                    "type": "boolean"
                }
            }
        },
        "get.dto.alerts.AlertDTO$AffectedEntity": {
            "id": "get.dto.alerts.AlertDTO$AffectedEntity",
            "required": [],
            "properties": {
                "entity_name": {
                    "type": "string"
                },
                "entity_type": {
                    "type": "string"
                },
                "entity_type_display_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "get.dto.alerts.AlertDTO$AlertDetailsDTO": {
            "id": "get.dto.alerts.AlertDTO$AlertDetailsDTO",
            "required": [],
            "properties": {
                "metric_details": {
                    "description": "List of metric details associated with the alert",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$MetricDetails"
                    },
                    "notes": "List of metric details associated with the alert",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "severity_trails": {
                    "description": "List that contains severity level change details",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$SeverityTrail"
                    },
                    "notes": "List that contains severity level change details",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$MetricDetails": {
            "id": "get.dto.alerts.AlertDTO$MetricDetails",
            "required": [],
            "properties": {
                "comparison_operator": {
                    "description": "Comparison Operator to be applied for teh values.",
                    "notes": "Comparison Operator",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "condition_type": {
                    "description": "Condition Type that the current metric is associated with.",
                    "enum": [
                        "STATIC_THRESHOLD",
                        "ANOMALY",
                        "SAFETY_ZONE"
                    ],
                    "notes": "Condition Type that the current metric is associated with.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "data_type": {
                    "description": "Data Type of the value.",
                    "enum": [
                        "LONG",
                        "DOUBLE",
                        "BOOLEAN",
                        "STRING"
                    ],
                    "notes": "Data Type of the value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entity_id": {
                    "description": "UUID of the entity",
                    "notes": "UUID of the entity",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entity_type": {
                    "description": "Entity Type",
                    "notes": "Entity Type",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_display_name": {
                    "description": "Display name of the metric",
                    "notes": "Display name of the metric",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_name": {
                    "description": "Name of the metric",
                    "notes": "Name of the metric",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_value_details": {
                    "description": "List of metric values at different instances of time in the alert lifecycle",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$MetricValueDetails"
                    },
                    "notes": "List of metric values at different instances of time in the alert lifecycle",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "unit": {
                    "description": "Unit of the metric value.",
                    "notes": "Unit of the metric value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$MetricValueDetails": {
            "id": "get.dto.alerts.AlertDTO$MetricValueDetails",
            "required": [],
            "properties": {
                "metric_threshold_value": {
                    "description": "Threshold value of the metric that was specified in the policy at that given time.",
                    "notes": "Threshold value of the metric that was specified in the policy at that given time.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_value": {
                    "description": "Actual value of the metric at that given time.",
                    "notes": "Actual value of the metric at that given time.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "state_change_time_stamp_in_usecs": {
                    "description": "Time at which the alert's state change occurred.",
                    "format": "int64",
                    "notes": "Time at which the alert's state change occurred.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$SeverityTrail": {
            "id": "get.dto.alerts.AlertDTO$SeverityTrail",
            "required": [],
            "properties": {
                "severity": {
                    "description": "Severity level of the alert. Can be INFO, WARNING or CRITICAL",
                    "notes": "Severity level of the alert. Can be INFO, WARNING or CRITICAL",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "severity_change_timestamp_in_usecs": {
                    "description": "Time at which the severity level change occurred",
                    "format": "int64",
                    "notes": "Time at which the severity level change occurred",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertSummaryDTO": {
            "id": "get.dto.alerts.AlertSummaryDTO",
            "required": [],
            "properties": {
                "alert_summaries": {
                    "$ref": "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;"
                },
                "count": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "get.dto.dr.BackupAndDrStatus": {
            "id": "get.dto.dr.BackupAndDrStatus",
            "required": [],
            "properties": {
                "active_replications": {
                    "description": "Whether there is active replication or not.",
                    "notes": "Whether there is active replication or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "pd_suspended_schedules_map": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;",
                    "description": "Whether each pd schedules are suspended or not, true for suspend, false for active",
                    "notes": "Whether each pd schedules are suspended or not",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.dr.ConsistencyGroupDTO": {
            "id": "get.dto.dr.ConsistencyGroupDTO",
            "required": [],
            "properties": {
                "app_consistent_snapshots": {
                    "type": "boolean"
                },
                "consistency_group_name": {
                    "type": "string"
                },
                "marked_for_removal": {
                    "type": "boolean"
                },
                "nfs_file_count": {
                    "format": "int32",
                    "type": "integer"
                },
                "protection_domain_name": {
                    "type": "string"
                },
                "total_file_count": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_file_size_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "vm_count": {
                    "format": "int32",
                    "type": "integer"
                },
                "within_snapshot": {
                    "type": "boolean"
                }
            }
        },
        "get.dto.dr.CronScheduleDTO": {
            "id": "get.dto.dr.CronScheduleDTO",
            "required": [],
            "properties": {
                "app_consistent": {
                    "description": "Create app consistent snapshots",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "duration_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "end_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "every_nth": {
                    "format": "int32",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "pd_name": {
                    "type": "string"
                },
                "retention_policy": {
                    "$ref": "get.dto.dr.RetentionPolicyDTO"
                },
                "rollup_schedule_uuid": {
                    "description": " UUID that helps identify that cron schedules are part of a rollup schedule.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "start_times_in_usecs": {
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "type": "array"
                },
                "suspended": {
                    "type": "boolean"
                },
                "timezone_offset": {
                    "description": "Timezone offset in seconds w.r.t GMT in which the start time is being specified. Defaults to 0, which is GMT",
                    "format": "int32",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "type": {
                    "enum": [
                        "SECONDLY",
                        "MINUTELY",
                        "HOURLY",
                        "DAILY",
                        "WEEKLY",
                        "MONTHLY"
                    ],
                    "type": "string"
                },
                "user_start_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "values": {
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.dr.NfsFile": {
            "id": "get.dto.dr.NfsFile",
            "required": [],
            "properties": {
                "consistency_group": {
                    "type": "string"
                },
                "nfs_file_path": {
                    "type": "string"
                },
                "nfs_handle": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "get.dto.dr.OutOfBandSchedulePoliciesDTO": {
            "id": "get.dto.dr.OutOfBandSchedulePoliciesDTO",
            "required": [],
            "properties": {
                "pd_name": {
                    "type": "string"
                },
                "schedule_map": {
                    "$ref": "java.util.Map&lt;java.lang.Long, get.dto.dr.OutOfBandSchedulePoliciesDTO$Schedule&gt;"
                }
            }
        },
        "get.dto.dr.PdPendingActionsDTO": {
            "id": "get.dto.dr.PdPendingActionsDTO",
            "required": [],
            "properties": {
                "has_pending_actions": {
                    "type": "boolean"
                },
                "marked_for_removal": {
                    "type": "boolean"
                },
                "pending_change_mode": {
                    "$ref": "get.dto.dr.PdPendingActionsDTO$PendingChangeMode"
                },
                "pending_nfs_files_restore": {
                    "items": {
                        "$ref": "get.dto.dr.PdPendingActionsDTO$PendingEntityRestore"
                    },
                    "type": "array"
                },
                "pending_replications": {
                    "items": {
                        "$ref": "get.dto.dr.PdPendingActionsDTO$PendingReplication"
                    },
                    "type": "array"
                },
                "pending_vms_restore": {
                    "items": {
                        "$ref": "get.dto.dr.PdPendingActionsDTO$PendingEntityRestore"
                    },
                    "type": "array"
                },
                "protection_domain_name": {
                    "type": "string"
                },
                "to_be_removed_nfs_files": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "to_be_removed_snapshots": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "to_be_removed_vms": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.dr.PdPendingActionsDTO$PendingChangeMode": {
            "id": "get.dto.dr.PdPendingActionsDTO$PendingChangeMode",
            "required": [],
            "properties": {
                "failover_remote": {
                    "type": "string"
                },
                "mode_type": {
                    "enum": [
                        "ACTIVATE_PD",
                        "DEACTIVATE_PD",
                        "MIGRATE_PD"
                    ],
                    "type": "string"
                },
                "snapshot_id": {
                    "type": "string"
                }
            }
        },
        "get.dto.dr.PdPendingActionsDTO$PendingEntityRestore": {
            "id": "get.dto.dr.PdPendingActionsDTO$PendingEntityRestore",
            "required": [],
            "properties": {
                "name": {
                    "type": "string"
                },
                "path_prefix": {
                    "type": "string"
                },
                "replace_entity": {
                    "type": "boolean"
                },
                "snapshot_id": {
                    "type": "string"
                }
            }
        },
        "get.dto.dr.PdPendingActionsDTO$PendingReplication": {
            "id": "get.dto.dr.PdPendingActionsDTO$PendingReplication",
            "required": [],
            "properties": {
                "remote_site": {
                    "type": "string"
                },
                "snapshot_ids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.dr.PendingReplicationDTO": {
            "id": "get.dto.dr.PendingReplicationDTO",
            "required": [],
            "properties": {
                "protection_domain_name": {
                    "type": "string"
                },
                "remote_site_name": {
                    "type": "string"
                },
                "snapshot": {
                    "$ref": "get.dto.dr.SnapshotDTO"
                }
            }
        },
        "get.dto.dr.ProtectionDomainDTO": {
            "id": "get.dto.dr.ProtectionDomainDTO",
            "required": [],
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "alert_summary": {
                    "$ref": "get.dto.alerts.AlertSummaryDTO"
                },
                "annotations": {
                    "description": "Annotations for the protection domain",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "cron_schedules": {
                    "items": {
                        "$ref": "get.dto.dr.CronScheduleDTO"
                    },
                    "type": "array"
                },
                "health_summary": {
                    "$ref": "get.dto.health.check.HealthSummaryDTO"
                },
                "hybrid_schedules_count": {
                    "description": "Number of hybrid schedules present in the protections domain.",
                    "format": "int32",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "marked_for_removal": {
                    "type": "boolean"
                },
                "metro_avail": {
                    "$ref": "get.dto.dr.ProtectionDomainDTO$Stretch"
                },
                "min_snapshot_to_retain": {
                    "format": "int32",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "next_snapshot_time_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "nfs_files": {
                    "items": {
                        "$ref": "get.dto.dr.NfsFile"
                    },
                    "type": "array"
                },
                "ongoing_replication_count": {
                    "format": "int64",
                    "type": "integer"
                },
                "pending_replication_count": {
                    "format": "int64",
                    "type": "integer"
                },
                "remote_site_names": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "replication_links": {
                    "items": {
                        "$ref": "get.dto.dr.ReplicationLinkDTO"
                    },
                    "type": "array"
                },
                "schedules_suspended": {
                    "description": "Whether the replication schedules has been suspended.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "sync_replications": {
                    "items": {
                        "$ref": "get.dto.dr.SyncReplicationDTO"
                    },
                    "type": "array"
                },
                "total_user_written_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "usage_stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "vms": {
                    "items": {
                        "$ref": "get.dto.dr.VirtualMachine"
                    },
                    "type": "array"
                },
                "volume_groups": {
                    "items": {
                        "$ref": "get.dto.dr.VolumeGroup"
                    },
                    "type": "array"
                },
                "vstore_id": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "get.dto.dr.ProtectionDomainDTO$Stretch": {
            "id": "get.dto.dr.ProtectionDomainDTO$Stretch",
            "required": [],
            "properties": {
                "failure_handling": {
                    "enum": [
                        "NONE",
                        "AUTOMATIC",
                        "MANUAL",
                        "WITNESS"
                    ],
                    "type": "string"
                },
                "remote_site": {
                    "type": "string"
                },
                "role": {
                    "enum": [
                        "ACTIVE",
                        "STANDBY"
                    ],
                    "type": "string"
                },
                "status": {
                    "enum": [
                        "ENABLE_METRO_AVAIL_IN_PROGRESS",
                        "DISABLE_METRO_AVAIL_IN_PROGRESS",
                        "PROMOTE_METRO_AVAIL_IN_PROGRESS",
                        "DEMOTE_METRO_AVAIL_IN_PROGRESS",
                        "REMOTE_UNREACHABLE",
                        "DECOUPLED",
                        "SYNCHRONIZING",
                        "ENABLED",
                        "DISABLED",
                        "SYNC_INCOMPLETE",
                        "PENDING",
                        "ERROR"
                    ],
                    "type": "string"
                },
                "storage_container": {
                    "type": "string"
                }
            }
        },
        "get.dto.dr.ReplicationDTO": {
            "id": "get.dto.dr.ReplicationDTO",
            "required": [],
            "properties": {
                "aborted": {
                    "type": "boolean"
                },
                "completed_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "completed_percentage": {
                    "format": "float",
                    "type": "number"
                },
                "id": {
                    "format": "int64",
                    "type": "integer"
                },
                "paused": {
                    "type": "boolean"
                },
                "protection_domain_name": {
                    "type": "string"
                },
                "remote_site_name": {
                    "type": "string"
                },
                "replication_time_to_complete_secs": {
                    "format": "int64",
                    "type": "integer"
                },
                "sender": {
                    "type": "boolean"
                },
                "snapshot_id": {
                    "type": "string"
                },
                "start_replication_time_usecs": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "get.dto.dr.ReplicationLinkDTO": {
            "id": "get.dto.dr.ReplicationLinkDTO",
            "required": [],
            "properties": {
                "current_replicating_snapshot_id": {
                    "type": "string"
                },
                "current_replicating_snapshot_total_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "current_replicating_snapshot_transmitted_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "last_replication_end_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_replication_start_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_successful_replication_snapshot_id": {
                    "type": "string"
                },
                "protection_domain_name": {
                    "type": "string"
                },
                "remote_site_name": {
                    "type": "string"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                }
            }
        },
        "get.dto.dr.RetentionPolicyDTO": {
            "id": "get.dto.dr.RetentionPolicyDTO",
            "required": [],
            "properties": {
                "d_e_f_a_u_l_t__l_o_c_a_l__r_e_t_e_n_t_i_o_n": {
                    "format": "int32",
                    "type": "integer"
                },
                "d_e_f_a_u_l_t__r_e_m_o_t_e__r_e_t_e_n_t_i_o_n": {
                    "format": "int32",
                    "type": "integer"
                },
                "local_max_snapshots": {
                    "format": "int32",
                    "type": "integer"
                },
                "local_retention_period": {
                    "description": "Maximum number of days/weeks/months a snapshot is to be retained locally.",
                    "format": "int32",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "local_retention_type": {
                    "description": "Retention type for local Snapshots i.e. DAYS/ WEEKS/ MONTHS/ NUM_SNAPSHOTS",
                    "enum": [
                        "NUM_SNAPSHOTS",
                        "DAYS",
                        "WEEKS",
                        "MONTHS"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "remote_max_snapshots": {
                    "$ref": "java.util.HashMap&lt;java.lang.String, java.lang.Integer&gt;"
                },
                "remote_retention_period": {
                    "$ref": "java.util.HashMap&lt;java.lang.String, java.lang.Integer&gt;",
                    "description": "Maximum number of days/weeks/months a remote snapshot is to be retained remotely.",
                    "typeName": "DEFAULT"
                },
                "remote_retention_type": {
                    "$ref": "java.util.HashMap&lt;java.lang.String, get.dto.dr.RetentionPolicyDTO$RetentionType&gt;",
                    "description": "Retention type for remote Snapshots i.e. DAYS/ WEEKS/ MONTHS/ NUM_SNAPSHOTS",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.dr.SnapshotDTO": {
            "id": "get.dto.dr.SnapshotDTO",
            "required": [],
            "properties": {
                "consistency_groups": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "exclusive_usage_in_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "located_remote_site_name": {
                    "type": "string"
                },
                "nfs_files": {
                    "items": {
                        "$ref": "get.dto.dr.NfsFile"
                    },
                    "type": "array"
                },
                "oob_schedule_ids": {
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "type": "array"
                },
                "protection_domain_name": {
                    "type": "string"
                },
                "remote_site_names": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "size_in_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "snapshot_create_time_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "snapshot_expiry_time_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "snapshot_id": {
                    "type": "string"
                },
                "snapshot_uuid": {
                    "type": "string"
                },
                "state": {
                    "enum": [
                        "EXPIRED",
                        "RETAIN_FOREVER",
                        "AVAILABLE",
                        "SCHEDULED"
                    ],
                    "type": "string"
                },
                "vms": {
                    "items": {
                        "$ref": "get.dto.dr.VirtualMachine"
                    },
                    "type": "array"
                },
                "volume_groups": {
                    "items": {
                        "$ref": "get.dto.dr.VolumeGroup"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.dr.SyncReplicationDTO": {
            "id": "get.dto.dr.SyncReplicationDTO",
            "required": [],
            "properties": {
                "id": {
                    "type": "string"
                },
                "protection_domain_name": {
                    "type": "string"
                },
                "remote_site_name": {
                    "type": "string"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                }
            }
        },
        "get.dto.dr.VirtualMachine": {
            "id": "get.dto.dr.VirtualMachine",
            "required": [],
            "properties": {
                "app_consistent_snapshots": {
                    "description": "Whether consistency group performs app consistent snapshots",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "consistency_group": {
                    "description": "Consistency group of a vm",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "related_entity_uuids": {
                    "description": "List of UUIDs of entities related to this VM e.g. the attached volume groups",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "vm_files": {
                    "description": "Files composing the VM",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "vm_handle": {
                    "description": "Internal data-structure used by Cerebro to uniquely identify a vm Should it be displayed to user?",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "vm_id": {
                    "description": "Unique identifier of a virtual machine within a Hypervisor.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vm_name": {
                    "description": "Display name of a virtual machine",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vm_power_state_on_recovery": {
                    "description": "Power state after vm recovery. Default power state is POWEREDOFF.",
                    "enum": [
                        "Powered Off",
                        "Powered On",
                        "Power state at time of snapshot"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vm_recoverability": {
                    "description": "Describes this VM's recovery capabilities",
                    "items": {
                        "$ref": "get.dto.dr.VmRecoverabilityDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.dr.VmRecoverabilityDTO": {
            "id": "get.dto.dr.VmRecoverabilityDTO",
            "required": [],
            "properties": {
                "cerebro_error": {
                    "description": "Cerebro error code for why VM can't be recovered/migrated",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "reason": {
                    "description": "Human-readable string why VM can't be recovered/migrated",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "remote_site": {
                    "description": "Name of the remote site where this VM can't be recovered (Optional)",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.dr.VolumeGroup": {
            "id": "get.dto.dr.VolumeGroup",
            "required": [],
            "properties": {
                "consistency_group": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nfs_file_paths": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "related_entity_uuids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "volume_group_uuid": {
                    "type": "string"
                }
            }
        },
        "get.dto.health.check.EntityTypeHealthCheckSummaryDTO": {
            "id": "get.dto.health.check.EntityTypeHealthCheckSummaryDTO",
            "required": [],
            "properties": {
                "checks_in_error": {
                    "$ref": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;"
                },
                "detailed_check_summary": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;"
                }
            }
        },
        "get.dto.health.check.HealthSummaryDTO": {
            "id": "get.dto.health.check.HealthSummaryDTO",
            "required": [],
            "properties": {
                "entity_type_summaries": {
                    "items": {
                        "$ref": "get.dto.health.check.EntityTypeHealthCheckSummaryDTO"
                    },
                    "type": "array"
                },
                "health_check_summaries": {
                    "$ref": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;"
                },
                "health_status": {
                    "enum": [
                        "Critical",
                        "Warning",
                        "Good",
                        "Unknown",
                        "Error"
                    ],
                    "type": "string"
                }
            }
        },
        "get.dto.ngt.NutanixGuestToolsDTO": {
            "id": "get.dto.ngt.NutanixGuestToolsDTO",
            "required": [],
            "properties": {
                "applications": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;",
                    "description": "Map of application names and is it enabled.",
                    "notes": "Map of application names and is it enabled.",
                    "typeName": "DEFAULT"
                },
                "cluster_version": {
                    "description": "Version of NGT available on the cluster.",
                    "notes": "Version of NGT on the cluster.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "communication_link_active": {
                    "description": "Communication from vm to cvm is active or not.",
                    "notes": "Communication from vm to cvm is active or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "enabled": {
                    "description": "Nutanix Guest Tools are enabled or not.",
                    "notes": "Nutanix Guest Tools are enabled or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "installed_version": {
                    "description": "Version of NGT installed on the VM.",
                    "notes": "Version of NGT installed.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "to_remove": {
                    "description": "Whether Nutanix Guest Tools is removed or not.",
                    "notes": "Whether Nutanix Guest Tools is removed or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "tools_mounted": {
                    "description": "Nutanix Guest Tools ISO is mounted or not.",
                    "notes": "Nutanix Guest Tools ISO is mounted or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "vm_id": {
                    "description": "Unique identifier of VM.",
                    "notes": "Unique identifier of VM.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vm_name": {
                    "description": "Name of VM.",
                    "notes": "Name of VM.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vm_uuid": {
                    "description": "UUID of the Virtual Machine.",
                    "notes": "UUID of the Virtual Machine.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.stats.VMDTO": {
            "id": "get.dto.stats.VMDTO",
            "required": [],
            "properties": {
                "acropolis_vm": {
                    "type": "boolean"
                },
                "alert_summary": {
                    "$ref": "get.dto.alerts.AlertSummaryDTO"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "consistency_group_name": {
                    "type": "string"
                },
                "control_domain": {
                    "description": "Whether the VM is a control domain. Applicable only for XenServer.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "controller_vm": {
                    "type": "boolean"
                },
                "cpu_reserved_in_hz": {
                    "format": "int64",
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "disk_capacity_in_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "displayable": {
                    "type": "boolean"
                },
                "finger_print_on_write": {
                    "enum": [
                        "NONE",
                        "OFF",
                        "ON"
                    ],
                    "type": "string"
                },
                "gpus_in_use": {
                    "type": "boolean"
                },
                "guest_operating_system": {
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "get.dto.health.check.HealthSummaryDTO"
                },
                "host_id": {
                    "type": "string"
                },
                "host_name": {
                    "type": "string"
                },
                "host_uuid": {
                    "type": "string"
                },
                "hypervisor_type": {
                    "type": "string"
                },
                "ip_addresses": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "memory_capacity_in_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "memory_reserved_capacity_in_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "non_ndfs_details": {
                    "type": "string"
                },
                "num_network_adapters": {
                    "format": "int64",
                    "type": "integer"
                },
                "num_v_cpus": {
                    "format": "int32",
                    "type": "integer"
                },
                "nutanix_guest_tools": {
                    "$ref": "get.dto.ngt.NutanixGuestToolsDTO"
                },
                "nutanix_virtual_disk_ids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "nutanix_virtual_disk_uuids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "nutanix_virtual_disks": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "on_disk_dedup": {
                    "enum": [
                        "NONE",
                        "OFF",
                        "POST_PROCESS"
                    ],
                    "type": "string"
                },
                "power_state": {
                    "type": "string"
                },
                "protection_domain_name": {
                    "type": "string"
                },
                "protection_type": {
                    "type": "string"
                },
                "running_on_ndfs": {
                    "type": "boolean"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "storage_container_ids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "storage_container_uuids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "usage_stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "uuid": {
                    "type": "string"
                },
                "vdisk_file_paths": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "vdisk_names": {
                    "description": "Names of vdisks associated with this VM",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "virtual_nic_ids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "virtual_nic_uuids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "vm_features": {
                    "$ref": "java.util.Map&lt;get.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;",
                    "description": "List of features to be enabled for the Virtual Machine.",
                    "notes": "List of features to be enabled for the Virtual Machine.",
                    "typeName": "DEFAULT"
                },
                "vm_id": {
                    "type": "string"
                },
                "vm_name": {
                    "type": "string"
                }
            }
        },
        "java.util.HashMap&lt;java.lang.String, create.dto.dr.RetentionPolicyDTO$RetentionType&gt;": {
            "id": "java.util.HashMap&lt;java.lang.String, create.dto.dr.RetentionPolicyDTO$RetentionType&gt;",
            "required": [],
            "properties": {
                "d_e_f_a_u_l_t__i_n_i_t_i_a_l__c_a_p_a_c_i_t_y": {
                    "format": "int32",
                    "type": "integer"
                },
                "d_e_f_a_u_l_t__l_o_a_d__f_a_c_t_o_r": {
                    "format": "float",
                    "type": "number"
                },
                "entry_set": {
                    "items": {
                        "$ref": "java.util.Map$Entry&lt;unknown, unknown&gt;"
                    },
                    "type": "array",
                    "uniqueItems": "true"
                },
                "load_factor": {
                    "format": "float",
                    "type": "number"
                },
                "m_a_x_i_m_u_m__c_a_p_a_c_i_t_y": {
                    "format": "int32",
                    "type": "integer"
                },
                "m_i_n__t_r_e_e_i_f_y__c_a_p_a_c_i_t_y": {
                    "format": "int32",
                    "type": "integer"
                },
                "mod_count": {
                    "format": "int32",
                    "type": "integer"
                },
                "size": {
                    "format": "int32",
                    "type": "integer"
                },
                "t_r_e_e_i_f_y__t_h_r_e_s_h_o_l_d": {
                    "format": "int32",
                    "type": "integer"
                },
                "table": {},
                "threshold": {
                    "format": "int32",
                    "type": "integer"
                },
                "u_n_t_r_e_e_i_f_y__t_h_r_e_s_h_o_l_d": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "java.util.HashMap&lt;java.lang.String, delete.dto.dr.RetentionPolicyDTO$RetentionType&gt;": {
            "id": "java.util.HashMap&lt;java.lang.String, delete.dto.dr.RetentionPolicyDTO$RetentionType&gt;",
            "required": [],
            "properties": {
                "d_e_f_a_u_l_t__i_n_i_t_i_a_l__c_a_p_a_c_i_t_y": {
                    "format": "int32",
                    "type": "integer"
                },
                "d_e_f_a_u_l_t__l_o_a_d__f_a_c_t_o_r": {
                    "format": "float",
                    "type": "number"
                },
                "entry_set": {
                    "items": {
                        "$ref": "java.util.Map$Entry&lt;unknown, unknown&gt;"
                    },
                    "type": "array",
                    "uniqueItems": "true"
                },
                "load_factor": {
                    "format": "float",
                    "type": "number"
                },
                "m_a_x_i_m_u_m__c_a_p_a_c_i_t_y": {
                    "format": "int32",
                    "type": "integer"
                },
                "m_i_n__t_r_e_e_i_f_y__c_a_p_a_c_i_t_y": {
                    "format": "int32",
                    "type": "integer"
                },
                "mod_count": {
                    "format": "int32",
                    "type": "integer"
                },
                "size": {
                    "format": "int32",
                    "type": "integer"
                },
                "t_r_e_e_i_f_y__t_h_r_e_s_h_o_l_d": {
                    "format": "int32",
                    "type": "integer"
                },
                "table": {},
                "threshold": {
                    "format": "int32",
                    "type": "integer"
                },
                "u_n_t_r_e_e_i_f_y__t_h_r_e_s_h_o_l_d": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "java.util.HashMap&lt;java.lang.String, get.dto.dr.RetentionPolicyDTO$RetentionType&gt;": {
            "id": "java.util.HashMap&lt;java.lang.String, get.dto.dr.RetentionPolicyDTO$RetentionType&gt;",
            "required": [],
            "properties": {
                "d_e_f_a_u_l_t__i_n_i_t_i_a_l__c_a_p_a_c_i_t_y": {
                    "format": "int32",
                    "type": "integer"
                },
                "d_e_f_a_u_l_t__l_o_a_d__f_a_c_t_o_r": {
                    "format": "float",
                    "type": "number"
                },
                "entry_set": {
                    "items": {
                        "$ref": "java.util.Map$Entry&lt;unknown, unknown&gt;"
                    },
                    "type": "array",
                    "uniqueItems": "true"
                },
                "load_factor": {
                    "format": "float",
                    "type": "number"
                },
                "m_a_x_i_m_u_m__c_a_p_a_c_i_t_y": {
                    "format": "int32",
                    "type": "integer"
                },
                "m_i_n__t_r_e_e_i_f_y__c_a_p_a_c_i_t_y": {
                    "format": "int32",
                    "type": "integer"
                },
                "mod_count": {
                    "format": "int32",
                    "type": "integer"
                },
                "size": {
                    "format": "int32",
                    "type": "integer"
                },
                "t_r_e_e_i_f_y__t_h_r_e_s_h_o_l_d": {
                    "format": "int32",
                    "type": "integer"
                },
                "table": {},
                "threshold": {
                    "format": "int32",
                    "type": "integer"
                },
                "u_n_t_r_e_e_i_f_y__t_h_r_e_s_h_o_l_d": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "java.util.HashMap&lt;java.lang.String, java.lang.Integer&gt;": {
            "id": "java.util.HashMap&lt;java.lang.String, java.lang.Integer&gt;",
            "required": [],
            "properties": {
                "d_e_f_a_u_l_t__i_n_i_t_i_a_l__c_a_p_a_c_i_t_y": {
                    "format": "int32",
                    "type": "integer"
                },
                "d_e_f_a_u_l_t__l_o_a_d__f_a_c_t_o_r": {
                    "format": "float",
                    "type": "number"
                },
                "entry_set": {
                    "items": {
                        "$ref": "java.util.Map$Entry&lt;unknown, unknown&gt;"
                    },
                    "type": "array",
                    "uniqueItems": "true"
                },
                "load_factor": {
                    "format": "float",
                    "type": "number"
                },
                "m_a_x_i_m_u_m__c_a_p_a_c_i_t_y": {
                    "format": "int32",
                    "type": "integer"
                },
                "m_i_n__t_r_e_e_i_f_y__c_a_p_a_c_i_t_y": {
                    "format": "int32",
                    "type": "integer"
                },
                "mod_count": {
                    "format": "int32",
                    "type": "integer"
                },
                "size": {
                    "format": "int32",
                    "type": "integer"
                },
                "t_r_e_e_i_f_y__t_h_r_e_s_h_o_l_d": {
                    "format": "int32",
                    "type": "integer"
                },
                "table": {},
                "threshold": {
                    "format": "int32",
                    "type": "integer"
                },
                "u_n_t_r_e_e_i_f_y__t_h_r_e_s_h_o_l_d": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "java.util.HashMap&lt;java.lang.String, update.dto.dr.RetentionPolicyDTO$RetentionType&gt;": {
            "id": "java.util.HashMap&lt;java.lang.String, update.dto.dr.RetentionPolicyDTO$RetentionType&gt;",
            "required": [],
            "properties": {
                "d_e_f_a_u_l_t__i_n_i_t_i_a_l__c_a_p_a_c_i_t_y": {
                    "format": "int32",
                    "type": "integer"
                },
                "d_e_f_a_u_l_t__l_o_a_d__f_a_c_t_o_r": {
                    "format": "float",
                    "type": "number"
                },
                "entry_set": {
                    "items": {
                        "$ref": "java.util.Map$Entry&lt;unknown, unknown&gt;"
                    },
                    "type": "array",
                    "uniqueItems": "true"
                },
                "load_factor": {
                    "format": "float",
                    "type": "number"
                },
                "m_a_x_i_m_u_m__c_a_p_a_c_i_t_y": {
                    "format": "int32",
                    "type": "integer"
                },
                "m_i_n__t_r_e_e_i_f_y__c_a_p_a_c_i_t_y": {
                    "format": "int32",
                    "type": "integer"
                },
                "mod_count": {
                    "format": "int32",
                    "type": "integer"
                },
                "size": {
                    "format": "int32",
                    "type": "integer"
                },
                "t_r_e_e_i_f_y__t_h_r_e_s_h_o_l_d": {
                    "format": "int32",
                    "type": "integer"
                },
                "table": {},
                "threshold": {
                    "format": "int32",
                    "type": "integer"
                },
                "u_n_t_r_e_e_i_f_y__t_h_r_e_s_h_o_l_d": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "java.util.Map$Entry&lt;unknown, unknown&gt;": {
            "id": "java.util.Map$Entry&lt;unknown, unknown&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;create.dto.alerts.AlertDTO$AlertSeverity, create.base.EntityCollection&lt;create.dto.alerts.AlertDTO&gt;&gt;": {
            "id": "java.util.Map&lt;create.dto.alerts.AlertDTO$AlertSeverity, create.base.EntityCollection&lt;create.dto.alerts.AlertDTO&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;": {
            "id": "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;get.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;": {
            "id": "java.util.Map&lt;get.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.Long, get.dto.dr.OutOfBandSchedulePoliciesDTO$Schedule&gt;": {
            "id": "java.util.Map&lt;java.lang.Long, get.dto.dr.OutOfBandSchedulePoliciesDTO$Schedule&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckErrorsDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckErrorsDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckSummaryDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckSummaryDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.lang.String&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.lang.String&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckErrorsDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckErrorsDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckSummaryDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckSummaryDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;update.dto.alerts.AlertDTO$AlertSeverity, update.base.EntityCollection&lt;update.dto.alerts.AlertDTO&gt;&gt;": {
            "id": "java.util.Map&lt;update.dto.alerts.AlertDTO$AlertSeverity, update.base.EntityCollection&lt;update.dto.alerts.AlertDTO&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "update.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "update.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "update.dto.PrimitiveDTO&lt;java.lang.String&gt;": {
            "id": "update.dto.PrimitiveDTO&lt;java.lang.String&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "update.dto.alerts.AlertSummaryDTO": {
            "id": "update.dto.alerts.AlertSummaryDTO",
            "required": [],
            "properties": {
                "alert_summaries": {
                    "$ref": "java.util.Map&lt;update.dto.alerts.AlertDTO$AlertSeverity, update.base.EntityCollection&lt;update.dto.alerts.AlertDTO&gt;&gt;"
                },
                "count": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "update.dto.dr.ConsistencyGroupDTO": {
            "id": "update.dto.dr.ConsistencyGroupDTO",
            "required": [],
            "properties": {
                "app_consistent_snapshots": {
                    "type": "boolean"
                },
                "consistency_group_name": {
                    "type": "string"
                },
                "marked_for_removal": {
                    "type": "boolean"
                },
                "nfs_file_count": {
                    "format": "int32",
                    "type": "integer"
                },
                "protection_domain_name": {
                    "type": "string"
                },
                "total_file_count": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_file_size_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "vm_count": {
                    "format": "int32",
                    "type": "integer"
                },
                "within_snapshot": {
                    "type": "boolean"
                }
            }
        },
        "update.dto.dr.CronScheduleDTO": {
            "id": "update.dto.dr.CronScheduleDTO",
            "required": [],
            "properties": {
                "app_consistent": {
                    "description": "Create app consistent snapshots",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "duration_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "end_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "every_nth": {
                    "format": "int32",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "pd_name": {
                    "type": "string"
                },
                "retention_policy": {
                    "$ref": "update.dto.dr.RetentionPolicyDTO"
                },
                "start_times_in_usecs": {
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "type": "array"
                },
                "suspended": {
                    "type": "boolean"
                },
                "timezone_offset": {
                    "description": "Timezone offset in seconds w.r.t GMT in which the start time is being specified. Defaults to 0, which is GMT",
                    "format": "int32",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "type": {
                    "enum": [
                        "SECONDLY",
                        "MINUTELY",
                        "HOURLY",
                        "DAILY",
                        "WEEKLY",
                        "MONTHLY"
                    ],
                    "type": "string"
                },
                "user_start_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "values": {
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "type": "array"
                }
            }
        },
        "update.dto.dr.FailureHandlingDTO": {
            "id": "update.dto.dr.FailureHandlingDTO",
            "required": [
                "failure_handling_mode"
            ],
            "properties": {
                "failure_handling_mode": {
                    "description": "Failure handling mode (Modes : [Automatic, Manual, Witness])",
                    "enum": [
                        "NONE",
                        "AUTOMATIC",
                        "MANUAL",
                        "WITNESS"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "local_only": {
                    "description": "Limit the configuration changes only to this cluster",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.dr.NfsFile": {
            "id": "update.dto.dr.NfsFile",
            "required": [],
            "properties": {
                "consistency_group": {
                    "type": "string"
                },
                "nfs_file_path": {
                    "type": "string"
                },
                "nfs_handle": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "update.dto.dr.ProtectionDomainDTO": {
            "id": "update.dto.dr.ProtectionDomainDTO",
            "required": [],
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "alert_summary": {
                    "$ref": "update.dto.alerts.AlertSummaryDTO"
                },
                "annotations": {
                    "description": "Annotations for the protection domain",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "cron_schedules": {
                    "items": {
                        "$ref": "update.dto.dr.CronScheduleDTO"
                    },
                    "type": "array"
                },
                "health_summary": {
                    "$ref": "update.dto.health.check.HealthSummaryDTO"
                },
                "marked_for_removal": {
                    "type": "boolean"
                },
                "metro_avail": {
                    "$ref": "update.dto.dr.ProtectionDomainDTO$Stretch"
                },
                "min_snapshot_to_retain": {
                    "format": "int32",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "next_snapshot_time_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "nfs_files": {
                    "items": {
                        "$ref": "update.dto.dr.NfsFile"
                    },
                    "type": "array"
                },
                "ongoing_replication_count": {
                    "format": "int64",
                    "type": "integer"
                },
                "pending_replication_count": {
                    "format": "int64",
                    "type": "integer"
                },
                "remote_site_names": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "replication_links": {
                    "items": {
                        "$ref": "update.dto.dr.ReplicationLinkDTO"
                    },
                    "type": "array"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "sync_replications": {
                    "items": {
                        "$ref": "update.dto.dr.SyncReplicationDTO"
                    },
                    "type": "array"
                },
                "total_user_written_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "usage_stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "vms": {
                    "items": {
                        "$ref": "update.dto.dr.VirtualMachine"
                    },
                    "type": "array"
                },
                "volume_groups": {
                    "items": {
                        "$ref": "update.dto.dr.VolumeGroup"
                    },
                    "type": "array"
                },
                "vstore_id": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "update.dto.dr.ProtectionDomainDTO$Stretch": {
            "id": "update.dto.dr.ProtectionDomainDTO$Stretch",
            "required": [],
            "properties": {
                "failure_handling": {
                    "enum": [
                        "NONE",
                        "AUTOMATIC",
                        "MANUAL",
                        "WITNESS"
                    ],
                    "type": "string"
                },
                "remote_site": {
                    "type": "string"
                },
                "role": {
                    "enum": [
                        "ACTIVE",
                        "STANDBY"
                    ],
                    "type": "string"
                },
                "status": {
                    "enum": [
                        "ENABLE_METRO_AVAIL_IN_PROGRESS",
                        "DISABLE_METRO_AVAIL_IN_PROGRESS",
                        "PROMOTE_METRO_AVAIL_IN_PROGRESS",
                        "DEMOTE_METRO_AVAIL_IN_PROGRESS",
                        "REMOTE_UNREACHABLE",
                        "DECOUPLED",
                        "SYNCHRONIZING",
                        "ENABLED",
                        "DISABLED",
                        "SYNC_INCOMPLETE",
                        "PENDING",
                        "ERROR"
                    ],
                    "type": "string"
                },
                "storage_container": {
                    "type": "string"
                }
            }
        },
        "update.dto.dr.ReplicationLinkDTO": {
            "id": "update.dto.dr.ReplicationLinkDTO",
            "required": [],
            "properties": {
                "current_replicating_snapshot_id": {
                    "type": "string"
                },
                "current_replicating_snapshot_total_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "current_replicating_snapshot_transmitted_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "last_replication_end_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_replication_start_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_successful_replication_snapshot_id": {
                    "type": "string"
                },
                "protection_domain_name": {
                    "type": "string"
                },
                "remote_site_name": {
                    "type": "string"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                }
            }
        },
        "update.dto.dr.RetentionPolicyDTO": {
            "id": "update.dto.dr.RetentionPolicyDTO",
            "required": [],
            "properties": {
                "d_e_f_a_u_l_t__l_o_c_a_l__r_e_t_e_n_t_i_o_n": {
                    "format": "int32",
                    "type": "integer"
                },
                "d_e_f_a_u_l_t__r_e_m_o_t_e__r_e_t_e_n_t_i_o_n": {
                    "format": "int32",
                    "type": "integer"
                },
                "local_max_snapshots": {
                    "format": "int32",
                    "type": "integer"
                },
                "local_retention_period": {
                    "description": "Maximum number of days/weeks/months a snapshot is to be retained locally.",
                    "format": "int32",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "local_retention_type": {
                    "description": "Retention type for local Snapshots i.e. DAYS/ WEEKS/ MONTHS/ NUM_SNAPSHOTS",
                    "enum": [
                        "NUM_SNAPSHOTS",
                        "DAYS",
                        "WEEKS",
                        "MONTHS"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "remote_max_snapshots": {
                    "$ref": "java.util.HashMap&lt;java.lang.String, java.lang.Integer&gt;"
                },
                "remote_retention_period": {
                    "$ref": "java.util.HashMap&lt;java.lang.String, java.lang.Integer&gt;",
                    "description": "Maximum number of days/weeks/months a remote snapshot is to be retained remotely.",
                    "typeName": "DEFAULT"
                },
                "remote_retention_type": {
                    "$ref": "java.util.HashMap&lt;java.lang.String, update.dto.dr.RetentionPolicyDTO$RetentionType&gt;",
                    "description": "Retention type for remote Snapshots i.e. DAYS/ WEEKS/ MONTHS/ NUM_SNAPSHOTS",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.dr.SyncReplicationDTO": {
            "id": "update.dto.dr.SyncReplicationDTO",
            "required": [],
            "properties": {
                "id": {
                    "type": "string"
                },
                "protection_domain_name": {
                    "type": "string"
                },
                "remote_site_name": {
                    "type": "string"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                }
            }
        },
        "update.dto.dr.VirtualMachine": {
            "id": "update.dto.dr.VirtualMachine",
            "required": [],
            "properties": {
                "app_consistent_snapshots": {
                    "description": "Whether consistency group performs app consistent snapshots",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "consistency_group": {
                    "description": "Consistency group of a vm",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vm_handle": {
                    "description": "Internal data-structure used by Cerebro to uniquely identify a vm Should it be displayed to user?",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "vm_id": {
                    "description": "Unique identifier of a virtual machine within a Hypervisor.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vm_power_state_on_recovery": {
                    "description": "Power state after vm recovery. Default power state is POWEREDOFF.",
                    "enum": [
                        "Powered Off",
                        "Powered On",
                        "Power state at time of snapshot"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.dr.VolumeGroup": {
            "id": "update.dto.dr.VolumeGroup",
            "required": [],
            "properties": {
                "consistency_group": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nfs_file_paths": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "related_entity_uuids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "volume_group_uuid": {
                    "type": "string"
                }
            }
        },
        "update.dto.health.check.EntityTypeHealthCheckSummaryDTO": {
            "id": "update.dto.health.check.EntityTypeHealthCheckSummaryDTO",
            "required": [],
            "properties": {
                "checks_in_error": {
                    "$ref": "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckErrorsDTO&gt;"
                },
                "detailed_check_summary": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;"
                }
            }
        },
        "update.dto.health.check.HealthSummaryDTO": {
            "id": "update.dto.health.check.HealthSummaryDTO",
            "required": [],
            "properties": {
                "entity_type_summaries": {
                    "items": {
                        "$ref": "update.dto.health.check.EntityTypeHealthCheckSummaryDTO"
                    },
                    "type": "array"
                },
                "health_check_summaries": {
                    "$ref": "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckSummaryDTO&gt;"
                },
                "health_status": {
                    "enum": [
                        "Critical",
                        "Warning",
                        "Good",
                        "Unknown",
                        "Error"
                    ],
                    "type": "string"
                }
            }
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/PrismGateway/services/rest/v2.0",
    "resourcePath": "/remote_sites",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/remote_sites/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of Remote Sites.",
                    "notes": "Get the list of Remote Sites configured in the cluster.",
                    "type": "get.base.EntityCollection&lt;get.dto.dr.RemoteSiteDTO&gt;",
                    "nickname": "getAllRemoteSites",
                    "parameters": [
                        {
                            "name": "names",
                            "description": "Remote Site names",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "metro_compatible",
                            "description": "Remote Site stretchable",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "full_details",
                            "description": "Remote cluster detail",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "remoteVStores",
                            "description": "Remote container to fetch",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "include_deleted",
                            "description": "Include deleted",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "projection",
                            "description": "Projections on the attributes",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PATCH",
                    "summary": "Modify a Remote Site.",
                    "notes": "Modify the configuration of the specified Remote Site.",
                    "type": "patch.dto.dr.RemoteSiteDTO",
                    "nickname": "patchRemoteSite",
                    "parameters": [
                        {
                            "description": "A Remote Site instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "patch.dto.RequestDTO&lt;patch.dto.dr.RemoteSiteDTO&gt;"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Add a Remote Site.",
                    "notes": "A remote cluster to be used as a DR site.",
                    "type": "create.dto.dr.RemoteSiteDTO",
                    "nickname": "addRemoteSite",
                    "parameters": [
                        {
                            "description": "A Remote Site instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.dr.RemoteSiteDTO"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Update a Remote Site.",
                    "notes": "Update the configuration of the specified Remote Site.",
                    "type": "update.dto.dr.RemoteSiteDTO",
                    "nickname": "updateRemoteSite",
                    "parameters": [
                        {
                            "description": "A Remote Site instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.dr.RemoteSiteDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/remote_sites/alerts",
            "operations": [
                {
                    "deprecated": "true",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of alerts generated on any Remote Site.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getRemoteSiteAlerts",
                    "parameters": [
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of alerts",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "resolved",
                            "description": "Alerts which have been resolved",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Alerts which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "severity",
                            "description": "Alert severities",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "alert_type_uuid",
                            "description": "Alert type ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/remote_sites/dr_snapshots/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of Snapshots.",
                    "notes": "Get the list of all Snapshots created in Remote Sites.",
                    "type": "get.base.EntityCollection&lt;get.dto.dr.SnapshotDTO&gt;",
                    "nickname": "getAllRemoteSiteSnapshots",
                    "parameters": [
                        {
                            "name": "count",
                            "description": "Maximum number of DR Snapshots to retrieve",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "filter_criteria",
                            "description": "Filter criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "sort_criteria",
                            "description": "Sort criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "full_details",
                            "description": "Whether to include consistency group / vm details",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/remote_sites/events",
            "operations": [
                {
                    "deprecated": "true",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of events generated on any Remote Site.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getRemoteSiteEvents",
                    "parameters": [
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of events",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Events which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/remote_sites/pending_replications/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get all pending replications.",
                    "notes": "Get the list of backlogged/pending replications in the cluster.",
                    "type": "array",
                    "items": {
                        "$ref": "get.dto.dr.PendingReplicationDTO"
                    },
                    "nickname": "getPendingReplications",
                    "parameters": [
                        {
                            "name": "protection_domain_names",
                            "description": "Protection Domain Names",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "remote_site_names",
                            "description": "Remote Site Names",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/remote_sites/{name}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete a Remote Site.",
                    "notes": "Delete a Remote Site with the specified name from the cluster.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "markRemoteSiteForRemoval",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Remote Site",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get a Remote Site.",
                    "notes": "Get a Remote Site with the specified name.",
                    "type": "get.dto.dr.RemoteSiteDTO",
                    "nickname": "getRemoteSite",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Remote Site",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "projection",
                            "description": "Projections on the attributes",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/remote_sites/{name}/alerts",
            "operations": [
                {
                    "deprecated": "true",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of alerts generated on a specified Remote Site.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getAlertsForRemoteSite",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Remote Site",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of alerts",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "resolved",
                            "description": "Alerts which have been resolved",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Alerts which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "severity",
                            "description": "Alert severities",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "alert_type_uuid",
                            "description": "Alert type ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/remote_sites/{name}/dr_snapshots/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of Snapshots.",
                    "notes": "Get the list of Snapshots created in a particular Remote Site.",
                    "type": "get.base.EntityCollection&lt;get.dto.dr.SnapshotDTO&gt;",
                    "nickname": "getSnapshotsForRemoteSite",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Remote Site",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of DR Snapshots to retrieve",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "filter_criteria",
                            "description": "Filter criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "sort_criteria",
                            "description": "Sort criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "full_Details",
                            "description": "Whether to include consistency group / vm details",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/remote_sites/{name}/events",
            "operations": [
                {
                    "deprecated": "true",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of events generated on a specified Remote Site.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getEventsForRemoteSite",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Remote Site",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of events",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Events which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/remote_sites/{name}/pending_replications/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get all pending replications for the specified Remote Site.",
                    "notes": "Get the list of backlogged/pending replications for the specified Remote Site in the cluster.",
                    "type": "array",
                    "items": {
                        "$ref": "get.dto.dr.PendingReplicationDTO"
                    },
                    "nickname": "getPendingReplicationsInRemote",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Remote Site",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "protection_domain_names",
                            "description": "Names of Protection Domains",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/remote_sites/{name}/stats/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the stats for a specified Remote Site.",
                    "notes": "If start time and end time are included in the query string, then historical stats are retrieved. Otherwise, the latest stats are retrieved.",
                    "type": "get.base.StatsResponse",
                    "nickname": "getRemoteSiteStats",
                    "parameters": [
                        {
                            "name": "name",
                            "description": "Name of the Remote Site",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "metrics",
                            "description": "List of metrics",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "interval_in_secs",
                            "description": "Sampling interval of stats",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "create.dto.alerts.AlertSummaryDTO": {
            "id": "create.dto.alerts.AlertSummaryDTO",
            "required": [],
            "properties": {
                "alert_summaries": {
                    "$ref": "java.util.Map&lt;create.dto.alerts.AlertDTO$AlertSeverity, create.base.EntityCollection&lt;create.dto.alerts.AlertDTO&gt;&gt;"
                },
                "count": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "create.dto.dr.BandwidthPolicyDTO": {
            "id": "create.dto.dr.BandwidthPolicyDTO",
            "description": "This DTO describes bandwidth throttling policies for different time schedules",
            "required": [
                "policy_name"
            ],
            "properties": {
                "bandwidth_configurations": {
                    "description": "List of the policy configurations.",
                    "items": {
                        "$ref": "create.dto.dr.BandwidthPolicyDTO$BandwidthScheduleConfiguration"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "default_bandwidth_limit": {
                    "description": "Default bandwidth limit",
                    "format": "int32",
                    "notes": "This bandwidth is used in the time which is not covered by any of the existing schedule. Because every schedule will be having their own bandwidth limit defined.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "policy_name": {
                    "description": "Name of the bandwidth Throttling policy.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.dr.BandwidthPolicyDTO$BandwidthScheduleConfiguration": {
            "id": "create.dto.dr.BandwidthPolicyDTO$BandwidthScheduleConfiguration",
            "required": [],
            "properties": {
                "bandwidth_limit": {
                    "description": "Bandwidth limit for the policy.",
                    "format": "int32",
                    "notes": "At the time of policy consideration this bandwidth limit will be used to limit the bandwidth used.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "days_selected": {
                    "description": "Days selected in a week.",
                    "format": "int32",
                    "notes": "This field describes the selected days of the week for this policy configuration.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "end_time": {
                    "description": "End time of the policy",
                    "format": "int64",
                    "notes": "End time of the policy in milliseconds.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "start_time": {
                    "description": "Start time of the policy",
                    "format": "int64",
                    "notes": "Start time of the policy in milliseconds.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.dr.L2NetworkMappingDTO": {
            "id": "create.dto.dr.L2NetworkMappingDTO",
            "required": [],
            "properties": {
                "dest_hypervisor_type": {
                    "type": "string"
                },
                "dest_network_name": {
                    "type": "string"
                },
                "src_hypervisor_type": {
                    "type": "string"
                },
                "src_network_name": {
                    "type": "string"
                }
            }
        },
        "create.dto.dr.NetworkMappingDTO": {
            "id": "create.dto.dr.NetworkMappingDTO",
            "description": "This DTO describes network mapping from source to destination cluster based on network uuids ",
            "required": [],
            "properties": {
                "l2_network_mappings": {
                    "description": "List of L2NetworkMappingDTOs which contains name and hypervisor type of the mapped networks",
                    "items": {
                        "$ref": "create.dto.dr.L2NetworkMappingDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "Network mapping identifier for this remote site",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.dr.RemoteSiteDTO": {
            "id": "create.dto.dr.RemoteSiteDTO",
            "description": "remote-site",
            "required": [],
            "properties": {
                "alert_summary": {
                    "$ref": "create.dto.alerts.AlertSummaryDTO"
                },
                "bandwidth_policy": {
                    "$ref": "create.dto.dr.BandwidthPolicyDTO"
                },
                "bandwidth_policy_enabled": {
                    "type": "boolean"
                },
                "capabilities": {
                    "items": {
                        "enum": [
                            "BACKUP",
                            "DISASTER_RECOVERY",
                            "METRO_AVAILABILITY",
                            "SUPPORT_DEDUPED_EXTENTS",
                            "SUPPORT_VSPHERE",
                            "SUPPORT_HYPERV",
                            "SUPPORT_KVM"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "cloud_type": {
                    "description": "Cloud type",
                    "enum": [
                        "AWS",
                        "AZURE"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "cluster_external_data_services_i_p_address": {
                    "type": "string"
                },
                "cluster_id": {
                    "format": "int64",
                    "type": "integer"
                },
                "cluster_incarnation_id": {
                    "format": "int64",
                    "type": "integer"
                },
                "compression_enabled": {
                    "type": "boolean"
                },
                "credential_name": {
                    "description": "Credential Name",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "cvm_name": {
                    "description": "CVM Name",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "health_summary": {
                    "$ref": "create.dto.health.check.HealthSummaryDTO"
                },
                "latency_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "marked_for_removal": {
                    "type": "boolean"
                },
                "max_bps": {
                    "format": "int32",
                    "type": "integer"
                },
                "metro_ready": {
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of the remote site.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "network_mapping": {
                    "$ref": "create.dto.dr.NetworkMappingDTO"
                },
                "proxy_enabled": {
                    "type": "boolean"
                },
                "region": {
                    "description": "Region",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "remote_ip_ports": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.Integer&gt;",
                    "description": "Dictionary having IP address as key and Port as value",
                    "typeName": "DEFAULT"
                },
                "remote_v_store_info": {
                    "$ref": "java.util.Map&lt;java.lang.String, create.dto.dr.RemoteSiteDTO$VStoreInfo&gt;"
                },
                "replication_links": {
                    "items": {
                        "$ref": "create.dto.dr.ReplicationLinkDTO"
                    },
                    "type": "array"
                },
                "ssh_enabled": {
                    "type": "boolean"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "status": {
                    "enum": [
                        "HANDSHAKING",
                        "UNREACHABLE",
                        "STRETCH_UNHEALTHY",
                        "RELATIONSHIP_NOT_ESTABLISHED",
                        "RELATIONSHIP_ESTABLISHED",
                        "DEPLOYING"
                    ],
                    "type": "string"
                },
                "usage_stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "uuid": {
                    "description": "Uuid of the remote site.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vstore_name_map": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;",
                    "description": "Dictionary having map of local vStore to remote vStore",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.dr.ReplicationLinkDTO": {
            "id": "create.dto.dr.ReplicationLinkDTO",
            "required": [],
            "properties": {
                "current_replicating_snapshot_id": {
                    "type": "string"
                },
                "current_replicating_snapshot_total_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "current_replicating_snapshot_transmitted_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "last_replication_end_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_replication_start_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_successful_replication_snapshot_id": {
                    "type": "string"
                },
                "protection_domain_name": {
                    "type": "string"
                },
                "remote_site_name": {
                    "type": "string"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                }
            }
        },
        "create.dto.health.check.EntityTypeHealthCheckSummaryDTO": {
            "id": "create.dto.health.check.EntityTypeHealthCheckSummaryDTO",
            "required": [],
            "properties": {
                "checks_in_error": {
                    "$ref": "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckErrorsDTO&gt;"
                },
                "detailed_check_summary": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;"
                }
            }
        },
        "create.dto.health.check.HealthSummaryDTO": {
            "id": "create.dto.health.check.HealthSummaryDTO",
            "required": [],
            "properties": {
                "entity_type_summaries": {
                    "items": {
                        "$ref": "create.dto.health.check.EntityTypeHealthCheckSummaryDTO"
                    },
                    "type": "array"
                },
                "health_check_summaries": {
                    "$ref": "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckSummaryDTO&gt;"
                },
                "health_status": {
                    "enum": [
                        "Critical",
                        "Warning",
                        "Good",
                        "Unknown",
                        "Error"
                    ],
                    "type": "string"
                }
            }
        },
        "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.ResultContentDescriptor"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.dr.RemoteSiteDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.dr.RemoteSiteDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.dr.RemoteSiteDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.dr.SnapshotDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.dr.SnapshotDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.dr.SnapshotDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.base.StatsResponse": {
            "id": "get.base.StatsResponse",
            "required": [],
            "properties": {
                "stats_specific_responses": {
                    "items": {
                        "$ref": "get.base.StatsResponse$StatsSpecificResponse"
                    },
                    "type": "array"
                }
            }
        },
        "get.base.StatsResponse$StatsSpecificResponse": {
            "id": "get.base.StatsResponse$StatsSpecificResponse",
            "required": [],
            "properties": {
                "interval_in_secs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "metric": {
                    "type": "string"
                },
                "start_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "successful": {
                    "type": "boolean"
                },
                "values": {
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.EntityMetadata": {
            "id": "get.dto.EntityMetadata",
            "required": [],
            "properties": {
                "additional_fields": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "context_hint_field": {
                    "type": "string"
                },
                "context_hint_value": {
                    "type": "string"
                },
                "entity_id": {
                    "type": "string"
                },
                "entity_name": {
                    "type": "string"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                }
            }
        },
        "get.dto.ResultContentDescriptor": {
            "id": "get.dto.ResultContentDescriptor",
            "required": [],
            "properties": {
                "metadata": {
                    "$ref": "get.dto.ResultMetadata"
                },
                "perspectives": {
                    "items": {
                        "$ref": "get.dto.ResultContentDescriptor$Perspective"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.ResultContentDescriptor$Perspective": {
            "id": "get.dto.ResultContentDescriptor$Perspective",
            "required": [],
            "properties": {
                "format": {
                    "enum": [
                        "TABLE",
                        "BAR_CHART",
                        "PIE_CHART",
                        "TIME_SERIES",
                        "KEY_VALUE",
                        "COUNT",
                        "HEALTH_SUMMARY",
                        "ALERT_INFO",
                        "CAPACITY",
                        "OTHER"
                    ],
                    "type": "string"
                },
                "metadata": {
                    "$ref": "get.dto.ResultMetadata"
                },
                "query": {},
                "result": {},
                "type": {
                    "type": "string"
                }
            }
        },
        "get.dto.ResultMetadata": {
            "id": "get.dto.ResultMetadata",
            "required": [],
            "properties": {
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filters": {
                    "items": {
                        "$ref": "get.dto.ResultMetadata$Filter"
                    },
                    "type": "array"
                },
                "instances": {
                    "items": {
                        "$ref": "get.dto.EntityMetadata"
                    },
                    "type": "array"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "get.dto.ResultMetadata$Filter": {
            "id": "get.dto.ResultMetadata$Filter",
            "required": [],
            "properties": {
                "display_for_rhs": {
                    "type": "string"
                },
                "lhs": {
                    "type": "string"
                },
                "operator": {
                    "description": "Operator for the filter.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "rhs": {
                    "type": "string"
                }
            }
        },
        "get.dto.alerts.AlertCauseDTO": {
            "id": "get.dto.alerts.AlertCauseDTO",
            "required": [],
            "properties": {
                "actions": {
                    "description": "Possible actions to resolve this alert",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "additional_links": {
                    "description": "Additional links",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "alert_namespace": {
                    "description": "Namespace this alert belongs to",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "cause": {
                    "description": "Detailed description",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "chart_queries": {
                    "$ref": "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;",
                    "description": "Charts that are relevant to this cause",
                    "typeName": "DEFAULT"
                },
                "details": {
                    "description": "Symptoms for this cause",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "has_global_details": {
                    "description": "Whether the alert has global details or not",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "id": {
                    "description": "Cause Id",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "num_resolved_count": {
                    "description": "Number of times this cause has resolved the alert",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "parent_cause_id": {
                    "description": "Id of the alert/cause this is a possible cause for",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "title": {
                    "description": "Short description",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "troubleshooting_steps": {
                    "description": "Steps to determine whether this is the cause.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO": {
            "id": "get.dto.alerts.AlertDTO",
            "required": [],
            "properties": {
                "acknowledged": {
                    "type": "boolean"
                },
                "acknowledged_by_username": {
                    "type": "string"
                },
                "acknowledged_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "affected_entities": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$AffectedEntity"
                    },
                    "type": "array"
                },
                "alert_details": {
                    "$ref": "get.dto.alerts.AlertDTO$AlertDetailsDTO"
                },
                "alert_title": {
                    "type": "string"
                },
                "alert_type_uuid": {
                    "type": "string"
                },
                "auto_resolved": {
                    "type": "boolean"
                },
                "check_id": {
                    "type": "string"
                },
                "classifications": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "context_types": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "context_values": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "created_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "detailed_message": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "impact_types": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "last_occurrence_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "node_uuid": {
                    "type": "string"
                },
                "originating_cluster_uuid": {
                    "type": "string"
                },
                "possible_causes": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertCauseDTO"
                    },
                    "type": "array"
                },
                "resolved": {
                    "type": "boolean"
                },
                "resolved_by_username": {
                    "type": "string"
                },
                "resolved_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "service_v_m_id": {
                    "type": "string"
                },
                "severity": {
                    "description": "This field describes the severity of the alert.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "user_defined": {
                    "type": "boolean"
                }
            }
        },
        "get.dto.alerts.AlertDTO$AffectedEntity": {
            "id": "get.dto.alerts.AlertDTO$AffectedEntity",
            "required": [],
            "properties": {
                "entity_name": {
                    "type": "string"
                },
                "entity_type": {
                    "type": "string"
                },
                "entity_type_display_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "get.dto.alerts.AlertDTO$AlertDetailsDTO": {
            "id": "get.dto.alerts.AlertDTO$AlertDetailsDTO",
            "required": [],
            "properties": {
                "metric_details": {
                    "description": "List of metric details associated with the alert",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$MetricDetails"
                    },
                    "notes": "List of metric details associated with the alert",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "severity_trails": {
                    "description": "List that contains severity level change details",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$SeverityTrail"
                    },
                    "notes": "List that contains severity level change details",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$MetricDetails": {
            "id": "get.dto.alerts.AlertDTO$MetricDetails",
            "required": [],
            "properties": {
                "comparison_operator": {
                    "description": "Comparison Operator to be applied for teh values.",
                    "notes": "Comparison Operator",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "condition_type": {
                    "description": "Condition Type that the current metric is associated with.",
                    "enum": [
                        "STATIC_THRESHOLD",
                        "ANOMALY",
                        "SAFETY_ZONE"
                    ],
                    "notes": "Condition Type that the current metric is associated with.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "data_type": {
                    "description": "Data Type of the value.",
                    "enum": [
                        "LONG",
                        "DOUBLE",
                        "BOOLEAN",
                        "STRING"
                    ],
                    "notes": "Data Type of the value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entity_id": {
                    "description": "UUID of the entity",
                    "notes": "UUID of the entity",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entity_type": {
                    "description": "Entity Type",
                    "notes": "Entity Type",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_display_name": {
                    "description": "Display name of the metric",
                    "notes": "Display name of the metric",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_name": {
                    "description": "Name of the metric",
                    "notes": "Name of the metric",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_value_details": {
                    "description": "List of metric values at different instances of time in the alert lifecycle",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$MetricValueDetails"
                    },
                    "notes": "List of metric values at different instances of time in the alert lifecycle",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "unit": {
                    "description": "Unit of the metric value.",
                    "notes": "Unit of the metric value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$MetricValueDetails": {
            "id": "get.dto.alerts.AlertDTO$MetricValueDetails",
            "required": [],
            "properties": {
                "metric_threshold_value": {
                    "description": "Threshold value of the metric that was specified in the policy at that given time.",
                    "notes": "Threshold value of the metric that was specified in the policy at that given time.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_value": {
                    "description": "Actual value of the metric at that given time.",
                    "notes": "Actual value of the metric at that given time.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "state_change_time_stamp_in_usecs": {
                    "description": "Time at which the alert's state change occurred.",
                    "format": "int64",
                    "notes": "Time at which the alert's state change occurred.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$SeverityTrail": {
            "id": "get.dto.alerts.AlertDTO$SeverityTrail",
            "required": [],
            "properties": {
                "severity": {
                    "description": "Severity level of the alert. Can be INFO, WARNING or CRITICAL",
                    "notes": "Severity level of the alert. Can be INFO, WARNING or CRITICAL",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "severity_change_timestamp_in_usecs": {
                    "description": "Time at which the severity level change occurred",
                    "format": "int64",
                    "notes": "Time at which the severity level change occurred",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertSummaryDTO": {
            "id": "get.dto.alerts.AlertSummaryDTO",
            "required": [],
            "properties": {
                "alert_summaries": {
                    "$ref": "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;"
                },
                "count": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "get.dto.dr.BandwidthPolicyDTO": {
            "id": "get.dto.dr.BandwidthPolicyDTO",
            "description": "This DTO describes bandwidth throttling policies for different time schedules",
            "required": [],
            "properties": {
                "bandwidth_configurations": {
                    "description": "List of the policy configurations.",
                    "items": {
                        "$ref": "get.dto.dr.BandwidthPolicyDTO$BandwidthScheduleConfiguration"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "default_bandwidth_limit": {
                    "description": "Default bandwidth limit",
                    "format": "int32",
                    "notes": "This bandwidth is used in the time which is not covered by any of the existing schedule. Because every schedule will be having their own bandwidth limit defined.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "policy_name": {
                    "description": "Name of the bandwidth Throttling policy.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "policy_uuid": {
                    "description": "Uuid of the bandwidth Throttling policy.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.dr.BandwidthPolicyDTO$BandwidthScheduleConfiguration": {
            "id": "get.dto.dr.BandwidthPolicyDTO$BandwidthScheduleConfiguration",
            "required": [],
            "properties": {
                "bandwidth_limit": {
                    "description": "Bandwidth limit for the policy.",
                    "format": "int32",
                    "notes": "At the time of policy consideration this bandwidth limit will be used to limit the bandwidth used.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "days_selected": {
                    "description": "Days selected in a week.",
                    "format": "int32",
                    "notes": "This field describes the selected days of the week for this policy configuration.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "end_time": {
                    "description": "End time of the policy",
                    "format": "int64",
                    "notes": "End time of the policy in milliseconds.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "schedule_uuid": {
                    "description": "Uuid of the bandwidth schedule configuration.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "start_time": {
                    "description": "Start time of the policy",
                    "format": "int64",
                    "notes": "Start time of the policy in milliseconds.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.dr.L2NetworkMappingDTO": {
            "id": "get.dto.dr.L2NetworkMappingDTO",
            "required": [],
            "properties": {
                "dest_hypervisor_type": {
                    "type": "string"
                },
                "dest_network_name": {
                    "type": "string"
                },
                "src_hypervisor_type": {
                    "type": "string"
                },
                "src_network_name": {
                    "type": "string"
                }
            }
        },
        "get.dto.dr.NetworkMappingDTO": {
            "id": "get.dto.dr.NetworkMappingDTO",
            "description": "This DTO describes network mapping from source to destination cluster based on network uuids ",
            "required": [],
            "properties": {
                "l2_network_mappings": {
                    "description": "List of L2NetworkMappingDTOs which contains name and hypervisor type of the mapped networks",
                    "items": {
                        "$ref": "get.dto.dr.L2NetworkMappingDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "Network mapping identifier for this remote site",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.dr.NfsFile": {
            "id": "get.dto.dr.NfsFile",
            "required": [],
            "properties": {
                "consistency_group": {
                    "type": "string"
                },
                "nfs_file_path": {
                    "type": "string"
                },
                "nfs_handle": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "get.dto.dr.PendingReplicationDTO": {
            "id": "get.dto.dr.PendingReplicationDTO",
            "required": [],
            "properties": {
                "protection_domain_name": {
                    "type": "string"
                },
                "remote_site_name": {
                    "type": "string"
                },
                "snapshot": {
                    "$ref": "get.dto.dr.SnapshotDTO"
                }
            }
        },
        "get.dto.dr.RemoteSiteDTO": {
            "id": "get.dto.dr.RemoteSiteDTO",
            "description": "remote-site",
            "required": [],
            "properties": {
                "alert_summary": {
                    "$ref": "get.dto.alerts.AlertSummaryDTO"
                },
                "bandwidth_policy": {
                    "$ref": "get.dto.dr.BandwidthPolicyDTO"
                },
                "bandwidth_policy_enabled": {
                    "type": "boolean"
                },
                "capabilities": {
                    "items": {
                        "enum": [
                            "BACKUP",
                            "DISASTER_RECOVERY",
                            "METRO_AVAILABILITY",
                            "SUPPORT_DEDUPED_EXTENTS",
                            "SUPPORT_VSPHERE",
                            "SUPPORT_HYPERV",
                            "SUPPORT_KVM"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "cloud_type": {
                    "description": "Cloud type",
                    "enum": [
                        "AWS",
                        "AZURE"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "cluster_arch": {
                    "description": "The remote site architecture type. e.g: x86_64, ppc64le.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "cluster_external_data_services_i_p_address": {
                    "type": "string"
                },
                "cluster_id": {
                    "format": "int64",
                    "type": "integer"
                },
                "cluster_incarnation_id": {
                    "format": "int64",
                    "type": "integer"
                },
                "cluster_type": {
                    "description": "Nature of the remote site e.g: light compute, SNB.",
                    "items": {
                        "enum": [
                            "LIGHT_COMPUTE",
                            "SINGLE_NODE_BACKUP"
                        ],
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "compression_enabled": {
                    "type": "boolean"
                },
                "credential_name": {
                    "description": "Credential Name",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "cvm_name": {
                    "description": "CVM Name",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "health_summary": {
                    "$ref": "get.dto.health.check.HealthSummaryDTO"
                },
                "latency_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "marked_for_removal": {
                    "type": "boolean"
                },
                "max_bps": {
                    "format": "int32",
                    "type": "integer"
                },
                "metro_ready": {
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of the remote site.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "network_mapping": {
                    "$ref": "get.dto.dr.NetworkMappingDTO"
                },
                "proxy_enabled": {
                    "type": "boolean"
                },
                "region": {
                    "description": "Region",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "remote_ip_ports": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.Integer&gt;",
                    "description": "Dictionary having IP address as key and Port as value",
                    "typeName": "DEFAULT"
                },
                "remote_v_store_info": {
                    "$ref": "java.util.Map&lt;java.lang.String, get.dto.dr.RemoteSiteDTO$VStoreInfo&gt;"
                },
                "replication_links": {
                    "items": {
                        "$ref": "get.dto.dr.ReplicationLinkDTO"
                    },
                    "type": "array"
                },
                "ssh_enabled": {
                    "type": "boolean"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "status": {
                    "enum": [
                        "HANDSHAKING",
                        "UNREACHABLE",
                        "STRETCH_UNHEALTHY",
                        "RELATIONSHIP_NOT_ESTABLISHED",
                        "RELATIONSHIP_ESTABLISHED",
                        "DEPLOYING"
                    ],
                    "type": "string"
                },
                "usage_stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "uuid": {
                    "description": "Uuid of the remote site.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vstore_name_map": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;",
                    "description": "Dictionary having map of local vStore to remote vStore",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.dr.ReplicationLinkDTO": {
            "id": "get.dto.dr.ReplicationLinkDTO",
            "required": [],
            "properties": {
                "current_replicating_snapshot_id": {
                    "type": "string"
                },
                "current_replicating_snapshot_total_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "current_replicating_snapshot_transmitted_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "last_replication_end_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_replication_start_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_successful_replication_snapshot_id": {
                    "type": "string"
                },
                "protection_domain_name": {
                    "type": "string"
                },
                "remote_site_name": {
                    "type": "string"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                }
            }
        },
        "get.dto.dr.SnapshotDTO": {
            "id": "get.dto.dr.SnapshotDTO",
            "required": [],
            "properties": {
                "consistency_groups": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "exclusive_usage_in_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "located_remote_site_name": {
                    "type": "string"
                },
                "nfs_files": {
                    "items": {
                        "$ref": "get.dto.dr.NfsFile"
                    },
                    "type": "array"
                },
                "oob_schedule_ids": {
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "type": "array"
                },
                "protection_domain_name": {
                    "type": "string"
                },
                "remote_site_names": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "size_in_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "snapshot_create_time_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "snapshot_expiry_time_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "snapshot_id": {
                    "type": "string"
                },
                "snapshot_uuid": {
                    "type": "string"
                },
                "state": {
                    "enum": [
                        "EXPIRED",
                        "RETAIN_FOREVER",
                        "AVAILABLE",
                        "SCHEDULED"
                    ],
                    "type": "string"
                },
                "vms": {
                    "items": {
                        "$ref": "get.dto.dr.VirtualMachine"
                    },
                    "type": "array"
                },
                "volume_groups": {
                    "items": {
                        "$ref": "get.dto.dr.VolumeGroup"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.dr.VirtualMachine": {
            "id": "get.dto.dr.VirtualMachine",
            "required": [],
            "properties": {
                "app_consistent_snapshots": {
                    "description": "Whether consistency group performs app consistent snapshots",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "consistency_group": {
                    "description": "Consistency group of a vm",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "related_entity_uuids": {
                    "description": "List of UUIDs of entities related to this VM e.g. the attached volume groups",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "vm_files": {
                    "description": "Files composing the VM",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "vm_handle": {
                    "description": "Internal data-structure used by Cerebro to uniquely identify a vm Should it be displayed to user?",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "vm_id": {
                    "description": "Unique identifier of a virtual machine within a Hypervisor.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vm_name": {
                    "description": "Display name of a virtual machine",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vm_power_state_on_recovery": {
                    "description": "Power state after vm recovery. Default power state is POWEREDOFF.",
                    "enum": [
                        "Powered Off",
                        "Powered On",
                        "Power state at time of snapshot"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vm_recoverability": {
                    "description": "Describes this VM's recovery capabilities",
                    "items": {
                        "$ref": "get.dto.dr.VmRecoverabilityDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.dr.VmRecoverabilityDTO": {
            "id": "get.dto.dr.VmRecoverabilityDTO",
            "required": [],
            "properties": {
                "cerebro_error": {
                    "description": "Cerebro error code for why VM can't be recovered/migrated",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "reason": {
                    "description": "Human-readable string why VM can't be recovered/migrated",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "remote_site": {
                    "description": "Name of the remote site where this VM can't be recovered (Optional)",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.dr.VolumeGroup": {
            "id": "get.dto.dr.VolumeGroup",
            "required": [],
            "properties": {
                "consistency_group": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nfs_file_paths": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "related_entity_uuids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "volume_group_uuid": {
                    "type": "string"
                }
            }
        },
        "get.dto.health.check.EntityTypeHealthCheckSummaryDTO": {
            "id": "get.dto.health.check.EntityTypeHealthCheckSummaryDTO",
            "required": [],
            "properties": {
                "checks_in_error": {
                    "$ref": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;"
                },
                "detailed_check_summary": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;"
                }
            }
        },
        "get.dto.health.check.HealthSummaryDTO": {
            "id": "get.dto.health.check.HealthSummaryDTO",
            "required": [],
            "properties": {
                "entity_type_summaries": {
                    "items": {
                        "$ref": "get.dto.health.check.EntityTypeHealthCheckSummaryDTO"
                    },
                    "type": "array"
                },
                "health_check_summaries": {
                    "$ref": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;"
                },
                "health_status": {
                    "enum": [
                        "Critical",
                        "Warning",
                        "Good",
                        "Unknown",
                        "Error"
                    ],
                    "type": "string"
                }
            }
        },
        "java.util.Map&lt;create.dto.alerts.AlertDTO$AlertSeverity, create.base.EntityCollection&lt;create.dto.alerts.AlertDTO&gt;&gt;": {
            "id": "java.util.Map&lt;create.dto.alerts.AlertDTO$AlertSeverity, create.base.EntityCollection&lt;create.dto.alerts.AlertDTO&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;": {
            "id": "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, create.dto.dr.RemoteSiteDTO$VStoreInfo&gt;": {
            "id": "java.util.Map&lt;java.lang.String, create.dto.dr.RemoteSiteDTO$VStoreInfo&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckErrorsDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckErrorsDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckSummaryDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckSummaryDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, get.dto.dr.RemoteSiteDTO$VStoreInfo&gt;": {
            "id": "java.util.Map&lt;java.lang.String, get.dto.dr.RemoteSiteDTO$VStoreInfo&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.lang.String&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.lang.String&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.util.Map&lt;patch.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.util.Map&lt;patch.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, patch.dto.dr.RemoteSiteDTO$VStoreInfo&gt;": {
            "id": "java.util.Map&lt;java.lang.String, patch.dto.dr.RemoteSiteDTO$VStoreInfo&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, patch.dto.health.check.HealthCheckErrorsDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, patch.dto.health.check.HealthCheckErrorsDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, patch.dto.health.check.HealthCheckSummaryDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, patch.dto.health.check.HealthCheckSummaryDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, update.dto.dr.RemoteSiteDTO$VStoreInfo&gt;": {
            "id": "java.util.Map&lt;java.lang.String, update.dto.dr.RemoteSiteDTO$VStoreInfo&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckErrorsDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckErrorsDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckSummaryDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckSummaryDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;patch.dto.alerts.AlertDTO$AlertSeverity, patch.base.EntityCollection&lt;patch.dto.alerts.AlertDTO&gt;&gt;": {
            "id": "java.util.Map&lt;patch.dto.alerts.AlertDTO$AlertSeverity, patch.base.EntityCollection&lt;patch.dto.alerts.AlertDTO&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;patch.dto.health.check.HealthStatus, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;patch.dto.health.check.HealthStatus, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;update.dto.alerts.AlertDTO$AlertSeverity, update.base.EntityCollection&lt;update.dto.alerts.AlertDTO&gt;&gt;": {
            "id": "java.util.Map&lt;update.dto.alerts.AlertDTO$AlertSeverity, update.base.EntityCollection&lt;update.dto.alerts.AlertDTO&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "patch.dto.RequestDTO&lt;patch.dto.dr.RemoteSiteDTO&gt;": {
            "id": "patch.dto.RequestDTO&lt;patch.dto.dr.RemoteSiteDTO&gt;",
            "required": [],
            "properties": {
                "cluster_uuid": {
                    "type": "string"
                },
                "generic_d_t_o": {
                    "$ref": "patch.dto.dr.RemoteSiteDTO"
                },
                "operation": {
                    "type": "string"
                }
            }
        },
        "patch.dto.alerts.AlertSummaryDTO": {
            "id": "patch.dto.alerts.AlertSummaryDTO",
            "required": [],
            "properties": {
                "alert_summaries": {
                    "$ref": "java.util.Map&lt;patch.dto.alerts.AlertDTO$AlertSeverity, patch.base.EntityCollection&lt;patch.dto.alerts.AlertDTO&gt;&gt;"
                },
                "count": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "patch.dto.dr.BandwidthPolicyDTO": {
            "id": "patch.dto.dr.BandwidthPolicyDTO",
            "description": "This DTO describes bandwidth throttling policies for different time schedules",
            "required": [
                "policy_uuid"
            ],
            "properties": {
                "bandwidth_configurations": {
                    "description": "List of the policy configurations.",
                    "items": {
                        "$ref": "patch.dto.dr.BandwidthPolicyDTO$BandwidthScheduleConfiguration"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "default_bandwidth_limit": {
                    "description": "Default bandwidth limit",
                    "format": "int32",
                    "notes": "This bandwidth is used in the time which is not covered by any of the existing schedule. Because every schedule will be having their own bandwidth limit defined.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "policy_name": {
                    "description": "Name of the bandwidth Throttling policy.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "policy_uuid": {
                    "description": "Uuid of the bandwidth Throttling policy.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "patch.dto.dr.BandwidthPolicyDTO$BandwidthScheduleConfiguration": {
            "id": "patch.dto.dr.BandwidthPolicyDTO$BandwidthScheduleConfiguration",
            "required": [
                "schedule_uuid"
            ],
            "properties": {
                "bandwidth_limit": {
                    "description": "Bandwidth limit for the policy.",
                    "format": "int32",
                    "notes": "At the time of policy consideration this bandwidth limit will be used to limit the bandwidth used.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "days_selected": {
                    "description": "Days selected in a week.",
                    "format": "int32",
                    "notes": "This field describes the selected days of the week for this policy configuration.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "end_time": {
                    "description": "End time of the policy",
                    "format": "int64",
                    "notes": "End time of the policy in milliseconds.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "schedule_uuid": {
                    "description": "Uuid of the bandwidth schedule configuration.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "start_time": {
                    "description": "Start time of the policy",
                    "format": "int64",
                    "notes": "Start time of the policy in milliseconds.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "patch.dto.dr.L2NetworkMappingDTO": {
            "id": "patch.dto.dr.L2NetworkMappingDTO",
            "required": [],
            "properties": {
                "dest_hypervisor_type": {
                    "type": "string"
                },
                "dest_network_name": {
                    "type": "string"
                },
                "src_hypervisor_type": {
                    "type": "string"
                },
                "src_network_name": {
                    "type": "string"
                }
            }
        },
        "patch.dto.dr.NetworkMappingDTO": {
            "id": "patch.dto.dr.NetworkMappingDTO",
            "description": "This DTO describes network mapping from source to destination cluster based on network uuids ",
            "required": [],
            "properties": {
                "l2_network_mappings": {
                    "description": "List of L2NetworkMappingDTOs which contains name and hypervisor type of the mapped networks",
                    "items": {
                        "$ref": "patch.dto.dr.L2NetworkMappingDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "Network mapping identifier for this remote site",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "patch.dto.dr.RemoteSiteDTO": {
            "id": "patch.dto.dr.RemoteSiteDTO",
            "description": "remote-site",
            "required": [],
            "properties": {
                "alert_summary": {
                    "$ref": "patch.dto.alerts.AlertSummaryDTO"
                },
                "bandwidth_policy": {
                    "$ref": "patch.dto.dr.BandwidthPolicyDTO"
                },
                "bandwidth_policy_enabled": {
                    "type": "boolean"
                },
                "capabilities": {
                    "items": {
                        "enum": [
                            "BACKUP",
                            "DISASTER_RECOVERY",
                            "METRO_AVAILABILITY",
                            "SUPPORT_DEDUPED_EXTENTS",
                            "SUPPORT_VSPHERE",
                            "SUPPORT_HYPERV",
                            "SUPPORT_KVM"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "cloud_type": {
                    "description": "Cloud type",
                    "enum": [
                        "AWS",
                        "AZURE"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "cluster_external_data_services_i_p_address": {
                    "type": "string"
                },
                "cluster_id": {
                    "format": "int64",
                    "type": "integer"
                },
                "cluster_incarnation_id": {
                    "format": "int64",
                    "type": "integer"
                },
                "compression_enabled": {
                    "type": "boolean"
                },
                "credential_name": {
                    "description": "Credential Name",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "cvm_name": {
                    "description": "CVM Name",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "health_summary": {
                    "$ref": "patch.dto.health.check.HealthSummaryDTO"
                },
                "latency_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "marked_for_removal": {
                    "type": "boolean"
                },
                "max_bps": {
                    "format": "int32",
                    "type": "integer"
                },
                "metro_ready": {
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of the remote site.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "network_mapping": {
                    "$ref": "patch.dto.dr.NetworkMappingDTO"
                },
                "proxy_enabled": {
                    "type": "boolean"
                },
                "region": {
                    "description": "Region",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "remote_ip_ports": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.Integer&gt;",
                    "description": "Dictionary having IP address as key and Port as value",
                    "typeName": "DEFAULT"
                },
                "remote_v_store_info": {
                    "$ref": "java.util.Map&lt;java.lang.String, patch.dto.dr.RemoteSiteDTO$VStoreInfo&gt;"
                },
                "replication_links": {
                    "items": {
                        "$ref": "patch.dto.dr.ReplicationLinkDTO"
                    },
                    "type": "array"
                },
                "ssh_enabled": {
                    "type": "boolean"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "status": {
                    "enum": [
                        "HANDSHAKING",
                        "UNREACHABLE",
                        "STRETCH_UNHEALTHY",
                        "RELATIONSHIP_NOT_ESTABLISHED",
                        "RELATIONSHIP_ESTABLISHED",
                        "DEPLOYING"
                    ],
                    "type": "string"
                },
                "usage_stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "uuid": {
                    "description": "Uuid of the remote site.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vstore_name_map": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;",
                    "description": "Dictionary having map of local vStore to remote vStore",
                    "typeName": "DEFAULT"
                }
            }
        },
        "patch.dto.dr.ReplicationLinkDTO": {
            "id": "patch.dto.dr.ReplicationLinkDTO",
            "required": [],
            "properties": {
                "current_replicating_snapshot_id": {
                    "type": "string"
                },
                "current_replicating_snapshot_total_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "current_replicating_snapshot_transmitted_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "last_replication_end_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_replication_start_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_successful_replication_snapshot_id": {
                    "type": "string"
                },
                "protection_domain_name": {
                    "type": "string"
                },
                "remote_site_name": {
                    "type": "string"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                }
            }
        },
        "patch.dto.health.check.EntityTypeHealthCheckSummaryDTO": {
            "id": "patch.dto.health.check.EntityTypeHealthCheckSummaryDTO",
            "required": [],
            "properties": {
                "checks_in_error": {
                    "$ref": "java.util.Map&lt;java.lang.String, patch.dto.health.check.HealthCheckErrorsDTO&gt;"
                },
                "detailed_check_summary": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.util.Map&lt;patch.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "java.util.Map&lt;patch.dto.health.check.HealthStatus, java.lang.Integer&gt;"
                }
            }
        },
        "patch.dto.health.check.HealthSummaryDTO": {
            "id": "patch.dto.health.check.HealthSummaryDTO",
            "required": [],
            "properties": {
                "entity_type_summaries": {
                    "items": {
                        "$ref": "patch.dto.health.check.EntityTypeHealthCheckSummaryDTO"
                    },
                    "type": "array"
                },
                "health_check_summaries": {
                    "$ref": "java.util.Map&lt;java.lang.String, patch.dto.health.check.HealthCheckSummaryDTO&gt;"
                },
                "health_status": {
                    "enum": [
                        "Critical",
                        "Warning",
                        "Good",
                        "Unknown",
                        "Error"
                    ],
                    "type": "string"
                }
            }
        },
        "update.dto.alerts.AlertSummaryDTO": {
            "id": "update.dto.alerts.AlertSummaryDTO",
            "required": [],
            "properties": {
                "alert_summaries": {
                    "$ref": "java.util.Map&lt;update.dto.alerts.AlertDTO$AlertSeverity, update.base.EntityCollection&lt;update.dto.alerts.AlertDTO&gt;&gt;"
                },
                "count": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "update.dto.dr.BandwidthPolicyDTO": {
            "id": "update.dto.dr.BandwidthPolicyDTO",
            "description": "This DTO describes bandwidth throttling policies for different time schedules",
            "required": [
                "policy_uuid"
            ],
            "properties": {
                "bandwidth_configurations": {
                    "description": "List of the policy configurations.",
                    "items": {
                        "$ref": "update.dto.dr.BandwidthPolicyDTO$BandwidthScheduleConfiguration"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "default_bandwidth_limit": {
                    "description": "Default bandwidth limit",
                    "format": "int32",
                    "notes": "This bandwidth is used in the time which is not covered by any of the existing schedule. Because every schedule will be having their own bandwidth limit defined.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "policy_name": {
                    "description": "Name of the bandwidth Throttling policy.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "policy_uuid": {
                    "description": "Uuid of the bandwidth Throttling policy.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.dr.BandwidthPolicyDTO$BandwidthScheduleConfiguration": {
            "id": "update.dto.dr.BandwidthPolicyDTO$BandwidthScheduleConfiguration",
            "required": [
                "schedule_uuid"
            ],
            "properties": {
                "bandwidth_limit": {
                    "description": "Bandwidth limit for the policy.",
                    "format": "int32",
                    "notes": "At the time of policy consideration this bandwidth limit will be used to limit the bandwidth used.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "days_selected": {
                    "description": "Days selected in a week.",
                    "format": "int32",
                    "notes": "This field describes the selected days of the week for this policy configuration.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "end_time": {
                    "description": "End time of the policy",
                    "format": "int64",
                    "notes": "End time of the policy in milliseconds.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "schedule_uuid": {
                    "description": "Uuid of the bandwidth schedule configuration.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "start_time": {
                    "description": "Start time of the policy",
                    "format": "int64",
                    "notes": "Start time of the policy in milliseconds.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.dr.L2NetworkMappingDTO": {
            "id": "update.dto.dr.L2NetworkMappingDTO",
            "required": [],
            "properties": {
                "dest_hypervisor_type": {
                    "type": "string"
                },
                "dest_network_name": {
                    "type": "string"
                },
                "src_hypervisor_type": {
                    "type": "string"
                },
                "src_network_name": {
                    "type": "string"
                }
            }
        },
        "update.dto.dr.NetworkMappingDTO": {
            "id": "update.dto.dr.NetworkMappingDTO",
            "description": "This DTO describes network mapping from source to destination cluster based on network uuids ",
            "required": [],
            "properties": {
                "l2_network_mappings": {
                    "description": "List of L2NetworkMappingDTOs which contains name and hypervisor type of the mapped networks",
                    "items": {
                        "$ref": "update.dto.dr.L2NetworkMappingDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "Network mapping identifier for this remote site",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.dr.RemoteSiteDTO": {
            "id": "update.dto.dr.RemoteSiteDTO",
            "description": "remote-site",
            "required": [],
            "properties": {
                "alert_summary": {
                    "$ref": "update.dto.alerts.AlertSummaryDTO"
                },
                "bandwidth_policy": {
                    "$ref": "update.dto.dr.BandwidthPolicyDTO"
                },
                "bandwidth_policy_enabled": {
                    "type": "boolean"
                },
                "capabilities": {
                    "items": {
                        "enum": [
                            "BACKUP",
                            "DISASTER_RECOVERY",
                            "METRO_AVAILABILITY",
                            "SUPPORT_DEDUPED_EXTENTS",
                            "SUPPORT_VSPHERE",
                            "SUPPORT_HYPERV",
                            "SUPPORT_KVM"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "cloud_type": {
                    "description": "Cloud type",
                    "enum": [
                        "AWS",
                        "AZURE"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "cluster_external_data_services_i_p_address": {
                    "type": "string"
                },
                "cluster_id": {
                    "format": "int64",
                    "type": "integer"
                },
                "cluster_incarnation_id": {
                    "format": "int64",
                    "type": "integer"
                },
                "compression_enabled": {
                    "type": "boolean"
                },
                "credential_name": {
                    "description": "Credential Name",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "cvm_name": {
                    "description": "CVM Name",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "health_summary": {
                    "$ref": "update.dto.health.check.HealthSummaryDTO"
                },
                "latency_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "marked_for_removal": {
                    "type": "boolean"
                },
                "max_bps": {
                    "format": "int32",
                    "type": "integer"
                },
                "metro_ready": {
                    "type": "boolean"
                },
                "name": {
                    "description": "Name of the remote site.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "network_mapping": {
                    "$ref": "update.dto.dr.NetworkMappingDTO"
                },
                "proxy_enabled": {
                    "type": "boolean"
                },
                "region": {
                    "description": "Region",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "remote_ip_ports": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.Integer&gt;",
                    "description": "Dictionary having IP address as key and Port as value",
                    "typeName": "DEFAULT"
                },
                "remote_v_store_info": {
                    "$ref": "java.util.Map&lt;java.lang.String, update.dto.dr.RemoteSiteDTO$VStoreInfo&gt;"
                },
                "replication_links": {
                    "items": {
                        "$ref": "update.dto.dr.ReplicationLinkDTO"
                    },
                    "type": "array"
                },
                "ssh_enabled": {
                    "type": "boolean"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "status": {
                    "enum": [
                        "HANDSHAKING",
                        "UNREACHABLE",
                        "STRETCH_UNHEALTHY",
                        "RELATIONSHIP_NOT_ESTABLISHED",
                        "RELATIONSHIP_ESTABLISHED",
                        "DEPLOYING"
                    ],
                    "type": "string"
                },
                "usage_stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "uuid": {
                    "description": "Uuid of the remote site.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vstore_name_map": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;",
                    "description": "Dictionary having map of local vStore to remote vStore",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.dr.ReplicationLinkDTO": {
            "id": "update.dto.dr.ReplicationLinkDTO",
            "required": [],
            "properties": {
                "current_replicating_snapshot_id": {
                    "type": "string"
                },
                "current_replicating_snapshot_total_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "current_replicating_snapshot_transmitted_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "last_replication_end_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_replication_start_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "last_successful_replication_snapshot_id": {
                    "type": "string"
                },
                "protection_domain_name": {
                    "type": "string"
                },
                "remote_site_name": {
                    "type": "string"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                }
            }
        },
        "update.dto.health.check.EntityTypeHealthCheckSummaryDTO": {
            "id": "update.dto.health.check.EntityTypeHealthCheckSummaryDTO",
            "required": [],
            "properties": {
                "checks_in_error": {
                    "$ref": "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckErrorsDTO&gt;"
                },
                "detailed_check_summary": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;"
                }
            }
        },
        "update.dto.health.check.HealthSummaryDTO": {
            "id": "update.dto.health.check.HealthSummaryDTO",
            "required": [],
            "properties": {
                "entity_type_summaries": {
                    "items": {
                        "$ref": "update.dto.health.check.EntityTypeHealthCheckSummaryDTO"
                    },
                    "type": "array"
                },
                "health_check_summaries": {
                    "$ref": "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckSummaryDTO&gt;"
                },
                "health_status": {
                    "enum": [
                        "Critical",
                        "Warning",
                        "Good",
                        "Unknown",
                        "Error"
                    ],
                    "type": "string"
                }
            }
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/api/nutanix/v2.0",
    "resourcePath": "/snapshots",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/snapshots/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get a list of snapshots in a cluster.",
                    "notes": "Get a list of snapshots in a cluster.",
                    "type": "get.base.EntityCollection&lt;get.dto.acropolis.SnapshotInfoDTO&gt;",
                    "nickname": "getSnapshots",
                    "parameters": [
                        {
                            "name": "vm_uuid",
                            "description": "Uuid of the vm",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Create Virtual Machine snapshots.",
                    "notes": "Create Virtual Machine snapshots. <br/><br/>If a UUID is specified for the snapshot, this operation will be idempotent. <br/><br/>If multiple VMs are specified, all of their configurations and disks will fall into the same consistency group. Since this operation requires the coordination of multiple resources, it should not be abused by specifying more than several VMs at a time. <br/><br/>Snapshots are crash-consistent. They do not include the VM's current memory image, only the VM configuration and its disk contents. The snapshot is taken atomically across all of a VM's configuration and disks to ensure consistency. <br/><br/>This is also an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "createSnapshot",
                    "parameters": [
                        {
                            "description": "Create a snapshot",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.acropolis.SnapshotCreateDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/snapshots/{uuid}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete a snapshot.",
                    "notes": "Delete a snapshot. <br/><br/>This operation is idempotent. The logical timestamp can optionally be provided for consistency. If a logical timestamp is specified, then this operation will be rejected if the logical timestamp specified is not the value of the snapshot logical timestamp. <br/><br/>This is also an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "delete.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "deleteSnapshot",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Id of the Snapshot",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "logical_timestamp",
                            "description": "Logical timestamp",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get details of a specified snapshot.",
                    "notes": "Get details of a specified snapshot.",
                    "type": "get.dto.acropolis.SnapshotInfoDTO",
                    "nickname": "getSnapshot",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Id of the Snapshot",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/snapshots/{uuid}/clone",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Clone a Snapshot.",
                    "notes": "Clone a Snapshot. <br/><br/>If a UUID is specified for the cloned snapshot, then the operation will be idempotent. <br/><br/>If overrideNetworkConfig is set to true in the clone spec, then the source snapshot's network configuration is overridden by one specified in the nic list. If false, the clone will inherit its basic network configuration from the source, minus MAC and IP address. <br/><br/>This is also an asynchronous operation that results in the creation of a task object.This is also an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "cloneSnapshot",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Id of the Snapshot",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Clone a Snapshot",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.acropolis.SnapshotCloneDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "create.dto.acropolis.BootConfigDTO": {
            "id": "create.dto.acropolis.BootConfigDTO",
            "required": [],
            "properties": {
                "boot_device_order": {
                    "description": "The boot device order. In case boot device is not specified or the specified boot device fails, VM will attempt to boot from connected devices in this device type order.",
                    "items": {
                        "enum": [
                            "CDROM",
                            "DISK",
                            "NIC"
                        ],
                        "type": "string"
                    },
                    "notes": "Boot device order",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "boot_device_type": {
                    "description": "The device from which to boot. This must refer to a valid device configured on the VM. When a boot device is removed from the VM, this field is cleared as a side effect. If no boot device is configured, the VM will have the following boot preference: hard disk, CD-ROM, NIC.",
                    "enum": [
                        "CDROM",
                        "DISK",
                        "NIC"
                    ],
                    "notes": "Device from which to boot",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "disk_address": {
                    "$ref": "create.dto.acropolis.VMDiskAddressDTO",
                    "description": "Disk address selected as boot device. At most one of this or macAddr field should be set.",
                    "notes": "Disk address selected as boot device",
                    "typeName": "DEFAULT"
                },
                "mac_addr": {
                    "description": "Mac address of the NIC selected as boot device. At most one of this or diskAddress field should be set.",
                    "notes": "Mac address of the NIC selected as boot device",
                    "type": "string",
                    "typeName": "MAC_ADDRESS"
                }
            }
        },
        "create.dto.acropolis.ReturnValueDTO$TaskIdDTO": {
            "id": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
            "required": [],
            "properties": {
                "task_uuid": {
                    "description": "UUID of the task.",
                    "notes": "UUID of the task.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.SnapshotCloneDTO": {
            "id": "create.dto.acropolis.SnapshotCloneDTO",
            "required": [],
            "properties": {
                "spec_list": {
                    "description": "List of clone specifications.",
                    "items": {
                        "$ref": "create.dto.acropolis.VMCloneSpecDTO"
                    },
                    "notes": "List of clone specifications.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "UUID of the Snapshot.",
                    "notes": "UUID of the Snapshot.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "create.dto.acropolis.SnapshotCreateDTO": {
            "id": "create.dto.acropolis.SnapshotCreateDTO",
            "required": [],
            "properties": {
                "snapshot_specs": {
                    "description": "List of snapshot specifications. All disks for all Virtual Machines are treated as a single consistency group for the vdisk snapshot",
                    "items": {
                        "$ref": "create.dto.acropolis.SnapshotSpecDTO"
                    },
                    "notes": "List of snapshot specifications.",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.SnapshotSpecDTO": {
            "id": "create.dto.acropolis.SnapshotSpecDTO",
            "required": [
                "vm_uuid"
            ],
            "properties": {
                "snapshot_name": {
                    "description": "Name for the snapshot.",
                    "notes": "Name for the snapshot.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "A version 4 UUID that the client may specify for idempotence.",
                    "notes": "A version 4 UUID that the client may specify for idempotence.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vm_uuid": {
                    "description": "The Virtual Machine identifier.",
                    "notes": "The Virtual Machine identifier.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "create.dto.acropolis.VMCloneSpecDTO": {
            "id": "create.dto.acropolis.VMCloneSpecDTO",
            "required": [
                "name"
            ],
            "properties": {
                "boot_config": {
                    "$ref": "create.dto.acropolis.BootConfigDTO",
                    "description": "Override the existing boot configuration for the Virtual Machine. Any updates to the boot configuration will be applied during the next Virtual Machine power cycle but not reset.",
                    "notes": "Override the existing boot configuration for the Virtual Machine.",
                    "typeName": "DEFAULT"
                },
                "memory_mb": {
                    "description": "Override the amount of RAM assigned to the clone.",
                    "format": "int64",
                    "notes": "Override the amount of RAM assigned to the clone.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Named for the cloned Virtual Machine.",
                    "notes": "Name for the cloned Virtual Machine.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "num_cores_per_vcpu": {
                    "description": "Override the number of cores assigned to each VCPUs.",
                    "format": "int64",
                    "notes": "Override the number of cores assigned to each VCPUs.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "num_vcpus": {
                    "description": "Override the number of vCPUs assigned to the clone.",
                    "format": "int64",
                    "notes": "Override the number of vCPUs assigned to the clone.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "override_network_config": {
                    "description": "Indicate whether the source Virtual Machine's/snapshot's network configuration with the one specified in the vmNics field. If false, the clone will inherit its basic network configuration from the source, minus MAC and IP address assignments.",
                    "notes": "Whether to override the source Virtual Machine's/snapshot's network configuration.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "A version 4 UUID that the client may specify for idempotence. This UUID will be used as the vm ID of the target vm.",
                    "notes": "A version 4 UUID that the client may specify for idempotence",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vm_nics": {
                    "description": "Network configuration. Required when overrideNetworkConfig set to true.",
                    "items": {
                        "$ref": "create.dto.acropolis.VMNicSpecDTO"
                    },
                    "notes": "Network configuration. Required when overrideNetworkConfig set to true.",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.VMDiskAddressDTO": {
            "id": "create.dto.acropolis.VMDiskAddressDTO",
            "required": [],
            "properties": {
                "device_bus": {
                    "description": "The device bus for the virtual disk device.Possible values are SCSI, IDE and PCI. Along with this the deviceIndex is used to specify a vdisk address. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "enum": [
                        "SCSI",
                        "IDE",
                        "PCI",
                        "SATA",
                        "SPAPR"
                    ],
                    "notes": "The device bus for the virtual disk device.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "device_index": {
                    "description": "Index of the device on the adapter type. If left unspecified, the system will allocate the next available slot on the default bus.",
                    "format": "int32",
                    "notes": "Index of the device on the adapter type.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "ndfs_filepath": {
                    "description": "NDFS path to existing virtual disk. This field will not be set when this message is used in a create mode.When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "NDFS path to existing virtual disk.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vmdisk_uuid": {
                    "description": "Virtual disk identifier. This field will not be set when this message is used in a create mode. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "Virtual disk identifier.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "volume_group_uuid": {
                    "type": "string"
                }
            }
        },
        "create.dto.acropolis.VMNicSpecDTO": {
            "id": "create.dto.acropolis.VMNicSpecDTO",
            "required": [
                "network_uuid"
            ],
            "properties": {
                "adapter_type": {
                    "description": "Type of the network adapter for ESX networks.",
                    "enum": [
                        "E1000",
                        "E1000e",
                        "PCNet32",
                        "Vmxnet",
                        "Vmxnet2",
                        "Vmxnet3",
                        "Unsupported"
                    ],
                    "notes": "Type of the network adapter.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "mac_address": {
                    "description": "The MAC address of the NIC",
                    "notes": "The MAC address of the NIC",
                    "type": "string",
                    "typeName": "MAC_ADDRESS"
                },
                "model": {
                    "description": "Virtual hardware model.",
                    "notes": "Virtual hardware model.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "network_uuid": {
                    "description": "The network to which the NIC is attached",
                    "notes": "The network to which the NIC is attached",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "request_ip": {
                    "description": "If request_ip is true\nIf 'requestedIpAddress' is set then request that IP from the network. If it's a managed network then request a dynamic IP from the network. Otherwise don't request an IP. If requestIp is false, then don't request an IP at all, regardless of whether or not the 'requestedIpAddress' is set and whether or the network is managed or not.",
                    "notes": "Request IP address.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "requested_ip_address": {
                    "description": "Requested IP address.",
                    "notes": "Requested IP address.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "delete.dto.acropolis.ReturnValueDTO$TaskIdDTO": {
            "id": "delete.dto.acropolis.ReturnValueDTO$TaskIdDTO",
            "required": [],
            "properties": {
                "task_uuid": {
                    "description": "UUID of the task.",
                    "notes": "UUID of the task.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.acropolis.SnapshotInfoDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.acropolis.SnapshotInfoDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.acropolis.SnapshotInfoDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.dto.acropolis.BootConfigDTO": {
            "id": "get.dto.acropolis.BootConfigDTO",
            "required": [],
            "properties": {
                "boot_device_order": {
                    "description": "The boot device order. In case boot device is not specified or the specified boot device fails, VM will attempt to boot from connected devices in this device type order.",
                    "items": {
                        "enum": [
                            "CDROM",
                            "DISK",
                            "NIC"
                        ],
                        "type": "string"
                    },
                    "notes": "Boot device order",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "boot_device_type": {
                    "description": "The device from which to boot. This must refer to a valid device configured on the VM. When a boot device is removed from the VM, this field is cleared as a side effect. If no boot device is configured, the VM will have the following boot preference: hard disk, CD-ROM, NIC.",
                    "enum": [
                        "CDROM",
                        "DISK",
                        "NIC"
                    ],
                    "notes": "Device from which to boot",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "disk_address": {
                    "$ref": "get.dto.acropolis.VMDiskAddressDTO",
                    "description": "Disk address selected as boot device. At most one of this or macAddr field should be set.",
                    "notes": "Disk address selected as boot device",
                    "typeName": "DEFAULT"
                },
                "mac_addr": {
                    "description": "Mac address of the NIC selected as boot device. At most one of this or diskAddress field should be set.",
                    "notes": "Mac address of the NIC selected as boot device",
                    "type": "string",
                    "typeName": "MAC_ADDRESS"
                }
            }
        },
        "get.dto.acropolis.FileToInjectDTO": {
            "id": "get.dto.acropolis.FileToInjectDTO",
            "required": [],
            "properties": {
                "destination_path": {
                    "description": "Destination path in the VM at which the file specified by source_path should be copied to.",
                    "notes": "Destination path in the VM at which the file specified by sourcePath should be copied to.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "source_path": {
                    "description": "ADSF path of the source file to inject in the VM. Must be of form: adsf:///<ctr>/...",
                    "notes": "ADSF path of the source file to inject in the VM.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.acropolis.SnapshotInfoDTO": {
            "id": "get.dto.acropolis.SnapshotInfoDTO",
            "required": [],
            "properties": {
                "created_time": {
                    "description": "The epoch time in microseconds when this snapshot was created.",
                    "format": "int64",
                    "notes": "The epoch time in microseconds when this snapshot was created.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "deleted": {
                    "description": "Indicates whether the snapshot has been deleted and waiting to be garbage collected. If this is marked as true, no operations can be performed on this snapshot.",
                    "notes": "Indicates if the snapshot has been deleted.",
                    "type": "boolean",
                    "typeName": "UUID_TYPE"
                },
                "group_uuid": {
                    "description": "UUID of the consistency group for this snapshot",
                    "notes": "UUID of the consistency group for this snapshot",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "logical_timestamp": {
                    "description": "Logical timestamp specified for consistency. This can be obtained from the snapshot object",
                    "format": "int64",
                    "notes": "Logical timestamp specified for consistency.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "snapshot_name": {
                    "description": "The snapshot name.",
                    "notes": "The snapshot name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "A version 4 UUID that the client may specify for idempotence.",
                    "notes": "A version 4 UUID that the client may specify for idempotence.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vm_create_spec": {
                    "$ref": "get.dto.uhura.VmConfigDTO",
                    "description": "A specification for creating VMs from this snapshot.",
                    "notes": "A specification for creating VMs from this snapshot.",
                    "typeName": "DEFAULT"
                },
                "vm_uuid": {
                    "description": "UUID of the VM",
                    "notes": "UUID of the VM",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "get.dto.acropolis.VMCustomizationConfigDTO": {
            "id": "get.dto.acropolis.VMCustomizationConfigDTO",
            "required": [],
            "properties": {
                "datasource_type": {
                    "description": "The type of datasource for configuring the Linux Virtual Machine in case cloudinit config is provided. ISO based datasource supported by Uhura is ConfigDriveV2.",
                    "enum": [
                        "CONFIG_DRIVE_V2"
                    ],
                    "notes": "The type of datasource for configuring the Linux Virtual Machine in case cloudinit config is provided.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "files_to_inject_list": {
                    "description": "List of details about files to inject in the VM.",
                    "items": {
                        "$ref": "get.dto.acropolis.FileToInjectDTO"
                    },
                    "notes": "List of details about files to inject in the VM.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "fresh_install": {
                    "description": "Indicates whether the VM to be customized is meant to be freshly installed via Windows Setup from a Windows OS DVD or whether the VM will be configured from a 'Sysprepped' image in which case the setup was already complete.",
                    "notes": "Indicates whether the VM to be customized is meant to be freshly installed or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "userdata": {
                    "description": "Userdata in string format. Either Cloudinit format for customizing Linux VM or Sysprep format for customizing Windows VM. For cloudinit the userdata is usually a yaml file or shell script. For sysprep the userdata is usually a Xml representation of an unattend file in string format.Either this or userdataPath must be provided",
                    "notes": "Userdata in string format.",
                    "type": "string",
                    "typeName": "TEXT"
                },
                "userdata_path": {
                    "description": "Userdata source path. Must begin with adsf:///<ctr>.For cloudinit usually a yaml file or shell script is provided. For sysprep usually an unattend file or answer file is provided. Either this or userdata must be provided",
                    "notes": "Userdata source path.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.acropolis.VMDiskAddressDTO": {
            "id": "get.dto.acropolis.VMDiskAddressDTO",
            "required": [],
            "properties": {
                "device_bus": {
                    "description": "The device bus for the virtual disk device.Possible values are SCSI, IDE and PCI. Along with this the deviceIndex is used to specify a vdisk address. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "enum": [
                        "SCSI",
                        "IDE",
                        "PCI",
                        "SATA",
                        "SPAPR"
                    ],
                    "notes": "The device bus for the virtual disk device.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "device_index": {
                    "description": "Index of the device on the adapter type. If left unspecified, the system will allocate the next available slot on the default bus.",
                    "format": "int32",
                    "notes": "Index of the device on the adapter type.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "disk_label": {
                    "description": "Information about attached disk. Disk label (for example, scsi0:0) where the virtual disk was attached. This indicates the location of the virtual disk within the VM.",
                    "notes": "Information about attached disk.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "is_cdrom": {
                    "description": "Whether this is a CD-ROM drive.",
                    "notes": "Whether this is a CD-ROM drive.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "ndfs_filepath": {
                    "description": "NDFS path to existing virtual disk. This field will not be set when this message is used in a create mode.When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "NDFS path to existing virtual disk.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vmdisk_uuid": {
                    "description": "Virtual disk identifier. This field will not be set when this message is used in a create mode. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "Virtual disk identifier.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "volume_group_uuid": {
                    "type": "string"
                }
            }
        },
        "get.dto.acropolis.VMNicSpecDTO": {
            "id": "get.dto.acropolis.VMNicSpecDTO",
            "required": [],
            "properties": {
                "adapter_type": {
                    "description": "Type of the network adapter for ESX networks.",
                    "enum": [
                        "E1000",
                        "E1000e",
                        "PCNet32",
                        "Vmxnet",
                        "Vmxnet2",
                        "Vmxnet3",
                        "Unsupported"
                    ],
                    "notes": "Type of the network adapter.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "ip_address": {
                    "description": "IP address for the NIC. Includes both Acropolis assigned IP address as well as learned IP address from thirdparty networks.",
                    "notes": "IP address for the NIC.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "mac_address": {
                    "description": "The MAC address of the NIC",
                    "notes": "The MAC address of the NIC",
                    "type": "string",
                    "typeName": "MAC_ADDRESS"
                },
                "model": {
                    "description": "Virtual hardware model.",
                    "notes": "Virtual hardware model.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "network_uuid": {
                    "description": "The network to which the NIC is attached",
                    "notes": "The network to which the NIC is attached",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "port_id": {
                    "description": "The port id for ESX networks.",
                    "notes": "Port Id.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "request_ip": {
                    "description": "If request_ip is true\nIf 'requestedIpAddress' is set then request that IP from the network. If it's a managed network then request a dynamic IP from the network. Otherwise don't request an IP. If requestIp is false, then don't request an IP at all, regardless of whether or not the 'requestedIpAddress' is set and whether or the network is managed or not.",
                    "notes": "Request IP address.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "requested_ip_address": {
                    "description": "Requested IP address.",
                    "notes": "Requested IP address.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.uhura.GPUConfigDTO": {
            "id": "get.dto.uhura.GPUConfigDTO",
            "required": [],
            "properties": {
                "assignable": {
                    "description": "Whether the GPU can be assigned to a Virtual Machine.",
                    "notes": "Whether the GPU can be assigned to a Virtual Machine.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "device_id": {
                    "description": "Device ID of the GPU resource.",
                    "format": "int32",
                    "notes": "Device ID of the GPU resource.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "device_name": {
                    "description": "Vendor device name of the GPU resource.",
                    "notes": "Vendor device name of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "fraction": {
                    "description": "Fraction of the physical GPU. Only applicable for a vGPU instance.",
                    "format": "int32",
                    "notes": "Fraction of the physical GPU. Only applicable for a vGPU instance.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "frame_buffer_size_bytes": {
                    "description": "GPU framebuffer size in bytes.",
                    "format": "int64",
                    "notes": "GPU framebuffer size.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "gpu_mode": {
                    "description": "Current mode of the physical GPU. Not valid on vGPU resources.",
                    "enum": [
                        "UNUSED",
                        "USED_FOR_PASSTHROUGH",
                        "USED_FOR_VIRTUAL"
                    ],
                    "notes": "Current mode of the physical GPU.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpu_profile": {
                    "description": "Profile of the GPU.",
                    "notes": "Profile of the GPU.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpu_type": {
                    "description": "Type of the GPU resource.",
                    "enum": [
                        "PASS_THROUGH_GRAPHICS",
                        "PASS_THROUGH_COMPUTE",
                        "VIRTUAL"
                    ],
                    "notes": "Type of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpu_vendor": {
                    "description": "Vendor of the GPU resource.",
                    "enum": [
                        "NVIDIA",
                        "INTEL",
                        "AMD"
                    ],
                    "notes": "Vendor of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "guest_driver_version": {
                    "description": "Last determined guest driver version.",
                    "notes": "Last determined guest driver version.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "in_use": {
                    "description": "Whether the GPU resource is in use or not.",
                    "notes": "Whether the GPU resource is in use or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "licenses": {
                    "description": "List of license types associated with this GPU.",
                    "items": {
                        "type": "string"
                    },
                    "notes": "List of license types.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "max_resolution": {
                    "description": "Maximum resolution per display heads.",
                    "notes": "Maximum resolution per display heads.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "num_virtual_display_heads": {
                    "description": "Number of supported virtual display heads.",
                    "format": "int32",
                    "notes": "Number of supported virtual display heads.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "numa_node": {
                    "description": "The NUMA node where the GPU belongs to.",
                    "format": "int32",
                    "notes": "The NUMA node where the GPU belongs to.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "sbdf": {
                    "description": "Unique device information for the GPU resource.",
                    "notes": "Unique device information for the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vm_uuids": {
                    "description": "List of UUIDs of the Virtual Machines where the GPU resource is assigned.",
                    "items": {
                        "type": "string"
                    },
                    "notes": "List of UUIDs of the Virtual Machines where the GPU resource is assigned.",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.uhura.SerialPortConfigDTO": {
            "id": "get.dto.uhura.SerialPortConfigDTO",
            "required": [],
            "properties": {
                "index": {
                    "description": "The serial port index. Generally limited to the range [0..3], corresponding to COM1 through COM4.",
                    "format": "int32",
                    "notes": "The serial port index.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "type": {
                    "description": "The backing type for this serial port.\nPossible values- null(The serial device is present, but has no backing), server(The serial device is accessible via a websocket.)",
                    "enum": [
                        "NULL",
                        "SERVER"
                    ],
                    "notes": "The backing type for this serial port.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.uhura.VmConfigDTO": {
            "id": "get.dto.uhura.VmConfigDTO",
            "required": [],
            "properties": {
                "allow_live_migrate": {
                    "description": "Indicates whether the Virtual Machine can be live migrated or not.",
                    "notes": "Indicates whether the Virtual Machine can be live migrated or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "boot": {
                    "$ref": "get.dto.acropolis.BootConfigDTO",
                    "description": "Boot configuration for the Virtual Machine. Any updates to the boot configuration will be applied during the next Virtual Machine power cycle but not reset.",
                    "notes": "Boot configuration for the Virtual Machine.",
                    "typeName": "DEFAULT"
                },
                "cbr_not_capable_reason": {
                    "description": "If set to a non-empty string, this VM should be considered incompatible with DR workflows. Applicable only for AHV VMs. In the future, it will be removed in favor of using tags for identifying service VMs.",
                    "notes": "Reason for not CBR capable",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "description": {
                    "description": "Description for the Virtual Machine.",
                    "notes": "Description for the Virtual Machine.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpus_assigned": {
                    "description": "Indicates whether the requested GPUs have been assigned to the Virtual Machine or not.",
                    "notes": "Indicates whether the requested GPUs have been assigned to the Virtual Machine or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "guest_driver_version": {
                    "description": "Last determined guest driver version.",
                    "notes": "Last determined guest driver version.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "guest_os": {
                    "description": "Guest OS for VMWare. Applicable only for ESX Vms.",
                    "notes": "Guest OS for VMWare.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "ha_priority": {
                    "description": "Priority for restarting in case of HA event.",
                    "format": "int64",
                    "notes": "Priority for restarting in case of HA event. Negative value indicates do not restart.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "host_uuid": {
                    "description": "A version 4 UUID identifying the host on which the Virtual Machine is currently running. If Virtual Machine is powered off, then this field is empty.",
                    "notes": "A version 4 UUID identifying the host on which the Virtual Machine is currently running",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "memory_mb": {
                    "description": "RAM in megabytes assigned to the Virtual Machine.",
                    "format": "int64",
                    "notes": "RAM in megabytes assigned to the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "memory_reservation_mb": {
                    "description": "RAM, in megabytes reserved for the Virtual Machine.",
                    "format": "int64",
                    "notes": "RAM, in megabytes reserved for the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "The Virtual Machine human readable name.",
                    "notes": "The Virtual Machine human readable name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "num_cores_per_vcpu": {
                    "description": "Number of cores assigned to each VCPUs.",
                    "format": "int32",
                    "notes": "Number of cores assigned to each VCPUs.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "num_vcpus": {
                    "description": "Number of VCPUs assigned to the Virtual Machine.",
                    "format": "int32",
                    "notes": "Number of VCPUs assigned to the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "power_state": {
                    "description": "Current power state of the Virtual Machine.",
                    "enum": [
                        "UNKNOWN",
                        "OFF",
                        "POWERING_ON",
                        "ON",
                        "SHUTTING_DOWN",
                        "POWERING_OFF",
                        "PAUSING",
                        "PAUSED",
                        "SUSPENDING",
                        "SUSPENDED",
                        "RESUMING",
                        "RESETTING",
                        "MIGRATING"
                    ],
                    "notes": "Current power state of the Virtual Machine.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "serial_ports": {
                    "description": "Virtual serial ports.",
                    "items": {
                        "$ref": "get.dto.uhura.SerialPortConfigDTO"
                    },
                    "notes": "Virtual serial ports.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "description": "Storage container on which the VM configuration files should be created. Required for ESX, Hyper-V. Not applicable for other hypervisors.",
                    "notes": "Storage container on which the VM configuration files should be created.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "timezone": {
                    "description": "The timezone for the VM's hardware clock. Any updates to the timezone will be applied during the next VM power cycle (but not reset). The default is UTC.",
                    "notes": "The timezone for the VM's hardware clock.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "tools_installer_mounted": {
                    "description": "The VM's current tools installer mount status.",
                    "notes": "The VM's current tools installer mount status.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "tools_running_status": {
                    "description": "The VM's current tools installer running status.",
                    "enum": [
                        "UNKNOWN",
                        "GUEST_TOOLS_EXECUTING_SCRIPTS",
                        "GUEST_TOOLS_NOT_RUNNING",
                        "GUEST_TOOLS_RUNNING"
                    ],
                    "notes": "The VM's current tools installer running status.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "UUID of the VM.",
                    "notes": "UUID of the VM.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vcpu_reservation_hz": {
                    "description": "CPU, in Hertz reserved for the Virtual Machine.",
                    "format": "int64",
                    "notes": "CPU, in Hertz reserved for the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "vm_customization_config": {
                    "$ref": "get.dto.acropolis.VMCustomizationConfigDTO",
                    "description": "Vm customization configuration. At boot time, this config will be replayed by VM customization tool(cloudinit/sysprep) installed in the VM to bring VM to the state defined by this config.",
                    "notes": "Vm customization configuration.",
                    "typeName": "DEFAULT"
                },
                "vm_disk_info": {
                    "description": "List of information of disks for a Virtual Machine.",
                    "items": {
                        "$ref": "get.dto.uhura.VmDiskInfoDTO"
                    },
                    "notes": "List of information of disks for a Virtual Mschine.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "vm_features": {
                    "$ref": "java.util.Map&lt;get.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;",
                    "description": "List of features to be enabled for the Virtual Machine.",
                    "notes": "List of features to be enabled for the Virtual Machine.",
                    "typeName": "DEFAULT"
                },
                "vm_gpus": {
                    "description": "List of GPUs requested for the Virtual Machine. If \"gpus_assigned\" is True, then this field represents the assigned physical GPUs.",
                    "items": {
                        "$ref": "get.dto.uhura.GPUConfigDTO"
                    },
                    "notes": "List of GPUs requested for the Virtual Machine.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "vm_logical_timestamp": {
                    "description": "Logical timestamp specified for consistency. This can be obtained from the Virtual Machine object.",
                    "format": "int64",
                    "notes": "Logical timestamp specified for consistency.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "vm_nics": {
                    "description": "List of nics to be added to the Virtual Machine.",
                    "items": {
                        "$ref": "get.dto.acropolis.VMNicSpecDTO"
                    },
                    "notes": "List of nics to be added to the Virtual Machine.",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.uhura.VmDiskInfoDTO": {
            "id": "get.dto.uhura.VmDiskInfoDTO",
            "required": [],
            "properties": {
                "disk_address": {
                    "$ref": "get.dto.acropolis.VMDiskAddressDTO",
                    "description": "Address of the virtual disk.",
                    "notes": "Address of the virtual disk.",
                    "typeName": "DEFAULT"
                },
                "flash_mode_enabled": {
                    "description": "Whether the flash mode is enabled for this disk or not.",
                    "notes": "Whether the flash mode is enabled for this disk or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_cdrom": {
                    "description": "Whether this is a CD-ROM drive.",
                    "notes": "Whether this is a CD-ROM drive.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_empty": {
                    "description": "Whether the drive is empty. This field only applies to CD-ROM drives.",
                    "notes": "Whether the drive is empty. This field only applies to CD-ROM drives.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_scsi_passthrough": {
                    "description": "Whether this SCSI disk is attached in passthrough mode to pass all SCSI commands directly to Stargate via iSCSI.",
                    "notes": "Whether this SCSI disk is attached in passthrough mode to pass all SCSI commands directly to Stargate via iSCSI.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_thin_provisioned": {
                    "description": "Whether the disk is thin provisioned. Note: This field applies to only ESX managed VMs.",
                    "notes": "Whether the disk is thin provisioned.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "shared": {
                    "description": "Whether disk is shared with others VMs or not.",
                    "notes": "Whether disk is shared with others VMs or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "size": {
                    "description": "The size of the disk in bytes",
                    "format": "int64",
                    "notes": "The size of the disk in bytes",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "source_disk_address": {
                    "$ref": "get.dto.acropolis.VMDiskAddressDTO",
                    "description": "The address of the source disk.",
                    "notes": "The address of the source disk.",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "description": "The container in which the backing vmdisk is provisioned. This field is unset when the drive is empty.",
                    "notes": "The container in which the backing vmdisk is provisioned. This field is unset when the drive is empty.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "java.util.Map&lt;get.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;": {
            "id": "java.util.Map&lt;get.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;",
            "required": [],
            "properties": {}
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/PrismGateway/services/rest/v2.0",
    "resourcePath": "/snmp",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/snmp/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get SNMP configuration.",
                    "notes": "Get the complete SNMP configuration including Users, Transports and Traps configured in the cluster.",
                    "type": "get.dto.appliance.configuration.SnmpInfoDTO",
                    "nickname": "getSnmpInfo",
                    "parameters": [],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/snmp/add_transports",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Add SNMP Transports.",
                    "notes": "Add SNMP Transports to the existing SNMP Transports.",
                    "type": "array",
                    "items": {
                        "$ref": "create.dto.appliance.configuration.SnmpTransportDTO"
                    },
                    "nickname": "addSnmpTransports",
                    "parameters": [
                        {
                            "description": "List of SNMP Transports",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "array",
                            "items": {
                                "$ref": "create.dto.appliance.configuration.SnmpTransportDTO"
                            }
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/snmp/remove_transports",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Remove SNMP Transports.",
                    "notes": "Remove SNMP Transports from the existing SNMP Transports.",
                    "type": "array",
                    "items": {
                        "$ref": "create.dto.appliance.configuration.SnmpTransportDTO"
                    },
                    "nickname": "deleteSnmpTransports",
                    "parameters": [
                        {
                            "description": "List of SNMP Transports",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "array",
                            "items": {
                                "$ref": "create.dto.appliance.configuration.SnmpTransportDTO"
                            }
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/snmp/status",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the SNMP status.",
                    "notes": "Get the SNMP status.",
                    "type": "get.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "getSnmpStatus",
                    "parameters": [],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Enable/Disable SNMP configuration.",
                    "notes": "Enable/Disable SNMP configuration in the cluster.",
                    "type": "update.dto.appliance.configuration.SnmpInfoDTO",
                    "nickname": "setSnmpStatus",
                    "parameters": [
                        {
                            "description": "Enable SNMP Status",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/snmp/transports",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of SNMP Transports.",
                    "notes": "Get the list of SNMP Transports configured in the cluster.",
                    "type": "array",
                    "items": {
                        "$ref": "get.dto.appliance.configuration.SnmpTransportDTO"
                    },
                    "nickname": "getSnmpTransports",
                    "parameters": [],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/snmp/traps",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of SNMP Traps.",
                    "notes": "Get the list of SNMP Traps configured in the cluster.",
                    "type": "get.base.EntityCollection&lt;get.dto.appliance.configuration.SnmpTrapDTO&gt;",
                    "nickname": "getSnmpTraps",
                    "parameters": [],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PATCH",
                    "summary": "Modify SNMP Trap.",
                    "notes": "Modify the specified SNMP Trap.",
                    "type": "patch.dto.appliance.configuration.SnmpTrapDTO",
                    "nickname": "patchSnmpTrap",
                    "parameters": [
                        {
                            "description": "An SNMP Trap instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "patch.dto.RequestDTO&lt;patch.dto.appliance.configuration.SnmpTrapDTO&gt;"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Add SNMP Trap.",
                    "notes": "Add SNMP Trap to the cluster.",
                    "type": "create.dto.appliance.configuration.SnmpTrapDTO",
                    "nickname": "addSnmpTrap",
                    "parameters": [
                        {
                            "description": "An SNMP Trap instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.appliance.configuration.SnmpTrapDTO"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Edit SNMP Trap.",
                    "notes": "Edit the specified SNMP Trap.",
                    "type": "update.dto.appliance.configuration.SnmpTrapDTO",
                    "nickname": "editSnmpTrap",
                    "parameters": [
                        {
                            "description": "An SNMP Trap instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.appliance.configuration.SnmpTrapDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/snmp/traps/{trap_address}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete SNMP Trap.",
                    "notes": "Delete SNMP Trap with the specified address",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "deleteSnmpTrap",
                    "parameters": [
                        {
                            "name": "trap_address",
                            "description": "Address of the SNMP Trap",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get SNMP Trap.",
                    "notes": "Get SNMP Trap with the specified address.",
                    "type": "get.dto.appliance.configuration.SnmpTrapDTO",
                    "nickname": "getSnmpTrap",
                    "parameters": [
                        {
                            "name": "trap_address",
                            "description": "Address of the SNMP Trap",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/snmp/users",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of SNMP Users.",
                    "notes": "Get the list of SNMP Users configured in the cluster.",
                    "type": "get.base.EntityCollection&lt;get.dto.appliance.configuration.SnmpUserDTO&gt;",
                    "nickname": "getSnmpUsers",
                    "parameters": [],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PATCH",
                    "summary": "Modify SNMP User.",
                    "notes": "Modify the specified SNMP User.",
                    "type": "patch.dto.appliance.configuration.SnmpUserDTO",
                    "nickname": "patchSnmpUser",
                    "parameters": [
                        {
                            "description": "An SNMP User instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "patch.dto.RequestDTO&lt;patch.dto.appliance.configuration.SnmpUserDTO&gt;"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Add SNMP User.",
                    "notes": "Add SNMP User to the cluster.",
                    "type": "create.dto.appliance.configuration.SnmpUserDTO",
                    "nickname": "addSnmpUser",
                    "parameters": [
                        {
                            "description": "An SNMP User instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.appliance.configuration.SnmpUserDTO"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Edit SNMP User.",
                    "notes": "Edit the specified SNMP User.",
                    "type": "update.dto.appliance.configuration.SnmpUserDTO",
                    "nickname": "editSnmpUser",
                    "parameters": [
                        {
                            "description": "An SNMP User instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.appliance.configuration.SnmpUserDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/snmp/users/{username}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete SNMP User.",
                    "notes": "Delete SNMP User with the specified name.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "deleteSnmpUser",
                    "parameters": [
                        {
                            "name": "username",
                            "description": "Name of the SNMP User",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get SNMP User.",
                    "notes": "Get SNMP User with the specified name.",
                    "type": "get.dto.appliance.configuration.SnmpUserDTO",
                    "nickname": "getSnmpUser",
                    "parameters": [
                        {
                            "name": "username",
                            "description": "Name of the SNMP User",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "create.dto.appliance.configuration.SnmpTransportDTO": {
            "id": "create.dto.appliance.configuration.SnmpTransportDTO",
            "required": [
                "transport_protocol",
                "port"
            ],
            "properties": {
                "port": {
                    "description": "Port number.",
                    "format": "int32",
                    "maximum": "65536",
                    "minimum": "0",
                    "notes": "Any port number which is in the range 0 - 65536",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "transport_protocol": {
                    "description": "Transport protocol dto.",
                    "enum": [
                        "TCP",
                        "TCP_6",
                        "UDP",
                        "UDP_6"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.appliance.configuration.SnmpTrapDTO": {
            "id": "create.dto.appliance.configuration.SnmpTrapDTO",
            "required": [
                "trap_address"
            ],
            "properties": {
                "community_string": {
                    "type": "string"
                },
                "engine_id": {
                    "type": "string"
                },
                "inform": {
                    "type": "boolean"
                },
                "log": {
                    "$ref": "org.slf4j.Logger"
                },
                "port": {
                    "description": "Port number.",
                    "format": "int32",
                    "maximum": "65536",
                    "minimum": "0",
                    "notes": "Any port number which is in the range 0 - 65536",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "receiver_name": {
                    "type": "string"
                },
                "transport_protocol": {
                    "enum": [
                        "TCP",
                        "TCP_6",
                        "UDP",
                        "UDP_6"
                    ],
                    "type": "string"
                },
                "trap_address": {
                    "description": "Trap address.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "trap_username": {
                    "description": "Trap Username.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "version": {
                    "description": "SNMP version.",
                    "enum": [
                        "SNMPv2C",
                        "SNMPv3"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.appliance.configuration.SnmpUserDTO": {
            "id": "create.dto.appliance.configuration.SnmpUserDTO",
            "required": [
                "username",
                "auth_type",
                "auth_key"
            ],
            "properties": {
                "auth_key": {
                    "description": "Authentication key.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "auth_type": {
                    "description": "Authorization type dto.",
                    "enum": [
                        "SHA"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "priv_key": {
                    "type": "string"
                },
                "priv_type": {
                    "enum": [
                        "AES"
                    ],
                    "type": "string"
                },
                "username": {
                    "description": "User name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.appliance.configuration.SnmpTrapDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.appliance.configuration.SnmpTrapDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.appliance.configuration.SnmpTrapDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.appliance.configuration.SnmpUserDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.appliance.configuration.SnmpUserDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.appliance.configuration.SnmpUserDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "get.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "get.dto.appliance.configuration.SnmpInfoDTO": {
            "id": "get.dto.appliance.configuration.SnmpInfoDTO",
            "required": [],
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "snmp_transports": {
                    "items": {
                        "$ref": "get.dto.appliance.configuration.SnmpTransportDTO"
                    },
                    "type": "array"
                },
                "snmp_traps": {
                    "items": {
                        "$ref": "get.dto.appliance.configuration.SnmpTrapDTO"
                    },
                    "type": "array"
                },
                "snmp_users": {
                    "items": {
                        "$ref": "get.dto.appliance.configuration.SnmpUserDTO"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.appliance.configuration.SnmpTransportDTO": {
            "id": "get.dto.appliance.configuration.SnmpTransportDTO",
            "required": [],
            "properties": {
                "port": {
                    "description": "Port number.",
                    "format": "int32",
                    "maximum": "65536",
                    "minimum": "0",
                    "notes": "Any port number which is in the range 0 - 65536",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "transport_protocol": {
                    "description": "Transport protocol dto.",
                    "enum": [
                        "TCP",
                        "TCP_6",
                        "UDP",
                        "UDP_6"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.appliance.configuration.SnmpTrapDTO": {
            "id": "get.dto.appliance.configuration.SnmpTrapDTO",
            "required": [],
            "properties": {
                "community_string": {
                    "type": "string"
                },
                "engine_id": {
                    "type": "string"
                },
                "inform": {
                    "type": "boolean"
                },
                "log": {
                    "$ref": "org.slf4j.Logger"
                },
                "port": {
                    "description": "Port number.",
                    "format": "int32",
                    "maximum": "65536",
                    "minimum": "0",
                    "notes": "Any port number which is in the range 0 - 65536",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "receiver_name": {
                    "type": "string"
                },
                "transport_protocol": {
                    "enum": [
                        "TCP",
                        "TCP_6",
                        "UDP",
                        "UDP_6"
                    ],
                    "type": "string"
                },
                "trap_address": {
                    "description": "Trap address.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "trap_username": {
                    "description": "Trap Username.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "version": {
                    "description": "SNMP version.",
                    "enum": [
                        "SNMPv2C",
                        "SNMPv3"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.appliance.configuration.SnmpUserDTO": {
            "id": "get.dto.appliance.configuration.SnmpUserDTO",
            "required": [],
            "properties": {
                "auth_key": {
                    "description": "Authentication key.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "auth_type": {
                    "description": "Authorization type dto.",
                    "enum": [
                        "SHA"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "priv_key": {
                    "type": "string"
                },
                "priv_type": {
                    "enum": [
                        "AES"
                    ],
                    "type": "string"
                },
                "username": {
                    "description": "User name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "org.slf4j.Logger": {
            "id": "org.slf4j.Logger",
            "required": [],
            "properties": {
                "r_o_o_t__l_o_g_g_e_r__n_a_m_e": {
                    "type": "string"
                }
            }
        },
        "patch.dto.RequestDTO&lt;patch.dto.appliance.configuration.SnmpTrapDTO&gt;": {
            "id": "patch.dto.RequestDTO&lt;patch.dto.appliance.configuration.SnmpTrapDTO&gt;",
            "required": [],
            "properties": {
                "cluster_uuid": {
                    "type": "string"
                },
                "generic_d_t_o": {
                    "$ref": "patch.dto.appliance.configuration.SnmpTrapDTO"
                },
                "operation": {
                    "type": "string"
                }
            }
        },
        "patch.dto.RequestDTO&lt;patch.dto.appliance.configuration.SnmpUserDTO&gt;": {
            "id": "patch.dto.RequestDTO&lt;patch.dto.appliance.configuration.SnmpUserDTO&gt;",
            "required": [],
            "properties": {
                "cluster_uuid": {
                    "type": "string"
                },
                "generic_d_t_o": {
                    "$ref": "patch.dto.appliance.configuration.SnmpUserDTO"
                },
                "operation": {
                    "type": "string"
                }
            }
        },
        "patch.dto.appliance.configuration.SnmpTrapDTO": {
            "id": "patch.dto.appliance.configuration.SnmpTrapDTO",
            "required": [
                "trap_address"
            ],
            "properties": {
                "community_string": {
                    "type": "string"
                },
                "engine_id": {
                    "type": "string"
                },
                "inform": {
                    "type": "boolean"
                },
                "log": {
                    "$ref": "org.slf4j.Logger"
                },
                "port": {
                    "description": "Port number.",
                    "format": "int32",
                    "maximum": "65536",
                    "minimum": "0",
                    "notes": "Any port number which is in the range 0 - 65536",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "receiver_name": {
                    "type": "string"
                },
                "transport_protocol": {
                    "enum": [
                        "TCP",
                        "TCP_6",
                        "UDP",
                        "UDP_6"
                    ],
                    "type": "string"
                },
                "trap_address": {
                    "description": "Trap address.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "trap_username": {
                    "description": "Trap Username.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "version": {
                    "description": "SNMP version.",
                    "enum": [
                        "SNMPv2C",
                        "SNMPv3"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "patch.dto.appliance.configuration.SnmpUserDTO": {
            "id": "patch.dto.appliance.configuration.SnmpUserDTO",
            "required": [
                "username",
                "auth_type",
                "auth_key"
            ],
            "properties": {
                "auth_key": {
                    "description": "Authentication key.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "auth_type": {
                    "description": "Authorization type dto.",
                    "enum": [
                        "SHA"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "priv_key": {
                    "type": "string"
                },
                "priv_type": {
                    "enum": [
                        "AES"
                    ],
                    "type": "string"
                },
                "username": {
                    "description": "User name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "update.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "update.dto.appliance.configuration.SnmpInfoDTO": {
            "id": "update.dto.appliance.configuration.SnmpInfoDTO",
            "required": [],
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "snmp_transports": {
                    "items": {
                        "$ref": "update.dto.appliance.configuration.SnmpTransportDTO"
                    },
                    "type": "array"
                },
                "snmp_traps": {
                    "items": {
                        "$ref": "update.dto.appliance.configuration.SnmpTrapDTO"
                    },
                    "type": "array"
                },
                "snmp_users": {
                    "items": {
                        "$ref": "update.dto.appliance.configuration.SnmpUserDTO"
                    },
                    "type": "array"
                }
            }
        },
        "update.dto.appliance.configuration.SnmpTransportDTO": {
            "id": "update.dto.appliance.configuration.SnmpTransportDTO",
            "required": [
                "transport_protocol",
                "port"
            ],
            "properties": {
                "port": {
                    "description": "Port number.",
                    "format": "int32",
                    "maximum": "65536",
                    "minimum": "0",
                    "notes": "Any port number which is in the range 0 - 65536",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "transport_protocol": {
                    "description": "Transport protocol dto.",
                    "enum": [
                        "TCP",
                        "TCP_6",
                        "UDP",
                        "UDP_6"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.appliance.configuration.SnmpTrapDTO": {
            "id": "update.dto.appliance.configuration.SnmpTrapDTO",
            "required": [
                "trap_address"
            ],
            "properties": {
                "community_string": {
                    "type": "string"
                },
                "engine_id": {
                    "type": "string"
                },
                "inform": {
                    "type": "boolean"
                },
                "log": {
                    "$ref": "org.slf4j.Logger"
                },
                "port": {
                    "description": "Port number.",
                    "format": "int32",
                    "maximum": "65536",
                    "minimum": "0",
                    "notes": "Any port number which is in the range 0 - 65536",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "receiver_name": {
                    "type": "string"
                },
                "transport_protocol": {
                    "enum": [
                        "TCP",
                        "TCP_6",
                        "UDP",
                        "UDP_6"
                    ],
                    "type": "string"
                },
                "trap_address": {
                    "description": "Trap address.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "trap_username": {
                    "description": "Trap Username.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "version": {
                    "description": "SNMP version.",
                    "enum": [
                        "SNMPv2C",
                        "SNMPv3"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.appliance.configuration.SnmpUserDTO": {
            "id": "update.dto.appliance.configuration.SnmpUserDTO",
            "required": [
                "username",
                "auth_type",
                "auth_key"
            ],
            "properties": {
                "auth_key": {
                    "description": "Authentication key.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "auth_type": {
                    "description": "Authorization type dto.",
                    "enum": [
                        "SHA"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "priv_key": {
                    "type": "string"
                },
                "priv_type": {
                    "enum": [
                        "AES"
                    ],
                    "type": "string"
                },
                "username": {
                    "description": "User name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/PrismGateway/services/rest/v2.0",
    "resourcePath": "/storage_containers",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/storage_containers/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of Storage Containers.",
                    "notes": "Get the list of Storage Containers configured in the cluster.",
                    "type": "get.base.EntityCollection&lt;get.dto.appliance.configuration.ContainerDTO&gt;",
                    "nickname": "getContainers",
                    "parameters": [
                        {
                            "name": "count",
                            "description": "Number of Storage Containers to retrieve",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "filter_criteria",
                            "description": "Filter criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "sort_criteria",
                            "description": "Sort criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "search_string",
                            "description": "Search string",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "search_attribute_list",
                            "description": "Search attribute list",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "projection",
                            "description": "Projections on the attributes",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PATCH",
                    "summary": "Modify a Storage Container.",
                    "notes": "Modify the specified Storage Container.",
                    "type": "patch.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "patchContainer",
                    "parameters": [
                        {
                            "description": "A Storage Container instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "patch.dto.RequestDTO&lt;patch.dto.appliance.configuration.ContainerDTO&gt;"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Add a Storage Container.",
                    "notes": "Add a Storage Container to the cluster.",
                    "type": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "addContainer",
                    "parameters": [
                        {
                            "description": "A Storage Container instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.appliance.configuration.ContainerDTO"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Update a Storage Container.",
                    "notes": "Update the specified Storage Container.",
                    "type": "update.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "editContainer",
                    "parameters": [
                        {
                            "description": "A Storage Container instance",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.appliance.configuration.ContainerDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/storage_containers/alerts",
            "operations": [
                {
                    "deprecated": "true",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of alerts generated on any Storage Container.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getContainerAlerts",
                    "parameters": [
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of alerts",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "resolved",
                            "description": "Alerts which have been resolved",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Alerts which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "severity",
                            "description": "Alert severities",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "alert_type_uuid",
                            "description": "Alert type ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/storage_containers/datastores",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of NFS Datastores.",
                    "notes": "Get the list of NFS Datastores mounted using Storage Containers in the cluster.",
                    "type": "array",
                    "items": {
                        "$ref": "get.dto.esx.NfsDatastoreInfoDTO"
                    },
                    "nickname": "getNfsDatastores",
                    "parameters": [],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/storage_containers/datastores/add_datastore",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Add an NFS Datastore.",
                    "notes": "Add an NFS Datastore.",
                    "type": "create.dto.esx.CreateNfsDatastoreStatusDTO",
                    "nickname": "createNfsDatastores",
                    "parameters": [
                        {
                            "description": "Add request",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.esx.CreateNfsDatastoreRequestDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/storage_containers/datastores/remove_datastore",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Remove an NFS Datastore.",
                    "notes": "Remove an NFS Datastore.",
                    "type": "create.dto.esx.DeleteNfsDatastoreStatusDTO",
                    "nickname": "deleteNfsDatastores",
                    "parameters": [
                        {
                            "description": "Remove request",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.esx.DeleteNfsDatastoreRequestDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/storage_containers/events",
            "operations": [
                {
                    "deprecated": "true",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of events generated on any Storage Container.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getContainerEvents",
                    "parameters": [
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of events",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Events which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/storage_containers/{uuid}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete a Storage Container.",
                    "notes": "Delete a Storage Container with the specified uuid from the cluster.",
                    "type": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "deleteContainer",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of the Storage Container",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "ignore_small_files",
                            "description": "Ignore small file",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get a Storage Container.",
                    "notes": "Get a Storage Container with the specified uuid.",
                    "type": "get.dto.appliance.configuration.ContainerDTO",
                    "nickname": "getContainer",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of the Storage Container",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "projection",
                            "description": "Projections on the attributes",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/storage_containers/{uuid}/alerts",
            "operations": [
                {
                    "deprecated": "true",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of alerts generated on a specified Storage Container.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getAlertsForContainer",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of a Storage Container",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of alerts",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "resolved",
                            "description": "Alerts which have been resolved",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Alerts which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "severity",
                            "description": "Alert severities",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "alert_type_uuid",
                            "description": "Alert type ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/storage_containers/{uuid}/events",
            "operations": [
                {
                    "deprecated": "true",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of events generated on a specified Container.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getEventsForContainer",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of a Storage Container",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of events",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Events which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/storage_containers/{uuid}/stats/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the stats for a specified Storage Container.",
                    "notes": "If start time and end time are included in the query string, then historical stats are retrieved. Otherwise, the latest stats are retrieved.",
                    "type": "get.base.StatsResponse",
                    "nickname": "getContainerStats",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of a Storage Container",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "metrics",
                            "description": "List of metrics",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "interval_in_secs",
                            "description": "Sampling interval of stats",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/storage_containers/{uuid}/vdisks",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of VDisks.",
                    "notes": "Get the list of VDisks of the specified Container.",
                    "type": "get.base.EntityCollection&lt;get.dto.appliance.configuration.VDiskDTO&gt;",
                    "nickname": "getVDisksInContainer",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of a Storage Container",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "create.dto.alerts.AlertSummaryDTO": {
            "id": "create.dto.alerts.AlertSummaryDTO",
            "required": [],
            "properties": {
                "alert_summaries": {
                    "$ref": "java.util.Map&lt;create.dto.alerts.AlertDTO$AlertSeverity, create.base.EntityCollection&lt;create.dto.alerts.AlertDTO&gt;&gt;"
                },
                "count": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "create.dto.appliance.configuration.ContainerDTO": {
            "id": "create.dto.appliance.configuration.ContainerDTO",
            "required": [],
            "properties": {
                "advertised_capacity": {
                    "format": "int64",
                    "type": "integer"
                },
                "alert_summary": {
                    "$ref": "create.dto.alerts.AlertSummaryDTO"
                },
                "compression_delay_in_secs": {
                    "format": "int32",
                    "type": "integer"
                },
                "compression_enabled": {
                    "type": "boolean"
                },
                "down_migrate_times_in_secs": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.Integer&gt;"
                },
                "enable_software_encryption": {
                    "type": "boolean"
                },
                "erasure_code": {
                    "type": "string"
                },
                "erasure_code_delay_secs": {
                    "format": "int32",
                    "type": "integer"
                },
                "finger_print_on_write": {
                    "enum": [
                        "NONE",
                        "OFF",
                        "ON"
                    ],
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "create.dto.health.check.HealthSummaryDTO"
                },
                "id": {
                    "type": "string"
                },
                "ilm_policy": {
                    "type": "string"
                },
                "is_nutanix_managed": {
                    "type": "boolean"
                },
                "mapped_remote_containers": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "marked_for_removal": {
                    "type": "boolean"
                },
                "max_capacity": {
                    "format": "int64",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "nfs_whitelist": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "nfs_whitelist_inherited": {
                    "type": "boolean"
                },
                "on_disk_dedup": {
                    "enum": [
                        "NONE",
                        "OFF",
                        "POST_PROCESS"
                    ],
                    "type": "string"
                },
                "oplog_replication_factor": {
                    "format": "int32",
                    "type": "integer"
                },
                "random_io_preference": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "replication_factor": {
                    "format": "int32",
                    "type": "integer"
                },
                "seq_io_preference": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "storage_container_uuid": {
                    "type": "string"
                },
                "total_explicit_reserved_capacity": {
                    "format": "int64",
                    "type": "integer"
                },
                "total_implicit_reserved_capacity": {
                    "format": "int64",
                    "type": "integer"
                },
                "usage_stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "vstore_name_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            }
        },
        "create.dto.esx.CreateNfsDatastoreRequestDTO": {
            "id": "create.dto.esx.CreateNfsDatastoreRequestDTO",
            "required": [],
            "properties": {
                "datastore_name": {
                    "type": "string"
                },
                "node_ids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "node_uuids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "read_only": {
                    "type": "boolean"
                },
                "storage_container_name": {
                    "type": "string"
                },
                "target_path": {
                    "type": "string"
                }
            }
        },
        "create.dto.esx.CreateNfsDatastoreStatusDTO": {
            "id": "create.dto.esx.CreateNfsDatastoreStatusDTO",
            "required": [],
            "properties": {
                "node_specific_status": {
                    "items": {
                        "$ref": "create.dto.esx.CreateNfsDatastoreStatusDTO$NodeSpecificCreateStatus"
                    },
                    "type": "array"
                }
            }
        },
        "create.dto.esx.CreateNfsDatastoreStatusDTO$NodeSpecificCreateStatus": {
            "id": "create.dto.esx.CreateNfsDatastoreStatusDTO$NodeSpecificCreateStatus",
            "required": [],
            "properties": {
                "capacity": {
                    "format": "int64",
                    "type": "integer"
                },
                "free_space": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "node_id": {
                    "type": "string"
                },
                "node_ip_address": {
                    "type": "string"
                },
                "node_uuid": {
                    "type": "string"
                },
                "successful": {
                    "type": "boolean"
                }
            }
        },
        "create.dto.esx.DeleteNfsDatastoreRequestDTO": {
            "id": "create.dto.esx.DeleteNfsDatastoreRequestDTO",
            "required": [],
            "properties": {
                "datastore_name": {
                    "type": "string"
                },
                "node_ids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "node_uuids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            }
        },
        "create.dto.esx.DeleteNfsDatastoreStatusDTO": {
            "id": "create.dto.esx.DeleteNfsDatastoreStatusDTO",
            "required": [],
            "properties": {
                "node_specific_status": {
                    "items": {
                        "$ref": "create.dto.esx.DeleteNfsDatastoreStatusDTO$NodeSpecificDeleteStatus"
                    },
                    "type": "array"
                }
            }
        },
        "create.dto.esx.DeleteNfsDatastoreStatusDTO$NodeSpecificDeleteStatus": {
            "id": "create.dto.esx.DeleteNfsDatastoreStatusDTO$NodeSpecificDeleteStatus",
            "required": [],
            "properties": {
                "message": {
                    "type": "string"
                },
                "node_id": {
                    "type": "string"
                },
                "node_uuid": {
                    "type": "string"
                },
                "successful": {
                    "type": "boolean"
                }
            }
        },
        "create.dto.health.check.EntityTypeHealthCheckSummaryDTO": {
            "id": "create.dto.health.check.EntityTypeHealthCheckSummaryDTO",
            "required": [],
            "properties": {
                "checks_in_error": {
                    "$ref": "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckErrorsDTO&gt;"
                },
                "detailed_check_summary": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;"
                }
            }
        },
        "create.dto.health.check.HealthSummaryDTO": {
            "id": "create.dto.health.check.HealthSummaryDTO",
            "required": [],
            "properties": {
                "entity_type_summaries": {
                    "items": {
                        "$ref": "create.dto.health.check.EntityTypeHealthCheckSummaryDTO"
                    },
                    "type": "array"
                },
                "health_check_summaries": {
                    "$ref": "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckSummaryDTO&gt;"
                },
                "health_status": {
                    "enum": [
                        "Critical",
                        "Warning",
                        "Good",
                        "Unknown",
                        "Error"
                    ],
                    "type": "string"
                }
            }
        },
        "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "delete.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.ResultContentDescriptor"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.appliance.configuration.ContainerDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.appliance.configuration.ContainerDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.appliance.configuration.ContainerDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.appliance.configuration.VDiskDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.appliance.configuration.VDiskDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.appliance.configuration.VDiskDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.base.StatsResponse": {
            "id": "get.base.StatsResponse",
            "required": [],
            "properties": {
                "stats_specific_responses": {
                    "items": {
                        "$ref": "get.base.StatsResponse$StatsSpecificResponse"
                    },
                    "type": "array"
                }
            }
        },
        "get.base.StatsResponse$StatsSpecificResponse": {
            "id": "get.base.StatsResponse$StatsSpecificResponse",
            "required": [],
            "properties": {
                "interval_in_secs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "metric": {
                    "type": "string"
                },
                "start_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "successful": {
                    "type": "boolean"
                },
                "values": {
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.EntityMetadata": {
            "id": "get.dto.EntityMetadata",
            "required": [],
            "properties": {
                "additional_fields": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "context_hint_field": {
                    "type": "string"
                },
                "context_hint_value": {
                    "type": "string"
                },
                "entity_id": {
                    "type": "string"
                },
                "entity_name": {
                    "type": "string"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                }
            }
        },
        "get.dto.ResultContentDescriptor": {
            "id": "get.dto.ResultContentDescriptor",
            "required": [],
            "properties": {
                "metadata": {
                    "$ref": "get.dto.ResultMetadata"
                },
                "perspectives": {
                    "items": {
                        "$ref": "get.dto.ResultContentDescriptor$Perspective"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.ResultContentDescriptor$Perspective": {
            "id": "get.dto.ResultContentDescriptor$Perspective",
            "required": [],
            "properties": {
                "format": {
                    "enum": [
                        "TABLE",
                        "BAR_CHART",
                        "PIE_CHART",
                        "TIME_SERIES",
                        "KEY_VALUE",
                        "COUNT",
                        "HEALTH_SUMMARY",
                        "ALERT_INFO",
                        "CAPACITY",
                        "OTHER"
                    ],
                    "type": "string"
                },
                "metadata": {
                    "$ref": "get.dto.ResultMetadata"
                },
                "query": {},
                "result": {},
                "type": {
                    "type": "string"
                }
            }
        },
        "get.dto.ResultMetadata": {
            "id": "get.dto.ResultMetadata",
            "required": [],
            "properties": {
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filters": {
                    "items": {
                        "$ref": "get.dto.ResultMetadata$Filter"
                    },
                    "type": "array"
                },
                "instances": {
                    "items": {
                        "$ref": "get.dto.EntityMetadata"
                    },
                    "type": "array"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "get.dto.ResultMetadata$Filter": {
            "id": "get.dto.ResultMetadata$Filter",
            "required": [],
            "properties": {
                "display_for_rhs": {
                    "type": "string"
                },
                "lhs": {
                    "type": "string"
                },
                "operator": {
                    "description": "Operator for the filter.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "rhs": {
                    "type": "string"
                }
            }
        },
        "get.dto.alerts.AlertCauseDTO": {
            "id": "get.dto.alerts.AlertCauseDTO",
            "required": [],
            "properties": {
                "actions": {
                    "description": "Possible actions to resolve this alert",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "additional_links": {
                    "description": "Additional links",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "alert_namespace": {
                    "description": "Namespace this alert belongs to",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "cause": {
                    "description": "Detailed description",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "chart_queries": {
                    "$ref": "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;",
                    "description": "Charts that are relevant to this cause",
                    "typeName": "DEFAULT"
                },
                "details": {
                    "description": "Symptoms for this cause",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "has_global_details": {
                    "description": "Whether the alert has global details or not",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "id": {
                    "description": "Cause Id",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "num_resolved_count": {
                    "description": "Number of times this cause has resolved the alert",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "parent_cause_id": {
                    "description": "Id of the alert/cause this is a possible cause for",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "title": {
                    "description": "Short description",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "troubleshooting_steps": {
                    "description": "Steps to determine whether this is the cause.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO": {
            "id": "get.dto.alerts.AlertDTO",
            "required": [],
            "properties": {
                "acknowledged": {
                    "type": "boolean"
                },
                "acknowledged_by_username": {
                    "type": "string"
                },
                "acknowledged_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "affected_entities": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$AffectedEntity"
                    },
                    "type": "array"
                },
                "alert_details": {
                    "$ref": "get.dto.alerts.AlertDTO$AlertDetailsDTO"
                },
                "alert_title": {
                    "type": "string"
                },
                "alert_type_uuid": {
                    "type": "string"
                },
                "auto_resolved": {
                    "type": "boolean"
                },
                "check_id": {
                    "type": "string"
                },
                "classifications": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "context_types": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "context_values": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "created_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "detailed_message": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "impact_types": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "last_occurrence_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "node_uuid": {
                    "type": "string"
                },
                "originating_cluster_uuid": {
                    "type": "string"
                },
                "possible_causes": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertCauseDTO"
                    },
                    "type": "array"
                },
                "resolved": {
                    "type": "boolean"
                },
                "resolved_by_username": {
                    "type": "string"
                },
                "resolved_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "service_v_m_id": {
                    "type": "string"
                },
                "severity": {
                    "description": "This field describes the severity of the alert.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "user_defined": {
                    "type": "boolean"
                }
            }
        },
        "get.dto.alerts.AlertDTO$AffectedEntity": {
            "id": "get.dto.alerts.AlertDTO$AffectedEntity",
            "required": [],
            "properties": {
                "entity_name": {
                    "type": "string"
                },
                "entity_type": {
                    "type": "string"
                },
                "entity_type_display_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "get.dto.alerts.AlertDTO$AlertDetailsDTO": {
            "id": "get.dto.alerts.AlertDTO$AlertDetailsDTO",
            "required": [],
            "properties": {
                "metric_details": {
                    "description": "List of metric details associated with the alert",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$MetricDetails"
                    },
                    "notes": "List of metric details associated with the alert",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "severity_trails": {
                    "description": "List that contains severity level change details",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$SeverityTrail"
                    },
                    "notes": "List that contains severity level change details",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$MetricDetails": {
            "id": "get.dto.alerts.AlertDTO$MetricDetails",
            "required": [],
            "properties": {
                "comparison_operator": {
                    "description": "Comparison Operator to be applied for teh values.",
                    "notes": "Comparison Operator",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "condition_type": {
                    "description": "Condition Type that the current metric is associated with.",
                    "enum": [
                        "STATIC_THRESHOLD",
                        "ANOMALY",
                        "SAFETY_ZONE"
                    ],
                    "notes": "Condition Type that the current metric is associated with.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "data_type": {
                    "description": "Data Type of the value.",
                    "enum": [
                        "LONG",
                        "DOUBLE",
                        "BOOLEAN",
                        "STRING"
                    ],
                    "notes": "Data Type of the value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entity_id": {
                    "description": "UUID of the entity",
                    "notes": "UUID of the entity",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entity_type": {
                    "description": "Entity Type",
                    "notes": "Entity Type",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_display_name": {
                    "description": "Display name of the metric",
                    "notes": "Display name of the metric",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_name": {
                    "description": "Name of the metric",
                    "notes": "Name of the metric",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_value_details": {
                    "description": "List of metric values at different instances of time in the alert lifecycle",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$MetricValueDetails"
                    },
                    "notes": "List of metric values at different instances of time in the alert lifecycle",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "unit": {
                    "description": "Unit of the metric value.",
                    "notes": "Unit of the metric value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$MetricValueDetails": {
            "id": "get.dto.alerts.AlertDTO$MetricValueDetails",
            "required": [],
            "properties": {
                "metric_threshold_value": {
                    "description": "Threshold value of the metric that was specified in the policy at that given time.",
                    "notes": "Threshold value of the metric that was specified in the policy at that given time.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_value": {
                    "description": "Actual value of the metric at that given time.",
                    "notes": "Actual value of the metric at that given time.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "state_change_time_stamp_in_usecs": {
                    "description": "Time at which the alert's state change occurred.",
                    "format": "int64",
                    "notes": "Time at which the alert's state change occurred.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$SeverityTrail": {
            "id": "get.dto.alerts.AlertDTO$SeverityTrail",
            "required": [],
            "properties": {
                "severity": {
                    "description": "Severity level of the alert. Can be INFO, WARNING or CRITICAL",
                    "notes": "Severity level of the alert. Can be INFO, WARNING or CRITICAL",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "severity_change_timestamp_in_usecs": {
                    "description": "Time at which the severity level change occurred",
                    "format": "int64",
                    "notes": "Time at which the severity level change occurred",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertSummaryDTO": {
            "id": "get.dto.alerts.AlertSummaryDTO",
            "required": [],
            "properties": {
                "alert_summaries": {
                    "$ref": "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;"
                },
                "count": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "get.dto.appliance.configuration.ContainerDTO": {
            "id": "get.dto.appliance.configuration.ContainerDTO",
            "required": [],
            "properties": {
                "advertised_capacity": {
                    "format": "int64",
                    "type": "integer"
                },
                "alert_summary": {
                    "$ref": "get.dto.alerts.AlertSummaryDTO"
                },
                "cluster_uuid": {
                    "description": " Uuid of the cluster this entity belongs to",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "compression_delay_in_secs": {
                    "format": "int32",
                    "type": "integer"
                },
                "compression_enabled": {
                    "type": "boolean"
                },
                "down_migrate_times_in_secs": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.Integer&gt;"
                },
                "enable_software_encryption": {
                    "type": "boolean"
                },
                "erasure_code": {
                    "type": "string"
                },
                "erasure_code_delay_secs": {
                    "format": "int32",
                    "type": "integer"
                },
                "finger_print_on_write": {
                    "enum": [
                        "NONE",
                        "OFF",
                        "ON"
                    ],
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "get.dto.health.check.HealthSummaryDTO"
                },
                "id": {
                    "type": "string"
                },
                "ilm_policy": {
                    "type": "string"
                },
                "is_nutanix_managed": {
                    "type": "boolean"
                },
                "mapped_remote_containers": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "marked_for_removal": {
                    "type": "boolean"
                },
                "max_capacity": {
                    "format": "int64",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "nfs_whitelist": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "nfs_whitelist_inherited": {
                    "type": "boolean"
                },
                "on_disk_dedup": {
                    "enum": [
                        "NONE",
                        "OFF",
                        "POST_PROCESS"
                    ],
                    "type": "string"
                },
                "oplog_replication_factor": {
                    "format": "int32",
                    "type": "integer"
                },
                "random_io_preference": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "replication_factor": {
                    "format": "int32",
                    "type": "integer"
                },
                "seq_io_preference": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "storage_container_uuid": {
                    "type": "string"
                },
                "total_explicit_reserved_capacity": {
                    "format": "int64",
                    "type": "integer"
                },
                "total_implicit_reserved_capacity": {
                    "format": "int64",
                    "type": "integer"
                },
                "usage_stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "vstore_name_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.appliance.configuration.VDiskDTO": {
            "id": "get.dto.appliance.configuration.VDiskDTO",
            "required": [],
            "properties": {
                "alert_summary": {
                    "$ref": "get.dto.alerts.AlertSummaryDTO"
                },
                "cluster_uuid": {
                    "description": " Uuid of the cluster this entity belongs to",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "creation_time_in_micros_since_epoch": {
                    "format": "int64",
                    "type": "integer"
                },
                "disabled": {
                    "type": "boolean"
                },
                "erasure_code": {
                    "type": "string"
                },
                "erasure_code_delay_secs": {
                    "format": "int32",
                    "type": "integer"
                },
                "finger_print_on_write": {
                    "enum": [
                        "NONE",
                        "OFF",
                        "ON"
                    ],
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "get.dto.health.check.HealthSummaryDTO"
                },
                "immutable": {
                    "type": "boolean"
                },
                "iscsi_lun": {
                    "format": "int32",
                    "type": "integer"
                },
                "iscsi_target_name": {
                    "type": "string"
                },
                "marked_for_removal": {
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "max_capacity_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "nfs_file": {
                    "type": "boolean"
                },
                "nfs_file_name": {
                    "type": "string"
                },
                "on_disk_dedup": {
                    "enum": [
                        "NONE",
                        "OFF",
                        "POST_PROCESS"
                    ],
                    "type": "string"
                },
                "parent_nfs_file_name": {
                    "type": "string"
                },
                "qos_fairshare": {
                    "type": "string"
                },
                "qos_priority": {
                    "type": "string"
                },
                "shared": {
                    "type": "boolean"
                },
                "snapshot": {
                    "type": "boolean"
                },
                "snapshots": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "storage_container_id": {
                    "type": "string"
                },
                "storage_container_name": {
                    "type": "string"
                },
                "storage_container_uuid": {
                    "type": "string"
                },
                "total_reserved_capacity_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "usage_stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "vdisk_uuid": {
                    "type": "string"
                }
            }
        },
        "get.dto.esx.NfsDatastoreInfoDTO": {
            "id": "get.dto.esx.NfsDatastoreInfoDTO",
            "required": [],
            "properties": {
                "capacity": {
                    "format": "int64",
                    "type": "integer"
                },
                "datastore_name": {
                    "type": "string"
                },
                "free_space": {
                    "format": "int64",
                    "type": "integer"
                },
                "host_id": {
                    "type": "string"
                },
                "host_ip_address": {
                    "type": "string"
                },
                "host_uuid": {
                    "type": "string"
                },
                "storage_container_id": {
                    "type": "string"
                },
                "storage_container_name": {
                    "type": "string"
                },
                "storage_container_uuid": {
                    "type": "string"
                },
                "vm_names": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.health.check.EntityTypeHealthCheckSummaryDTO": {
            "id": "get.dto.health.check.EntityTypeHealthCheckSummaryDTO",
            "required": [],
            "properties": {
                "checks_in_error": {
                    "$ref": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;"
                },
                "detailed_check_summary": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;"
                }
            }
        },
        "get.dto.health.check.HealthSummaryDTO": {
            "id": "get.dto.health.check.HealthSummaryDTO",
            "required": [],
            "properties": {
                "entity_type_summaries": {
                    "items": {
                        "$ref": "get.dto.health.check.EntityTypeHealthCheckSummaryDTO"
                    },
                    "type": "array"
                },
                "health_check_summaries": {
                    "$ref": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;"
                },
                "health_status": {
                    "enum": [
                        "Critical",
                        "Warning",
                        "Good",
                        "Unknown",
                        "Error"
                    ],
                    "type": "string"
                }
            }
        },
        "java.util.Map&lt;create.dto.alerts.AlertDTO$AlertSeverity, create.base.EntityCollection&lt;create.dto.alerts.AlertDTO&gt;&gt;": {
            "id": "java.util.Map&lt;create.dto.alerts.AlertDTO$AlertSeverity, create.base.EntityCollection&lt;create.dto.alerts.AlertDTO&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;": {
            "id": "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckErrorsDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckErrorsDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckSummaryDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckSummaryDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.lang.String&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.lang.String&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.util.Map&lt;patch.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.util.Map&lt;patch.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, patch.dto.health.check.HealthCheckErrorsDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, patch.dto.health.check.HealthCheckErrorsDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, patch.dto.health.check.HealthCheckSummaryDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, patch.dto.health.check.HealthCheckSummaryDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckErrorsDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckErrorsDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckSummaryDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckSummaryDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;patch.dto.alerts.AlertDTO$AlertSeverity, patch.base.EntityCollection&lt;patch.dto.alerts.AlertDTO&gt;&gt;": {
            "id": "java.util.Map&lt;patch.dto.alerts.AlertDTO$AlertSeverity, patch.base.EntityCollection&lt;patch.dto.alerts.AlertDTO&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;patch.dto.health.check.HealthStatus, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;patch.dto.health.check.HealthStatus, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;update.dto.alerts.AlertDTO$AlertSeverity, update.base.EntityCollection&lt;update.dto.alerts.AlertDTO&gt;&gt;": {
            "id": "java.util.Map&lt;update.dto.alerts.AlertDTO$AlertSeverity, update.base.EntityCollection&lt;update.dto.alerts.AlertDTO&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "patch.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "patch.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "patch.dto.RequestDTO&lt;patch.dto.appliance.configuration.ContainerDTO&gt;": {
            "id": "patch.dto.RequestDTO&lt;patch.dto.appliance.configuration.ContainerDTO&gt;",
            "required": [],
            "properties": {
                "cluster_uuid": {
                    "type": "string"
                },
                "generic_d_t_o": {
                    "$ref": "patch.dto.appliance.configuration.ContainerDTO"
                },
                "operation": {
                    "type": "string"
                }
            }
        },
        "patch.dto.alerts.AlertSummaryDTO": {
            "id": "patch.dto.alerts.AlertSummaryDTO",
            "required": [],
            "properties": {
                "alert_summaries": {
                    "$ref": "java.util.Map&lt;patch.dto.alerts.AlertDTO$AlertSeverity, patch.base.EntityCollection&lt;patch.dto.alerts.AlertDTO&gt;&gt;"
                },
                "count": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "patch.dto.appliance.configuration.ContainerDTO": {
            "id": "patch.dto.appliance.configuration.ContainerDTO",
            "required": [],
            "properties": {
                "advertised_capacity": {
                    "format": "int64",
                    "type": "integer"
                },
                "alert_summary": {
                    "$ref": "patch.dto.alerts.AlertSummaryDTO"
                },
                "compression_delay_in_secs": {
                    "format": "int32",
                    "type": "integer"
                },
                "compression_enabled": {
                    "type": "boolean"
                },
                "down_migrate_times_in_secs": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.Integer&gt;"
                },
                "enable_software_encryption": {
                    "type": "boolean"
                },
                "erasure_code": {
                    "type": "string"
                },
                "erasure_code_delay_secs": {
                    "format": "int32",
                    "type": "integer"
                },
                "finger_print_on_write": {
                    "enum": [
                        "NONE",
                        "OFF",
                        "ON"
                    ],
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "patch.dto.health.check.HealthSummaryDTO"
                },
                "id": {
                    "type": "string"
                },
                "ilm_policy": {
                    "type": "string"
                },
                "is_nutanix_managed": {
                    "type": "boolean"
                },
                "mapped_remote_containers": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "marked_for_removal": {
                    "type": "boolean"
                },
                "max_capacity": {
                    "format": "int64",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "nfs_whitelist": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "nfs_whitelist_inherited": {
                    "type": "boolean"
                },
                "on_disk_dedup": {
                    "enum": [
                        "NONE",
                        "OFF",
                        "POST_PROCESS"
                    ],
                    "type": "string"
                },
                "oplog_replication_factor": {
                    "format": "int32",
                    "type": "integer"
                },
                "random_io_preference": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "replication_factor": {
                    "format": "int32",
                    "type": "integer"
                },
                "seq_io_preference": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "storage_container_uuid": {
                    "type": "string"
                },
                "total_explicit_reserved_capacity": {
                    "format": "int64",
                    "type": "integer"
                },
                "total_implicit_reserved_capacity": {
                    "format": "int64",
                    "type": "integer"
                },
                "usage_stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "vstore_name_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            }
        },
        "patch.dto.health.check.EntityTypeHealthCheckSummaryDTO": {
            "id": "patch.dto.health.check.EntityTypeHealthCheckSummaryDTO",
            "required": [],
            "properties": {
                "checks_in_error": {
                    "$ref": "java.util.Map&lt;java.lang.String, patch.dto.health.check.HealthCheckErrorsDTO&gt;"
                },
                "detailed_check_summary": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.util.Map&lt;patch.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "java.util.Map&lt;patch.dto.health.check.HealthStatus, java.lang.Integer&gt;"
                }
            }
        },
        "patch.dto.health.check.HealthSummaryDTO": {
            "id": "patch.dto.health.check.HealthSummaryDTO",
            "required": [],
            "properties": {
                "entity_type_summaries": {
                    "items": {
                        "$ref": "patch.dto.health.check.EntityTypeHealthCheckSummaryDTO"
                    },
                    "type": "array"
                },
                "health_check_summaries": {
                    "$ref": "java.util.Map&lt;java.lang.String, patch.dto.health.check.HealthCheckSummaryDTO&gt;"
                },
                "health_status": {
                    "enum": [
                        "Critical",
                        "Warning",
                        "Good",
                        "Unknown",
                        "Error"
                    ],
                    "type": "string"
                }
            }
        },
        "update.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "update.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "update.dto.alerts.AlertSummaryDTO": {
            "id": "update.dto.alerts.AlertSummaryDTO",
            "required": [],
            "properties": {
                "alert_summaries": {
                    "$ref": "java.util.Map&lt;update.dto.alerts.AlertDTO$AlertSeverity, update.base.EntityCollection&lt;update.dto.alerts.AlertDTO&gt;&gt;"
                },
                "count": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "update.dto.appliance.configuration.ContainerDTO": {
            "id": "update.dto.appliance.configuration.ContainerDTO",
            "required": [],
            "properties": {
                "advertised_capacity": {
                    "format": "int64",
                    "type": "integer"
                },
                "alert_summary": {
                    "$ref": "update.dto.alerts.AlertSummaryDTO"
                },
                "compression_delay_in_secs": {
                    "format": "int32",
                    "type": "integer"
                },
                "compression_enabled": {
                    "type": "boolean"
                },
                "down_migrate_times_in_secs": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.Integer&gt;"
                },
                "enable_software_encryption": {
                    "type": "boolean"
                },
                "erasure_code": {
                    "type": "string"
                },
                "erasure_code_delay_secs": {
                    "format": "int32",
                    "type": "integer"
                },
                "finger_print_on_write": {
                    "enum": [
                        "NONE",
                        "OFF",
                        "ON"
                    ],
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "update.dto.health.check.HealthSummaryDTO"
                },
                "id": {
                    "type": "string"
                },
                "ilm_policy": {
                    "type": "string"
                },
                "is_nutanix_managed": {
                    "type": "boolean"
                },
                "mapped_remote_containers": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "marked_for_removal": {
                    "type": "boolean"
                },
                "max_capacity": {
                    "format": "int64",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "nfs_whitelist": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "nfs_whitelist_inherited": {
                    "type": "boolean"
                },
                "on_disk_dedup": {
                    "enum": [
                        "NONE",
                        "OFF",
                        "POST_PROCESS"
                    ],
                    "type": "string"
                },
                "oplog_replication_factor": {
                    "format": "int32",
                    "type": "integer"
                },
                "random_io_preference": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "replication_factor": {
                    "format": "int32",
                    "type": "integer"
                },
                "seq_io_preference": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "storage_container_uuid": {
                    "type": "string"
                },
                "total_explicit_reserved_capacity": {
                    "format": "int64",
                    "type": "integer"
                },
                "total_implicit_reserved_capacity": {
                    "format": "int64",
                    "type": "integer"
                },
                "usage_stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "vstore_name_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            }
        },
        "update.dto.health.check.EntityTypeHealthCheckSummaryDTO": {
            "id": "update.dto.health.check.EntityTypeHealthCheckSummaryDTO",
            "required": [],
            "properties": {
                "checks_in_error": {
                    "$ref": "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckErrorsDTO&gt;"
                },
                "detailed_check_summary": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;"
                }
            }
        },
        "update.dto.health.check.HealthSummaryDTO": {
            "id": "update.dto.health.check.HealthSummaryDTO",
            "required": [],
            "properties": {
                "entity_type_summaries": {
                    "items": {
                        "$ref": "update.dto.health.check.EntityTypeHealthCheckSummaryDTO"
                    },
                    "type": "array"
                },
                "health_check_summaries": {
                    "$ref": "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckSummaryDTO&gt;"
                },
                "health_status": {
                    "enum": [
                        "Critical",
                        "Warning",
                        "Good",
                        "Unknown",
                        "Error"
                    ],
                    "type": "string"
                }
            }
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/PrismGateway/services/rest/v2.0",
    "resourcePath": "/tasks",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/tasks/list",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Get a list of tasks.",
                    "notes": "Get a list of generated tasks.",
                    "type": "create.base.EntityCollection&lt;create.dto.ergon.TaskDTO&gt;",
                    "nickname": "getTasks",
                    "parameters": [
                        {
                            "description": "Request for fetching tasks",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.ergon.TaskRequestDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/tasks/poll",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Poll a task.",
                    "notes": "Poll a task to check if its ready.",
                    "type": "create.dto.ergon.TaskPollResponseDTO",
                    "nickname": "pollTask",
                    "parameters": [
                        {
                            "description": "Task poll request",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.ergon.TaskPollRequestDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/tasks/{uuid}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get details of the specified task.",
                    "notes": "Get details of the specified task.",
                    "type": "get.dto.ergon.TaskDTO",
                    "nickname": "getTask",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of the task",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "include_subtasks_info",
                            "description": "Whether to include a detailed information of the immediate subtasks. Default value is false.",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "create.base.EntityCollection&lt;create.dto.ergon.TaskDTO&gt;": {
            "id": "create.base.EntityCollection&lt;create.dto.ergon.TaskDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "create.dto.ergon.TaskDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "create.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "create.base.Metadata"
                }
            }
        },
        "create.base.ErrorInfo": {
            "id": "create.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "create.base.Metadata": {
            "id": "create.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "create.dto.acropolis.tasks.MetaRequestDTO": {
            "id": "create.dto.acropolis.tasks.MetaRequestDTO",
            "required": [
                "method_name"
            ],
            "properties": {
                "method_name": {
                    "description": "The method name for which the task was created",
                    "notes": "The method name for which the task was created",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.ergon.EntityIdDTO": {
            "id": "create.dto.ergon.EntityIdDTO",
            "required": [],
            "properties": {
                "entity_id": {
                    "description": "The entity identifier",
                    "notes": "The entity identifier",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entity_name": {
                    "description": "Entity name.",
                    "notes": "Entity name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entity_type": {
                    "description": "Entity type.",
                    "enum": [
                        "NODE",
                        "VM",
                        "SNAPSHOT",
                        "DISK",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "PACKAGE",
                        "REMOTE_SITE",
                        "VOLUME_GROUP",
                        "IMAGE",
                        "CLUSTER",
                        "TAG",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "FILE_SERVER",
                        "FILE_SERVER_SHARE",
                        "VIRTUAL_NETWORK",
                        "VM_GROUP",
                        "LCM_ENTITY",
                        "MANAGEMENT_SERVER_INFO",
                        "REMOTE_CONNECTION",
                        "AFFINITY_INFO",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "SUPPORT_CASE_UPLOAD"
                    ],
                    "notes": "Entity type.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.ergon.MetaResponseDTO": {
            "id": "create.dto.ergon.MetaResponseDTO",
            "required": [],
            "properties": {
                "error_code": {
                    "description": "An error code indicating whether the RPC was successful.",
                    "format": "int32",
                    "notes": "An error code indicating whether the RPC was successful.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "error_detail": {
                    "description": "An optional additional string describing the error, if the RPC was not successful.",
                    "notes": "An optional additional string describing the error, if the RPC was not successful.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.ergon.TaskDTO": {
            "id": "create.dto.ergon.TaskDTO",
            "required": [],
            "properties": {
                "cluster_uuid": {
                    "description": "The UUID of the cluster on which this task was executed.",
                    "notes": "The UUID of the cluster on which this task was executed.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "complete_time_usecs": {
                    "description": "Task complete time in microseconds from epoch.",
                    "format": "int64",
                    "notes": "Task complete time.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "create_time_usecs": {
                    "description": "Task create time in microseconds from epoch.",
                    "format": "int64",
                    "notes": "Task create time.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "display_name": {
                    "description": "The name to be displayed for the task.",
                    "notes": "The name to be displayed for the task.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entity_list": {
                    "description": "List of entities that the task impacts.",
                    "items": {
                        "$ref": "create.dto.ergon.EntityIdDTO"
                    },
                    "notes": "List of entities that the task impacts.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "last_updated_time_usecs": {
                    "description": "Last updated time the task in microseconds from epoch.",
                    "format": "int64",
                    "notes": "Last updated time of the task.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "message": {
                    "description": "The message that describes the task.",
                    "notes": "The message that describes the task.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "meta_request": {
                    "$ref": "create.dto.acropolis.tasks.MetaRequestDTO",
                    "description": "The request object associated with the task.",
                    "notes": "The request object associated with the task.",
                    "typeName": "DEFAULT"
                },
                "meta_response": {
                    "$ref": "create.dto.ergon.MetaResponseDTO",
                    "description": "The response object associated with the task.",
                    "notes": "The response object associated with the task.",
                    "typeName": "DEFAULT"
                },
                "operation_type": {
                    "description": "The operation for which the task was created.",
                    "notes": "The operation for which the task was created.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "parent_task_uuid": {
                    "description": "The UUID of the parent task.",
                    "notes": "The UUID of the parent task.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "percentage_complete": {
                    "description": "The task completion status in percentage.",
                    "format": "int32",
                    "notes": "The task completion status in percentage.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "progress_status": {
                    "description": "The status of the task.",
                    "enum": [
                        "QUEUED",
                        "RUNNING",
                        "SUCCEEDED",
                        "ABORTED",
                        "FAILED"
                    ],
                    "notes": "The status of the task.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "start_time_usecs": {
                    "description": "Task start time in microseconds from epoch.",
                    "format": "int64",
                    "notes": "Task start time.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "subtask_info_list": {
                    "description": "The list subtasks with their detailed information.",
                    "items": {
                        "$ref": "create.dto.ergon.TaskDTO"
                    },
                    "notes": "The list subtasks with their detailed information.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "subtask_uuid_list": {
                    "description": "The list of UUIDs of the subtasks.",
                    "items": {
                        "type": "string"
                    },
                    "notes": "The list of UUIDs of the subtasks.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "The version 4 UUID of the task.",
                    "notes": "The version 4 UUID of the task,",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "create.dto.ergon.TaskPollRequestDTO": {
            "id": "create.dto.ergon.TaskPollRequestDTO",
            "required": [],
            "properties": {
                "completed_tasks": {
                    "description": "The list of UUIDs of tasks to be polled for completion.",
                    "items": {
                        "type": "string"
                    },
                    "notes": "The list of UUIDs of tasks to be polled for completion.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "timeout_interval": {
                    "description": "The maximum amount of time to wait, in seconds, before the poll request times out.",
                    "format": "int64",
                    "notes": "The maximum amount of time to wait, in seconds.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.ergon.TaskPollResponseDTO": {
            "id": "create.dto.ergon.TaskPollResponseDTO",
            "required": [],
            "properties": {
                "completed_tasks_info": {
                    "description": "The list of completed tasks.",
                    "items": {
                        "$ref": "create.dto.ergon.TaskDTO"
                    },
                    "notes": "The list of completed tasks.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "timed_out": {
                    "description": "Whether the task poll request timed out.",
                    "notes": "Whether the task poll request timed out.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.ergon.TaskRequestDTO": {
            "id": "create.dto.ergon.TaskRequestDTO",
            "required": [],
            "properties": {
                "cluster_uuid_list": {
                    "description": "The list of UUIDs of clusters for which the tasks need to be returned",
                    "items": {
                        "type": "string"
                    },
                    "notes": "The list of clusters for a task",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "count": {
                    "description": "Specifies the number of parent-level tasks that are returned",
                    "format": "int32",
                    "notes": "Maximum number of tasks to be returned",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "cut_off_time_usecs": {
                    "description": "The returned tasks shall have the completion time after this cut-off time. This is only applicable when 'include_completed' is set to 'true'",
                    "format": "int64",
                    "notes": "The cut-off time in microseconds since epoch",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "entity_list": {
                    "description": "The returned tasks belong to these entities",
                    "items": {
                        "$ref": "create.dto.ergon.EntityIdDTO"
                    },
                    "notes": "List of entities",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "include_completed": {
                    "description": "Whether the completed tasks need to be included in the response. By default, this is set to 'false'",
                    "notes": "Include completed tasks",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "include_subtasks_info": {
                    "description": "Whether to include the immediate subtask instances for a parent task",
                    "notes": "Include immediate subtasks for the parent task",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "operation_type_list": {
                    "description": "The returned tasks belong to these entity operations",
                    "items": {
                        "type": "string"
                    },
                    "notes": "List of operation types",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.acropolis.tasks.MetaRequestDTO": {
            "id": "get.dto.acropolis.tasks.MetaRequestDTO",
            "required": [],
            "properties": {
                "method_name": {
                    "description": "The method name for which the task was created",
                    "notes": "The method name for which the task was created",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.ergon.EntityIdDTO": {
            "id": "get.dto.ergon.EntityIdDTO",
            "required": [],
            "properties": {
                "entity_id": {
                    "description": "The entity identifier",
                    "notes": "The entity identifier",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entity_name": {
                    "description": "Entity name.",
                    "notes": "Entity name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entity_type": {
                    "description": "Entity type.",
                    "enum": [
                        "NODE",
                        "VM",
                        "SNAPSHOT",
                        "DISK",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "PACKAGE",
                        "REMOTE_SITE",
                        "VOLUME_GROUP",
                        "IMAGE",
                        "CLUSTER",
                        "TAG",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "FILE_SERVER",
                        "FILE_SERVER_SHARE",
                        "VIRTUAL_NETWORK",
                        "VM_GROUP",
                        "LCM_ENTITY",
                        "MANAGEMENT_SERVER_INFO",
                        "REMOTE_CONNECTION",
                        "AFFINITY_INFO",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "SUPPORT_CASE_UPLOAD"
                    ],
                    "notes": "Entity type.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.ergon.MetaResponseDTO": {
            "id": "get.dto.ergon.MetaResponseDTO",
            "required": [],
            "properties": {
                "error_code": {
                    "description": "An error code indicating whether the RPC was successful.",
                    "format": "int32",
                    "notes": "An error code indicating whether the RPC was successful.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "error_detail": {
                    "description": "An optional additional string describing the error, if the RPC was not successful.",
                    "notes": "An optional additional string describing the error, if the RPC was not successful.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.ergon.TaskDTO": {
            "id": "get.dto.ergon.TaskDTO",
            "required": [],
            "properties": {
                "cluster_uuid": {
                    "description": "The UUID of the cluster on which this task was executed.",
                    "notes": "The UUID of the cluster on which this task was executed.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "complete_time_usecs": {
                    "description": "Task complete time in microseconds from epoch.",
                    "format": "int64",
                    "notes": "Task complete time.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "create_time_usecs": {
                    "description": "Task create time in microseconds from epoch.",
                    "format": "int64",
                    "notes": "Task create time.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "display_name": {
                    "description": "The name to be displayed for the task.",
                    "notes": "The name to be displayed for the task.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entity_list": {
                    "description": "List of entities that the task impacts.",
                    "items": {
                        "$ref": "get.dto.ergon.EntityIdDTO"
                    },
                    "notes": "List of entities that the task impacts.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "last_updated_time_usecs": {
                    "description": "Last updated time the task in microseconds from epoch.",
                    "format": "int64",
                    "notes": "Last updated time of the task.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "message": {
                    "description": "The message that describes the task.",
                    "notes": "The message that describes the task.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "meta_request": {
                    "$ref": "get.dto.acropolis.tasks.MetaRequestDTO",
                    "description": "The request object associated with the task.",
                    "notes": "The request object associated with the task.",
                    "typeName": "DEFAULT"
                },
                "meta_response": {
                    "$ref": "get.dto.ergon.MetaResponseDTO",
                    "description": "The response object associated with the task.",
                    "notes": "The response object associated with the task.",
                    "typeName": "DEFAULT"
                },
                "operation_type": {
                    "description": "The operation for which the task was created.",
                    "notes": "The operation for which the task was created.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "parent_task_uuid": {
                    "description": "The UUID of the parent task.",
                    "notes": "The UUID of the parent task.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "percentage_complete": {
                    "description": "The task completion status in percentage.",
                    "format": "int32",
                    "notes": "The task completion status in percentage.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "progress_status": {
                    "description": "The status of the task.",
                    "enum": [
                        "QUEUED",
                        "RUNNING",
                        "SUCCEEDED",
                        "ABORTED",
                        "FAILED"
                    ],
                    "notes": "The status of the task.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "start_time_usecs": {
                    "description": "Task start time in microseconds from epoch.",
                    "format": "int64",
                    "notes": "Task start time.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "subtask_info_list": {
                    "description": "The list subtasks with their detailed information.",
                    "items": {
                        "$ref": "get.dto.ergon.TaskDTO"
                    },
                    "notes": "The list subtasks with their detailed information.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "subtask_uuid_list": {
                    "description": "The list of UUIDs of the subtasks.",
                    "items": {
                        "type": "string"
                    },
                    "notes": "The list of UUIDs of the subtasks.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "The version 4 UUID of the task.",
                    "notes": "The version 4 UUID of the task,",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/api/nutanix/v2.0",
    "resourcePath": "/vdisks",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/vdisks/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get a list of vdisks in the cluster.",
                    "notes": "Get a list of vdisks in the cluster.",
                    "type": "get.base.EntityCollection&lt;get.dto.NdfsFileDTO&gt;",
                    "nickname": "getVdisks",
                    "parameters": [
                        {
                            "name": "path",
                            "description": "Path of ndfs file",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "get.base.EntityCollection&lt;get.dto.NdfsFileDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.NdfsFileDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.NdfsFileDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.dto.NdfsFileDTO": {
            "id": "get.dto.NdfsFileDTO",
            "required": [],
            "properties": {
                "file_path": {
                    "type": "string"
                },
                "file_type": {
                    "enum": [
                        "FILE",
                        "DIRECTORY",
                        "OTHER"
                    ],
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "total_size": {
                    "format": "int64",
                    "type": "integer"
                },
                "used_size": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/PrismGateway/services/rest/v2.0",
    "resourcePath": "/virtual_disks",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/virtual_disks/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of VirtualDisks.",
                    "notes": "Get the list of VirtualDisks configured in the cluster.",
                    "type": "get.base.EntityCollection&lt;get.dto.appliance.configuration.VirtualDiskDTO&gt;",
                    "nickname": "getVirtualDisks",
                    "parameters": [
                        {
                            "name": "count",
                            "description": "Number of VirtualDisks to retrieve",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "filter_criteria",
                            "description": "Filter criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "sort_criteria",
                            "description": "Sort criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "search_string",
                            "description": "Search string",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "search_attribute_list",
                            "description": "Search attribute list",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "projection",
                            "description": "Projections on the attributes",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Update virtual Disk.",
                    "notes": "",
                    "type": "update.dto.appliance.configuration.VirtualDiskDTO",
                    "nickname": "updateVirtualDisk",
                    "parameters": [
                        {
                            "description": "DTO specifying different parameters for VirtualDisk along with flash mode",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.appliance.configuration.VirtualDiskDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/virtual_disks/{uuid}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get VirtualDisk.",
                    "notes": "Get VirtualDisk with the specified Uuid.",
                    "type": "get.dto.appliance.configuration.VirtualDiskDTO",
                    "nickname": "getVirtualDisk",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of the VirtualDisk",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "projection",
                            "description": "Projections on the attributes",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/virtual_disks/{uuid}/stats/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the stats for a specified VirtualDisk.",
                    "notes": "If start time and end time are included in the query string, then historical stats are retrieved. Otherwise, the latest stats are retrieved.",
                    "type": "get.base.StatsResponse",
                    "nickname": "getVirtualDiskStats",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of the VirtualDisk",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "metrics",
                            "description": "List of metrics",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "interval_in_secs",
                            "description": "Sampling interval of stats",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                }
            ]
        }
    ],
    "models": {
        "get.base.EntityCollection&lt;get.dto.appliance.configuration.VirtualDiskDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.appliance.configuration.VirtualDiskDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.appliance.configuration.VirtualDiskDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.base.StatsResponse": {
            "id": "get.base.StatsResponse",
            "required": [],
            "properties": {
                "stats_specific_responses": {
                    "items": {
                        "$ref": "get.base.StatsResponse$StatsSpecificResponse"
                    },
                    "type": "array"
                }
            }
        },
        "get.base.StatsResponse$StatsSpecificResponse": {
            "id": "get.base.StatsResponse$StatsSpecificResponse",
            "required": [],
            "properties": {
                "interval_in_secs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "metric": {
                    "type": "string"
                },
                "start_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "successful": {
                    "type": "boolean"
                },
                "values": {
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.alerts.AlertSummaryDTO": {
            "id": "get.dto.alerts.AlertSummaryDTO",
            "required": [],
            "properties": {
                "alert_summaries": {
                    "$ref": "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;"
                },
                "count": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "get.dto.appliance.configuration.VirtualDiskDTO": {
            "id": "get.dto.appliance.configuration.VirtualDiskDTO",
            "required": [],
            "properties": {
                "alert_summary": {
                    "$ref": "get.dto.alerts.AlertSummaryDTO"
                },
                "attached_v_m_name": {
                    "type": "string"
                },
                "attached_vm_id": {
                    "type": "string"
                },
                "attached_vm_uuid": {
                    "type": "string"
                },
                "attached_volume_group_id": {
                    "type": "string"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "disk_address": {
                    "type": "string"
                },
                "disk_capacity_in_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "flash_mode_enabled": {
                    "description": "Flash Mode Enabled .",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "health_summary": {
                    "$ref": "get.dto.health.check.HealthSummaryDTO"
                },
                "nutanix_n_f_s_file_path": {
                    "type": "string"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "storage_container_id": {
                    "description": "Virtual disk's owning container Id.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "description": "Virtual disk's owning container UUID.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "usage_stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "uuid": {
                    "type": "string"
                },
                "virtual_disk_id": {
                    "type": "string"
                }
            }
        },
        "get.dto.health.check.EntityTypeHealthCheckSummaryDTO": {
            "id": "get.dto.health.check.EntityTypeHealthCheckSummaryDTO",
            "required": [],
            "properties": {
                "checks_in_error": {
                    "$ref": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;"
                },
                "detailed_check_summary": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;"
                }
            }
        },
        "get.dto.health.check.HealthSummaryDTO": {
            "id": "get.dto.health.check.HealthSummaryDTO",
            "required": [],
            "properties": {
                "entity_type_summaries": {
                    "items": {
                        "$ref": "get.dto.health.check.EntityTypeHealthCheckSummaryDTO"
                    },
                    "type": "array"
                },
                "health_check_summaries": {
                    "$ref": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;"
                },
                "health_status": {
                    "enum": [
                        "Critical",
                        "Warning",
                        "Good",
                        "Unknown",
                        "Error"
                    ],
                    "type": "string"
                }
            }
        },
        "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;": {
            "id": "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.lang.String&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.lang.String&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckErrorsDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckErrorsDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckSummaryDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckSummaryDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;update.dto.alerts.AlertDTO$AlertSeverity, update.base.EntityCollection&lt;update.dto.alerts.AlertDTO&gt;&gt;": {
            "id": "java.util.Map&lt;update.dto.alerts.AlertDTO$AlertSeverity, update.base.EntityCollection&lt;update.dto.alerts.AlertDTO&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "update.dto.alerts.AlertSummaryDTO": {
            "id": "update.dto.alerts.AlertSummaryDTO",
            "required": [],
            "properties": {
                "alert_summaries": {
                    "$ref": "java.util.Map&lt;update.dto.alerts.AlertDTO$AlertSeverity, update.base.EntityCollection&lt;update.dto.alerts.AlertDTO&gt;&gt;"
                },
                "count": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "update.dto.appliance.configuration.VirtualDiskDTO": {
            "id": "update.dto.appliance.configuration.VirtualDiskDTO",
            "required": [],
            "properties": {
                "alert_summary": {
                    "$ref": "update.dto.alerts.AlertSummaryDTO"
                },
                "attached_v_m_name": {
                    "type": "string"
                },
                "attached_vm_id": {
                    "type": "string"
                },
                "attached_vm_uuid": {
                    "type": "string"
                },
                "attached_volume_group_id": {
                    "type": "string"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "disk_address": {
                    "type": "string"
                },
                "disk_capacity_in_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "flash_mode_enabled": {
                    "description": "Flash Mode Enabled .",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "health_summary": {
                    "$ref": "update.dto.health.check.HealthSummaryDTO"
                },
                "nutanix_n_f_s_file_path": {
                    "type": "string"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "usage_stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "uuid": {
                    "type": "string"
                },
                "virtual_disk_id": {
                    "type": "string"
                }
            }
        },
        "update.dto.health.check.EntityTypeHealthCheckSummaryDTO": {
            "id": "update.dto.health.check.EntityTypeHealthCheckSummaryDTO",
            "required": [],
            "properties": {
                "checks_in_error": {
                    "$ref": "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckErrorsDTO&gt;"
                },
                "detailed_check_summary": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "java.util.Map&lt;update.dto.health.check.HealthStatus, java.lang.Integer&gt;"
                }
            }
        },
        "update.dto.health.check.HealthSummaryDTO": {
            "id": "update.dto.health.check.HealthSummaryDTO",
            "required": [],
            "properties": {
                "entity_type_summaries": {
                    "items": {
                        "$ref": "update.dto.health.check.EntityTypeHealthCheckSummaryDTO"
                    },
                    "type": "array"
                },
                "health_check_summaries": {
                    "$ref": "java.util.Map&lt;java.lang.String, update.dto.health.check.HealthCheckSummaryDTO&gt;"
                },
                "health_status": {
                    "enum": [
                        "Critical",
                        "Warning",
                        "Good",
                        "Unknown",
                        "Error"
                    ],
                    "type": "string"
                }
            }
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/PrismGateway/services/rest/v2.0",
    "resourcePath": "/vms",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/vms/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get a list of Virtual Machines.",
                    "notes": "Get a list of Virtual Machines. <br/><br/>Virtual Machine disk information and network information are not included by default as fetching these are expensive operations. These can be included by setting the include_vmdisk_config and include_vmnic_config flags respectively.",
                    "type": "get.base.EntityCollection&lt;get.dto.uhura.VmConfigDTO&gt;",
                    "nickname": "getVMs",
                    "parameters": [
                        {
                            "name": "include_vm_disk_config",
                            "description": "Whether to include Virtual Machine disk information.",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "include_vm_nic_config",
                            "description": "Whether to include network information.",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Create a Virtual Machine.",
                    "notes": "Create a Virtual Machine with specified configuration. <br/><br/>If a UUID is specified for the Virtual Machine, this operation will be idempotent. <br/><br/>This is an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "createVM",
                    "parameters": [
                        {
                            "description": "Create a Virtual Machine ",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.uhura.VmConfigDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{uuid}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get a list of Virtual Machines.",
                    "notes": "Get details of a specific Virtual Machines. <br/><br/>Virtual Machine disk information and network information are not included by default as fetching these are expensive operations. These can be included by setting the include_vmdisk_config and include_vmnic_config flags respectively.",
                    "type": "get.dto.uhura.VmConfigDTO",
                    "nickname": "getVM",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Id of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "include_vm_disk_config",
                            "description": "Whether to include Virtual Machine disk information.",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "include_vm_nic_config",
                            "description": "Whether to include network information.",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{uuid}/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete a Virtual Machine.",
                    "notes": "Delete a Virtual Machine. <br/><br/>This is an idempotent operation. If the Virtual Machine is currently powered on, it will be forcefully powered off. <br/><br/>The logical timestamp can optionally be provided for consistency. If a logical timestamp is specified, then this operation will be rejected if the logical timestamp specified is not the value of the Virtual Machine logical timestamp. The logical timestamp can be obtained from the Virtual Machine object. <br/><br/>This is also an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "delete.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "deleteVM",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Id of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "delete_snapshots",
                            "description": "Delete Virtual Machine snapshots",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "logical_timestamp",
                            "description": "The Virtual logical timestamp",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Update a Virtual Machine.",
                    "notes": "Update a Virtual Machine. <br/><br/>Field that are not set or are not specified are ignored. Note that some attributes may not be modifiable while the Virtual Machine is running. For instance, the KVM hypervisor does not support CPU or memory hot-plug. <br/><br/>The hwclockTimezone attribute specifies the VM's hardware clock timezone. Most operating systems assume the system clock is UTC, but some (like Windows) expect the local timezone. Changes to the clock timezone only take effect after a full Virtual Machine power cycle. <br/><br/>This API can be used to reclaim memory from guests using a balloon driver. It is not currently possible to return ballooned memory to a guest. The attempt to reclaim memory may fail if the balloon driver is not installed, or is unable to allocate the requested amount of memory from the guest OS. In this case, the Virtual Machine's memory reservation will be restored to its value from before the balloon attempt. <br/><br/>If a logical timestamp is specified, then this operation will be rejected if the logical timestamp specified is not the value of the Virtual Machine logical timestamp. The logical timestamp can be obtained from the Virtual Machine object. <br/><br/>This is also an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "update.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "updateVM",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Id of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Virtual Machine Update Info",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.uhura.VmConfigDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{uuid}/clone",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Clone a Virtual Machine.",
                    "notes": "Clone a Virtual Machine from a snapshot or Virtual Machine.<br/><br/>If a UUID is specified for the cloned Virtual Machine, this operation will be idempotent. <br/><br/>If override_network_config is set to true in the clone spec, then the source Virtual Machine's network configuration is overridden by one specified in the nic list. If false, the clone will inherit its basic network configuration from the source, minus MAC and IP address. <br/><br/>This is also an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "cloneVM",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Id of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Clone a Virtual Machine ",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.acropolis.VMCloneDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{uuid}/disks/attach",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Attach disks to Virtual Machine.",
                    "notes": "Attach disks to Virtual Machine.<br/><br/>A disk drive may either be a regular disk drive, or a CD-ROM drive. Only CD-ROM drives may be empty. <br/><br/>By default, regular disk drives are configured on the SCSI bus, and CD-ROM drives are configured on the IDE bus. The user may override this behavior with the deviceBus attribute. By default, a disk drive is placed on the first available bus slot. The user may override this behavior with the deviceIndex attribute. <br/><br/>Disks on the SCSI bus may optionally be configured for passthrough on platforms that support iSCSI. When in passthrough mode, SCSI commands are passed directly to NDFS via iSCSI. When SCSI passthrough is disabled, the hypervisor provides a SCSI emulation layer, and treats the underlying iSCSI target as a block device. By default, SCSI passthrough is enabled for SCSI devices on supported platforms. <br/><br/>If the disk image is cloned from an existing vmdisk or NFS file, the user may specify a minimum size for the resulting clone. This can be used to expand a disk image at clone time. <br/><br/>If the VM is running, the disk is hot-added to the VM. Note that certain buses, like IDE, are not hot-pluggable. <br/><br/>This is also an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "attachVMDisk",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Id of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Info about the virtual disks or CD-Roms to be attached",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.uhura.VMDiskAttachDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{uuid}/disks/detach",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Detach disks from Virtual Machine.",
                    "notes": "Detach disks from Virtual Machine.<br/><br/>A disk drive may either be a regular disk drive, or a CD-ROM drive. Only CD-ROM drives may be empty. <br/><br/>By default, regular disk drives are configured on the SCSI bus, and CD-ROM drives are configured on the IDE bus. The user may override this behavior with the deviceBus attribute. By default, a disk drive is placed on the first available bus slot. The user may override this behavior with the deviceIndex attribute. <br/><br/>Disks on the SCSI bus may optionally be configured for passthrough on platforms that support iSCSI. When in passthrough mode, SCSI commands are passed directly to NDFS via iSCSI. When SCSI passthrough is disabled, the hypervisor provides a SCSI emulation layer, and treats the underlying iSCSI target as a block device. By default, SCSI passthrough is enabled for SCSI devices on supported platforms. <br/><br/>If the disk image is cloned from an existing vmdisk or NFS file, the user may specify a minimum size for the resulting clone. This can be used to expand a disk image at clone time. <br/><br/>If the VM is running, the disk is hot-added to the VM. Note that certain buses, like IDE, are not hot-pluggable. <br/><br/>This is also an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "detachVMDisk",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Id of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Info about the virtual disks or CD-Roms to be detached",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.uhura.VMDiskDetachDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{uuid}/manage_vm_guest_tools",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Mount and unmount guest tools on a given Virtual Machine.",
                    "notes": "Mount and unmount guest tools on a given Virtual Machine. <br/><br/>If override_guest is set to false and no empty CdRom is available on the guest VM, then the mount operation will fail. If override_guest is set to true then the mount operation succeeds by unmounting a non-empty CdRom.<br/><br/>This is an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "manageGuestTool",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "VM Guest Tools Info",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.uhura.VmGuestToolsDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{uuid}/nics/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get list of NICs in a Virtual Machine.",
                    "notes": "Get list of NICs in a Virtual Machine. <br/><br/>Address assignments are not included by default as fetching these is an expensive operation. Address assignments can be included by setting include_address_assignments to true.",
                    "type": "get.base.EntityCollection&lt;get.dto.acropolis.VMNicSpecDTO&gt;",
                    "nickname": "getNics",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "include_address_assignments",
                            "description": "Include address assignments",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Add a NIC to a Virtual Machine.",
                    "notes": "Add a NIC to a Virtual Machine. <br/><br/> A VM NIC must be associated with a virtual network. It is not possible to change this association. To connect a VM to a different virtual network, it is necessary to create a new NIC. <br/><br/>If the virtual network is managed (see POST /networks/), the NIC must be assigned an IPv4 address at creation time. If the network has no DHCP pool, the user must specify the IPv4 address manually. <br/><br/>If the VM is running, the NIC is hot-added to the VM. <br/><br/>The logical timestamp can optionally be provided for consistency. If a logical timestamp is specified, then this operation will be rejected if the logical timestamp specified is not the value of the Virtual Machine logical timestamp. The logical timestamp can be obtained from the Virtual Machine object. <br/><br/>This is also an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "createNic",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "NIC Config Info",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.acropolis.VMNicCreateDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{uuid}/nics/{nic_id}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Update a NIC for a Virtual Machine.",
                    "notes": "Update a NIC for a Virtual Machine. <br/><br/> A VM NIC must be associated with a MAC address. It is not possible to change this association as the MAC address acts as the NIC's identifier. <br/><br/>If the virtual network is managed (see POST /networks/), the IPv4 address of the NIC can be updated. <br/><br/>If the VM is running, the NIC is hot-added to the VM. <br/><br/>The logical timestamp can optionally be provided for consistency. If a logical timestamp is specified, then this operation will be rejected if the logical timestamp specified is not the value of the Virtual Machine logical timestamp. The logical timestamp can be obtained from the Virtual Machine object. <br/><br/>This is also an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "update.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "updateNic",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "nic_id",
                            "description": "Virtual Machine NIC identifier (MAC address)",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "NIC Config Update Info",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.acropolis.VMNicUpdateDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{uuid}/restore",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Restore a Virtual Machine to a snapshotted state.",
                    "notes": "Restore a Virtual Machine to a snapshotted state. <br/><br/>If the VM is currently running, it will be powered off. Since Virtual Machine snapshots do not include the Virtual Machine memory image, the Virtual Machine will remain powered off after the restore is complete. <br/><br/>A Virtual Machine snapshot may no longer be compatible with the current virtual network configuration. In this case, the user may choose not to restore the Virtual Machine's network adpaters using the restoreNetworkConfig keyword argument. <br/><br/> This is also an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "restoreVM",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Restore Virtual Machine ",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.acropolis.VMRestoreDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{uuid}/set_power_state/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Set power state of a Virtual Machine.",
                    "notes": "Set power state of a Virtual Machine. <br/><br/>If the Virtual Machine is being powered on and no host is specified, the scheduler will pick the one with the most available CPU and memory that can support the Virtual Machine. Note that no such host may not be available.<br/><br/> If the Virtual Machine is being power cycled, a different host can be specified to start it on. <br/><br/>The logical timestamp can optionally be provided for consistency. If a logical timestamp is specified, then this operation will be rejected if the logical timestamp specified is not the value of the Virtual Machine logical timestamp. The logical timestamp can be obtained from the Virtual Machine object. <br/><br/>This is also an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "setPowerState",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Id of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Virtual Machine Power State Info",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.uhura.VMPowerStateDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{vm_uuid}/nics/{nic_id}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete a NIC from a Virtual Machine.",
                    "notes": "Delete a NIC from a Virtual Machine. <br/><br/>If the VM is running, the NIC is hot-removed from the VM. If the NIC to be removed is specified as the boot device in the boot configuration, the boot device configuration will be cleared as a side effect of removing the NIC. <br/><br/>The logical timestamp can optionally be provided for consistency. If a logical timestamp is specified, then this operation will be rejected if the logical timestamp specified is not the value of the Virtual Machine logical timestamp. The logical timestamp can be obtained from the Virtual Machine object. <br/><br/>This is also an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "delete.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "deleteNic",
                    "parameters": [
                        {
                            "name": "vm_uuid",
                            "description": "UUID of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "nic_id",
                            "description": "Virtual Machine NIC identifier (MAC address)",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "vm_logical_timestamp",
                            "description": "Virtual Machine Logical timestamp",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Details of a NIC in a Virtual Machine.",
                    "notes": "Details of a NIC in a Virtual Machine. <br/><br/>Address assignments are not included by default as fetching these is an expensive operation. Address assignments can be included by setting include_address_assignments to true.",
                    "type": "get.dto.acropolis.VMNicSpecDTO",
                    "nickname": "getNic",
                    "parameters": [
                        {
                            "name": "vm_uuid",
                            "description": "Id of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "nic_id",
                            "description": "Virtual Machine NIC identifier (MAC address)",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "include_address_assignments",
                            "description": "Include address assignments",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "create.dto.acropolis.BootConfigDTO": {
            "id": "create.dto.acropolis.BootConfigDTO",
            "required": [],
            "properties": {
                "boot_device_order": {
                    "description": "The boot device order. In case boot device is not specified or the specified boot device fails, VM will attempt to boot from connected devices in this device type order.",
                    "items": {
                        "enum": [
                            "CDROM",
                            "DISK",
                            "NIC"
                        ],
                        "type": "string"
                    },
                    "notes": "Boot device order",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "boot_device_type": {
                    "description": "The device from which to boot. This must refer to a valid device configured on the VM. When a boot device is removed from the VM, this field is cleared as a side effect. If no boot device is configured, the VM will have the following boot preference: hard disk, CD-ROM, NIC.",
                    "enum": [
                        "CDROM",
                        "DISK",
                        "NIC"
                    ],
                    "notes": "Device from which to boot",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "disk_address": {
                    "$ref": "create.dto.acropolis.VMDiskAddressDTO",
                    "description": "Disk address selected as boot device. At most one of this or macAddr field should be set.",
                    "notes": "Disk address selected as boot device",
                    "typeName": "DEFAULT"
                },
                "mac_addr": {
                    "description": "Mac address of the NIC selected as boot device. At most one of this or diskAddress field should be set.",
                    "notes": "Mac address of the NIC selected as boot device",
                    "type": "string",
                    "typeName": "MAC_ADDRESS"
                }
            }
        },
        "create.dto.acropolis.FileToInjectDTO": {
            "id": "create.dto.acropolis.FileToInjectDTO",
            "required": [],
            "properties": {
                "destination_path": {
                    "description": "Destination path in the VM at which the file specified by source_path should be copied to.",
                    "notes": "Destination path in the VM at which the file specified by sourcePath should be copied to.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "source_path": {
                    "description": "ADSF path of the source file to inject in the VM. Must be of form: adsf:///<ctr>/...",
                    "notes": "ADSF path of the source file to inject in the VM.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.ReturnValueDTO$TaskIdDTO": {
            "id": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
            "required": [],
            "properties": {
                "task_uuid": {
                    "description": "UUID of the task.",
                    "notes": "UUID of the task.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.VMCloneDTO": {
            "id": "create.dto.acropolis.VMCloneDTO",
            "required": [
                "spec_list"
            ],
            "properties": {
                "spec_list": {
                    "items": {
                        "$ref": "create.dto.acropolis.VMCloneSpecDTO"
                    },
                    "notes": "List of clone specifications",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "description": "UUID of the storage container on which the customization config iso files should be created. Must be provided when cluster has more than one container.",
                    "notes": "UUID of the storage container on which the customization config iso files should be created",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "uuid": {
                    "description": "Uuid of the VM to clone.",
                    "notes": "Uuid of the VM to clone.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vm_customization_config": {
                    "$ref": "create.dto.acropolis.VMCustomizationConfigDTO",
                    "description": "Vm customization configuration. At boot time, this config will be replayed by VM customization tool(cloudinit/sysprep) installed in the VM to bring VM to the state defined by this config.",
                    "notes": "Vm customization configuration.",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.VMCloneSpecDTO": {
            "id": "create.dto.acropolis.VMCloneSpecDTO",
            "required": [
                "name"
            ],
            "properties": {
                "boot_config": {
                    "$ref": "create.dto.acropolis.BootConfigDTO",
                    "description": "Override the existing boot configuration for the Virtual Machine. Any updates to the boot configuration will be applied during the next Virtual Machine power cycle but not reset.",
                    "notes": "Override the existing boot configuration for the Virtual Machine.",
                    "typeName": "DEFAULT"
                },
                "memory_mb": {
                    "description": "Override the amount of RAM assigned to the clone.",
                    "format": "int64",
                    "notes": "Override the amount of RAM assigned to the clone.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Named for the cloned Virtual Machine.",
                    "notes": "Name for the cloned Virtual Machine.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "num_cores_per_vcpu": {
                    "description": "Override the number of cores assigned to each VCPUs.",
                    "format": "int64",
                    "notes": "Override the number of cores assigned to each VCPUs.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "num_vcpus": {
                    "description": "Override the number of vCPUs assigned to the clone.",
                    "format": "int64",
                    "notes": "Override the number of vCPUs assigned to the clone.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "override_network_config": {
                    "description": "Indicate whether the source Virtual Machine's/snapshot's network configuration with the one specified in the vmNics field. If false, the clone will inherit its basic network configuration from the source, minus MAC and IP address assignments.",
                    "notes": "Whether to override the source Virtual Machine's/snapshot's network configuration.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "A version 4 UUID that the client may specify for idempotence. This UUID will be used as the vm ID of the target vm.",
                    "notes": "A version 4 UUID that the client may specify for idempotence",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vm_nics": {
                    "description": "Network configuration. Required when overrideNetworkConfig set to true.",
                    "items": {
                        "$ref": "create.dto.acropolis.VMNicSpecDTO"
                    },
                    "notes": "Network configuration. Required when overrideNetworkConfig set to true.",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.VMCustomizationConfigDTO": {
            "id": "create.dto.acropolis.VMCustomizationConfigDTO",
            "required": [],
            "properties": {
                "datasource_type": {
                    "description": "The type of datasource for configuring the Linux Virtual Machine in case cloudinit config is provided. ISO based datasource supported by Uhura is ConfigDriveV2.",
                    "enum": [
                        "CONFIG_DRIVE_V2"
                    ],
                    "notes": "The type of datasource for configuring the Linux Virtual Machine in case cloudinit config is provided.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "files_to_inject_list": {
                    "description": "List of details about files to inject in the VM.",
                    "items": {
                        "$ref": "create.dto.acropolis.FileToInjectDTO"
                    },
                    "notes": "List of details about files to inject in the VM.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "fresh_install": {
                    "description": "Indicates whether the VM to be customized is meant to be freshly installed via Windows Setup from a Windows OS DVD or whether the VM will be configured from a 'Sysprepped' image in which case the setup was already complete.",
                    "notes": "Indicates whether the VM to be customized is meant to be freshly installed or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "userdata": {
                    "description": "Userdata in string format. Either Cloudinit format for customizing Linux VM or Sysprep format for customizing Windows VM. For cloudinit the userdata is usually a yaml file or shell script. For sysprep the userdata is usually a Xml representation of an unattend file in string format.Either this or userdataPath must be provided",
                    "notes": "Userdata in string format.",
                    "type": "string",
                    "typeName": "TEXT"
                },
                "userdata_path": {
                    "description": "Userdata source path. Must begin with adsf:///<ctr>.For cloudinit usually a yaml file or shell script is provided. For sysprep usually an unattend file or answer file is provided. Either this or userdata must be provided",
                    "notes": "Userdata source path.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.VMDiskAddressDTO": {
            "id": "create.dto.acropolis.VMDiskAddressDTO",
            "required": [],
            "properties": {
                "device_bus": {
                    "description": "The device bus for the virtual disk device.Possible values are SCSI, IDE and PCI. Along with this the deviceIndex is used to specify a vdisk address. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "enum": [
                        "SCSI",
                        "IDE",
                        "PCI",
                        "SATA",
                        "SPAPR"
                    ],
                    "notes": "The device bus for the virtual disk device.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "device_index": {
                    "description": "Index of the device on the adapter type. If left unspecified, the system will allocate the next available slot on the default bus.",
                    "format": "int32",
                    "notes": "Index of the device on the adapter type.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "ndfs_filepath": {
                    "description": "NDFS path to existing virtual disk. This field will not be set when this message is used in a create mode.When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "NDFS path to existing virtual disk.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vmdisk_uuid": {
                    "description": "Virtual disk identifier. This field will not be set when this message is used in a create mode. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "Virtual disk identifier.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "volume_group_uuid": {
                    "type": "string"
                }
            }
        },
        "create.dto.acropolis.VMNicCreateDTO": {
            "id": "create.dto.acropolis.VMNicCreateDTO",
            "required": [
                "spec_list"
            ],
            "properties": {
                "spec_list": {
                    "description": "List of specification for NICS to add to the Virtual Machine.",
                    "items": {
                        "$ref": "create.dto.acropolis.VMNicSpecDTO"
                    },
                    "notes": "List of specification for NICS to add to the Virtual Machine.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "UUID of the VM to create NIC on.",
                    "notes": "UUID of the VM to create NIC on.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "create.dto.acropolis.VMNicSpecDTO": {
            "id": "create.dto.acropolis.VMNicSpecDTO",
            "required": [
                "network_uuid"
            ],
            "properties": {
                "adapter_type": {
                    "description": "Type of the network adapter for ESX networks.",
                    "enum": [
                        "E1000",
                        "E1000e",
                        "PCNet32",
                        "Vmxnet",
                        "Vmxnet2",
                        "Vmxnet3",
                        "Unsupported"
                    ],
                    "notes": "Type of the network adapter.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "mac_address": {
                    "description": "The MAC address of the NIC",
                    "notes": "The MAC address of the NIC",
                    "type": "string",
                    "typeName": "MAC_ADDRESS"
                },
                "model": {
                    "description": "Virtual hardware model.",
                    "notes": "Virtual hardware model.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "network_uuid": {
                    "description": "The network to which the NIC is attached",
                    "notes": "The network to which the NIC is attached",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "request_ip": {
                    "description": "If request_ip is true\nIf 'requestedIpAddress' is set then request that IP from the network. If it's a managed network then request a dynamic IP from the network. Otherwise don't request an IP. If requestIp is false, then don't request an IP at all, regardless of whether or not the 'requestedIpAddress' is set and whether or the network is managed or not.",
                    "notes": "Request IP address.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "requested_ip_address": {
                    "description": "Requested IP address.",
                    "notes": "Requested IP address.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.VMRestoreDTO": {
            "id": "create.dto.acropolis.VMRestoreDTO",
            "required": [
                "snapshot_uuid"
            ],
            "properties": {
                "restore_network_configuration": {
                    "description": "Whether to reset the VM's current networking configuration. If this flag is set, the VM's current network adapters will be replaced with the network adapters specified in the snapshot. Otherwise, the VM's current networking adapters will be retained, and the network adapters specified in the snapshot will be ignored. This is set to 'true' by default.",
                    "notes": "Whether to reset the VM's current networking configuration.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "snapshot_uuid": {
                    "description": "The version 4 UUID of the snapshot from which to restore",
                    "notes": "The version 4 UUID of the snapshot from which to restore",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "uuid": {
                    "description": "UUID of the VM.",
                    "notes": "UUID of the VM.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "create.dto.uhura.GPUConfigDTO": {
            "id": "create.dto.uhura.GPUConfigDTO",
            "required": [
                "device_id",
                "gpu_type"
            ],
            "properties": {
                "device_id": {
                    "description": "Device ID of the GPU resource.",
                    "format": "int32",
                    "notes": "Device ID of the GPU resource.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "gpu_type": {
                    "description": "Type of the GPU resource.",
                    "enum": [
                        "PASS_THROUGH_GRAPHICS",
                        "PASS_THROUGH_COMPUTE",
                        "VIRTUAL"
                    ],
                    "notes": "Type of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpu_vendor": {
                    "description": "Vendor of the GPU resource.",
                    "enum": [
                        "NVIDIA",
                        "INTEL",
                        "AMD"
                    ],
                    "notes": "Vendor of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.uhura.VMDiskAttachDTO": {
            "id": "create.dto.uhura.VMDiskAttachDTO",
            "required": [
                "vm_disks"
            ],
            "properties": {
                "uuid": {
                    "description": "UUID of the VM.",
                    "notes": "UUID of the VM.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vm_disks": {
                    "description": "Information about the virtual disk or CD-ROM to be attached or detached.",
                    "items": {
                        "$ref": "create.dto.uhura.VMDiskDTO"
                    },
                    "notes": "Information about the virtual disk or CD-ROM to be attached or detached.",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.uhura.VMDiskDTO": {
            "id": "create.dto.uhura.VMDiskDTO",
            "required": [],
            "properties": {
                "disk_address": {
                    "$ref": "create.dto.acropolis.VMDiskAddressDTO",
                    "description": "Disk address represented by device bus type and device index.",
                    "notes": "Disk address represented by device bus type and device index.",
                    "typeName": "DEFAULT"
                },
                "is_cdrom": {
                    "description": "Whether this is a CD-ROM drive. The default value is 'false'",
                    "notes": "Whether this is a CD-ROM drive.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_empty": {
                    "description": "Whether the drive should be empty. This field only applies to CD-ROM drives, otherwise it is ignored. If this field is set to true and the drive is a CD-ROM, then the disk creation field 'vmDiskCreate' should be ignored. The default value is 'false'",
                    "notes": "Whether the CD-ROM drive should be empty.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_scsi_pass_through": {
                    "description": "Whether the SCSI disk should be attached in passthrough mode to pass all SCSI commands directly to Stargate via iSCSI. The default value is true.",
                    "notes": "Whether the SCSI disk should be attached in passthrough mode to pass all SCSI commands directly to Stargate via iSCSI.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_thin_provisioned": {
                    "description": "Whether the disk is thin provisioned. This field applies to only ESX managed VMs.",
                    "notes": "Whether the disk is thin provisioned.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "vm_disk_clone": {
                    "$ref": "create.dto.uhura.VmDiskCloneDTO",
                    "description": "Specification for cloning a new disk or snapshot. Only one of 'vmDiskClone' and 'vmDiskCreate' is required per create/update request.",
                    "notes": "Specification for cloning a new disk or snapshot.",
                    "typeName": "DEFAULT"
                },
                "vm_disk_create": {
                    "$ref": "create.dto.uhura.VmDiskCreateDTO",
                    "description": "Specification for creating a new disk. Only one of 'vmCreateSpec' and 'vmCloneSpec' is required per create/update request.",
                    "notes": "Specification for creating a new disk.",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.uhura.VMDiskDetachDTO": {
            "id": "create.dto.uhura.VMDiskDetachDTO",
            "required": [
                "vm_disks"
            ],
            "properties": {
                "uuid": {
                    "description": "UUID of the VM.",
                    "notes": "UUID of the VM.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vm_disks": {
                    "description": "Information about the virtual disk or CD-ROM to be detached.",
                    "items": {
                        "$ref": "create.dto.uhura.VmDiskInfoDTO"
                    },
                    "notes": "Information about the virtual disk or CD-ROM to be detached.",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.uhura.VMPowerStateDTO": {
            "id": "create.dto.uhura.VMPowerStateDTO",
            "required": [
                "transition"
            ],
            "properties": {
                "host_uuid": {
                    "description": "Explicit version 4 host UUID on which to power on the VM. This parameter is only honored for kPowerOn, or kPowerCycle when change host is also requested explicitly.",
                    "notes": "Version 4 Host UUID on which to power on VM",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "transition": {
                    "description": "The desired power state transition",
                    "enum": [
                        "ON",
                        "OFF",
                        "POWERCYCLE",
                        "RESET",
                        "PAUSE",
                        "SUSPEND",
                        "RESUME",
                        "ACPI_SHUTDOWN",
                        "ACPI_REBOOT"
                    ],
                    "notes": "The desired power state transition",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "Uuid of the VM.",
                    "notes": "Uuid of the VM.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "create.dto.uhura.VmConfigDTO": {
            "id": "create.dto.uhura.VmConfigDTO",
            "required": [
                "memory_mb",
                "name",
                "num_vcpus"
            ],
            "properties": {
                "boot": {
                    "$ref": "create.dto.acropolis.BootConfigDTO",
                    "description": "Boot configuration for the Virtual Machine. Any updates to the boot configuration will be applied during the next Virtual Machine power cycle but not reset.",
                    "notes": "Boot configuration for the Virtual Machine.",
                    "typeName": "DEFAULT"
                },
                "description": {
                    "description": "Description for the Virtual Machine.",
                    "notes": "Description for the Virtual Machine.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "guest_driver_version": {
                    "description": "Last determined guest driver version.",
                    "notes": "Last determined guest driver version.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "guest_os": {
                    "description": "Guest OS for VMWare. Applicable only for ESX Vms.",
                    "notes": "Guest OS for VMWare.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "ha_priority": {
                    "description": "Priority for restarting in case of HA event.",
                    "format": "int64",
                    "notes": "Priority for restarting in case of HA event. Negative value indicates do not restart.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "memory_mb": {
                    "description": "RAM in megabytes assigned to the Virtual Machine.",
                    "format": "int64",
                    "notes": "RAM in megabytes assigned to the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "memory_reservation_mb": {
                    "description": "RAM, in megabytes reserved for the Virtual Machine.",
                    "format": "int64",
                    "notes": "RAM, in megabytes reserved for the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "The Virtual Machine human readable name.",
                    "notes": "The Virtual Machine human readable name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "num_cores_per_vcpu": {
                    "description": "Number of cores assigned to each VCPUs.",
                    "format": "int32",
                    "notes": "Number of cores assigned to each VCPUs.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "num_vcpus": {
                    "description": "Number of VCPUs assigned to the Virtual Machine.",
                    "format": "int32",
                    "notes": "Number of VCPUs assigned to the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "description": "Storage container on which the VM configuration files should be created. Required for ESX, Hyper-V. Not applicable for other hypervisors.",
                    "notes": "Storage container on which the VM configuration files should be created.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "timezone": {
                    "description": "The timezone for the VM's hardware clock. Any updates to the timezone will be applied during the next VM power cycle (but not reset). The default is UTC.",
                    "notes": "The timezone for the VM's hardware clock.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "UUID of the VM.",
                    "notes": "UUID of the VM.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vcpu_reservation_hz": {
                    "description": "CPU, in Hertz reserved for the Virtual Machine.",
                    "format": "int64",
                    "notes": "CPU, in Hertz reserved for the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "vm_customization_config": {
                    "$ref": "create.dto.acropolis.VMCustomizationConfigDTO",
                    "description": "Vm customization configuration. At boot time, this config will be replayed by VM customization tool(cloudinit/sysprep) installed in the VM to bring VM to the state defined by this config.",
                    "notes": "Vm customization configuration.",
                    "typeName": "DEFAULT"
                },
                "vm_disks": {
                    "description": "List of disk specification to add to the Virtual Machine.",
                    "items": {
                        "$ref": "create.dto.uhura.VMDiskDTO"
                    },
                    "notes": "List of disk specification to add to the Virtual Machine.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "vm_features": {
                    "$ref": "java.util.Map&lt;create.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;",
                    "description": "List of features to be enabled for the Virtual Machine.",
                    "notes": "List of features to be enabled for the Virtual Machine.",
                    "typeName": "DEFAULT"
                },
                "vm_gpus": {
                    "description": "List of GPUs requested for the Virtual Machine. If \"gpus_assigned\" is True, then this field represents the assigned physical GPUs.",
                    "items": {
                        "$ref": "create.dto.uhura.GPUConfigDTO"
                    },
                    "notes": "List of GPUs requested for the Virtual Machine.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "vm_nics": {
                    "description": "List of nics to be added to the Virtual Machine.",
                    "items": {
                        "$ref": "create.dto.acropolis.VMNicSpecDTO"
                    },
                    "notes": "List of nics to be added to the Virtual Machine.",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.uhura.VmDiskCloneDTO": {
            "id": "create.dto.uhura.VmDiskCloneDTO",
            "required": [
                "disk_address"
            ],
            "properties": {
                "disk_address": {
                    "$ref": "create.dto.acropolis.VMDiskAddressDTO",
                    "description": "Address of the source disk or image from which to clone. Disk address is represented by vmdisk_uuid or ndfs_filepath.",
                    "notes": "Address of the source disk or image from which to clone.",
                    "typeName": "DEFAULT"
                },
                "minimum_size": {
                    "description": "The minimum size of the resulting clone in bytes. This should only be specified if 'vmdisk_uuid' is specified.",
                    "format": "int64",
                    "notes": "The minimum size of the resulting clone in bytes.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "snapshot_group_uuid": {
                    "description": "UUID of the snapshot consistency group from which to clone a snapshot vmdisk.",
                    "notes": "UUID of the snapshot consistency group from which to clone a snapshot vmdisk.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "storage_container_uuid": {
                    "description": "The Uuid of the storage container in which the specified image or vmdisk is stored. If the source is a vmdisk, this field is recommended, but optional. If the source is a snapshot vmdisk, this field is required. If the source is an absolute image path, this field is prohibited. If the source is a relative image path, this field is required.",
                    "notes": "The Uuid of the storage container in which the specified image or vmdisk is stored.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "create.dto.uhura.VmDiskCreateDTO": {
            "id": "create.dto.uhura.VmDiskCreateDTO",
            "required": [],
            "properties": {
                "size": {
                    "description": "Size of the Virtual Machine disk to be created in bytes.",
                    "format": "int64",
                    "notes": "Size of the Virtual Machine disk to be created in bytes.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "description": "UUID of container to create disk in. If this is specified, then Container Name and ID should not be specified.",
                    "notes": "UUID of container to create disk in.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.uhura.VmDiskInfoDTO": {
            "id": "create.dto.uhura.VmDiskInfoDTO",
            "required": [
                "disk_address"
            ],
            "properties": {
                "disk_address": {
                    "$ref": "create.dto.acropolis.VMDiskAddressDTO",
                    "description": "Address of the virtual disk.",
                    "notes": "Address of the virtual disk.",
                    "typeName": "DEFAULT"
                },
                "is_cdrom": {
                    "description": "Whether this is a CD-ROM drive.",
                    "notes": "Whether this is a CD-ROM drive.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_empty": {
                    "description": "Whether the drive is empty. This field only applies to CD-ROM drives.",
                    "notes": "Whether the drive is empty. This field only applies to CD-ROM drives.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_scsi_passthrough": {
                    "description": "Whether this SCSI disk is attached in passthrough mode to pass all SCSI commands directly to Stargate via iSCSI.",
                    "notes": "Whether this SCSI disk is attached in passthrough mode to pass all SCSI commands directly to Stargate via iSCSI.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_thin_provisioned": {
                    "description": "Whether the disk is thin provisioned. Note: This field applies to only ESX managed VMs.",
                    "notes": "Whether the disk is thin provisioned.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "shared": {
                    "description": "Whether disk is shared with others VMs or not.",
                    "notes": "Whether disk is shared with others VMs or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "size": {
                    "description": "The size of the disk in bytes",
                    "format": "int64",
                    "notes": "The size of the disk in bytes",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "source_disk_address": {
                    "$ref": "create.dto.acropolis.VMDiskAddressDTO",
                    "description": "The address of the source disk.",
                    "notes": "The address of the source disk.",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "description": "The container in which the backing vmdisk is provisioned. This field is unset when the drive is empty.",
                    "notes": "The container in which the backing vmdisk is provisioned. This field is unset when the drive is empty.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.uhura.VmGuestToolsDTO": {
            "id": "create.dto.uhura.VmGuestToolsDTO",
            "required": [
                "operation"
            ],
            "properties": {
                "operation": {
                    "description": "Denotes the kind of guest tools operation,i.e Mount or Unmount.",
                    "enum": [
                        "MOUNT",
                        "UNMOUNT"
                    ],
                    "notes": "Denotes the kind of guest tools operation",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "override_guest": {
                    "description": "Override the Guest OS CDROM lock.",
                    "notes": "Override the Guest OS CDROM lock.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "UUID of the VM.",
                    "notes": "UUID of the VM.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "delete.dto.acropolis.ReturnValueDTO$TaskIdDTO": {
            "id": "delete.dto.acropolis.ReturnValueDTO$TaskIdDTO",
            "required": [],
            "properties": {
                "task_uuid": {
                    "description": "UUID of the task.",
                    "notes": "UUID of the task.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.acropolis.VMNicSpecDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.acropolis.VMNicSpecDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.acropolis.VMNicSpecDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.uhura.VmConfigDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.uhura.VmConfigDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.uhura.VmConfigDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.dto.acropolis.BootConfigDTO": {
            "id": "get.dto.acropolis.BootConfigDTO",
            "required": [],
            "properties": {
                "boot_device_order": {
                    "description": "The boot device order. In case boot device is not specified or the specified boot device fails, VM will attempt to boot from connected devices in this device type order.",
                    "items": {
                        "enum": [
                            "CDROM",
                            "DISK",
                            "NIC"
                        ],
                        "type": "string"
                    },
                    "notes": "Boot device order",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "boot_device_type": {
                    "description": "The device from which to boot. This must refer to a valid device configured on the VM. When a boot device is removed from the VM, this field is cleared as a side effect. If no boot device is configured, the VM will have the following boot preference: hard disk, CD-ROM, NIC.",
                    "enum": [
                        "CDROM",
                        "DISK",
                        "NIC"
                    ],
                    "notes": "Device from which to boot",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "disk_address": {
                    "$ref": "get.dto.acropolis.VMDiskAddressDTO",
                    "description": "Disk address selected as boot device. At most one of this or macAddr field should be set.",
                    "notes": "Disk address selected as boot device",
                    "typeName": "DEFAULT"
                },
                "mac_addr": {
                    "description": "Mac address of the NIC selected as boot device. At most one of this or diskAddress field should be set.",
                    "notes": "Mac address of the NIC selected as boot device",
                    "type": "string",
                    "typeName": "MAC_ADDRESS"
                }
            }
        },
        "get.dto.acropolis.FileToInjectDTO": {
            "id": "get.dto.acropolis.FileToInjectDTO",
            "required": [],
            "properties": {
                "destination_path": {
                    "description": "Destination path in the VM at which the file specified by source_path should be copied to.",
                    "notes": "Destination path in the VM at which the file specified by sourcePath should be copied to.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "source_path": {
                    "description": "ADSF path of the source file to inject in the VM. Must be of form: adsf:///<ctr>/...",
                    "notes": "ADSF path of the source file to inject in the VM.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.acropolis.VMCustomizationConfigDTO": {
            "id": "get.dto.acropolis.VMCustomizationConfigDTO",
            "required": [],
            "properties": {
                "datasource_type": {
                    "description": "The type of datasource for configuring the Linux Virtual Machine in case cloudinit config is provided. ISO based datasource supported by Uhura is ConfigDriveV2.",
                    "enum": [
                        "CONFIG_DRIVE_V2"
                    ],
                    "notes": "The type of datasource for configuring the Linux Virtual Machine in case cloudinit config is provided.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "files_to_inject_list": {
                    "description": "List of details about files to inject in the VM.",
                    "items": {
                        "$ref": "get.dto.acropolis.FileToInjectDTO"
                    },
                    "notes": "List of details about files to inject in the VM.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "fresh_install": {
                    "description": "Indicates whether the VM to be customized is meant to be freshly installed via Windows Setup from a Windows OS DVD or whether the VM will be configured from a 'Sysprepped' image in which case the setup was already complete.",
                    "notes": "Indicates whether the VM to be customized is meant to be freshly installed or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "userdata": {
                    "description": "Userdata in string format. Either Cloudinit format for customizing Linux VM or Sysprep format for customizing Windows VM. For cloudinit the userdata is usually a yaml file or shell script. For sysprep the userdata is usually a Xml representation of an unattend file in string format.Either this or userdataPath must be provided",
                    "notes": "Userdata in string format.",
                    "type": "string",
                    "typeName": "TEXT"
                },
                "userdata_path": {
                    "description": "Userdata source path. Must begin with adsf:///<ctr>.For cloudinit usually a yaml file or shell script is provided. For sysprep usually an unattend file or answer file is provided. Either this or userdata must be provided",
                    "notes": "Userdata source path.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.acropolis.VMDiskAddressDTO": {
            "id": "get.dto.acropolis.VMDiskAddressDTO",
            "required": [],
            "properties": {
                "device_bus": {
                    "description": "The device bus for the virtual disk device.Possible values are SCSI, IDE and PCI. Along with this the deviceIndex is used to specify a vdisk address. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "enum": [
                        "SCSI",
                        "IDE",
                        "PCI",
                        "SATA",
                        "SPAPR"
                    ],
                    "notes": "The device bus for the virtual disk device.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "device_index": {
                    "description": "Index of the device on the adapter type. If left unspecified, the system will allocate the next available slot on the default bus.",
                    "format": "int32",
                    "notes": "Index of the device on the adapter type.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "disk_label": {
                    "description": "Information about attached disk. Disk label (for example, scsi0:0) where the virtual disk was attached. This indicates the location of the virtual disk within the VM.",
                    "notes": "Information about attached disk.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "is_cdrom": {
                    "description": "Whether this is a CD-ROM drive.",
                    "notes": "Whether this is a CD-ROM drive.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "ndfs_filepath": {
                    "description": "NDFS path to existing virtual disk. This field will not be set when this message is used in a create mode.When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "NDFS path to existing virtual disk.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vmdisk_uuid": {
                    "description": "Virtual disk identifier. This field will not be set when this message is used in a create mode. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "Virtual disk identifier.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "volume_group_uuid": {
                    "type": "string"
                }
            }
        },
        "get.dto.acropolis.VMNicSpecDTO": {
            "id": "get.dto.acropolis.VMNicSpecDTO",
            "required": [],
            "properties": {
                "adapter_type": {
                    "description": "Type of the network adapter for ESX networks.",
                    "enum": [
                        "E1000",
                        "E1000e",
                        "PCNet32",
                        "Vmxnet",
                        "Vmxnet2",
                        "Vmxnet3",
                        "Unsupported"
                    ],
                    "notes": "Type of the network adapter.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "ip_address": {
                    "description": "IP address for the NIC. Includes both Acropolis assigned IP address as well as learned IP address from thirdparty networks.",
                    "notes": "IP address for the NIC.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "mac_address": {
                    "description": "The MAC address of the NIC",
                    "notes": "The MAC address of the NIC",
                    "type": "string",
                    "typeName": "MAC_ADDRESS"
                },
                "model": {
                    "description": "Virtual hardware model.",
                    "notes": "Virtual hardware model.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "network_uuid": {
                    "description": "The network to which the NIC is attached",
                    "notes": "The network to which the NIC is attached",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "port_id": {
                    "description": "The port id for ESX networks.",
                    "notes": "Port Id.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "request_ip": {
                    "description": "If request_ip is true\nIf 'requestedIpAddress' is set then request that IP from the network. If it's a managed network then request a dynamic IP from the network. Otherwise don't request an IP. If requestIp is false, then don't request an IP at all, regardless of whether or not the 'requestedIpAddress' is set and whether or the network is managed or not.",
                    "notes": "Request IP address.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "requested_ip_address": {
                    "description": "Requested IP address.",
                    "notes": "Requested IP address.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.uhura.GPUConfigDTO": {
            "id": "get.dto.uhura.GPUConfigDTO",
            "required": [],
            "properties": {
                "assignable": {
                    "description": "Whether the GPU can be assigned to a Virtual Machine.",
                    "notes": "Whether the GPU can be assigned to a Virtual Machine.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "device_id": {
                    "description": "Device ID of the GPU resource.",
                    "format": "int32",
                    "notes": "Device ID of the GPU resource.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "device_name": {
                    "description": "Vendor device name of the GPU resource.",
                    "notes": "Vendor device name of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "fraction": {
                    "description": "Fraction of the physical GPU. Only applicable for a vGPU instance.",
                    "format": "int32",
                    "notes": "Fraction of the physical GPU. Only applicable for a vGPU instance.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "frame_buffer_size_bytes": {
                    "description": "GPU framebuffer size in bytes.",
                    "format": "int64",
                    "notes": "GPU framebuffer size.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "gpu_mode": {
                    "description": "Current mode of the physical GPU. Not valid on vGPU resources.",
                    "enum": [
                        "UNUSED",
                        "USED_FOR_PASSTHROUGH",
                        "USED_FOR_VIRTUAL"
                    ],
                    "notes": "Current mode of the physical GPU.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpu_profile": {
                    "description": "Profile of the GPU.",
                    "notes": "Profile of the GPU.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpu_type": {
                    "description": "Type of the GPU resource.",
                    "enum": [
                        "PASS_THROUGH_GRAPHICS",
                        "PASS_THROUGH_COMPUTE",
                        "VIRTUAL"
                    ],
                    "notes": "Type of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpu_vendor": {
                    "description": "Vendor of the GPU resource.",
                    "enum": [
                        "NVIDIA",
                        "INTEL",
                        "AMD"
                    ],
                    "notes": "Vendor of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "guest_driver_version": {
                    "description": "Last determined guest driver version.",
                    "notes": "Last determined guest driver version.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "in_use": {
                    "description": "Whether the GPU resource is in use or not.",
                    "notes": "Whether the GPU resource is in use or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "licenses": {
                    "description": "List of license types associated with this GPU.",
                    "items": {
                        "type": "string"
                    },
                    "notes": "List of license types.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "max_resolution": {
                    "description": "Maximum resolution per display heads.",
                    "notes": "Maximum resolution per display heads.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "num_virtual_display_heads": {
                    "description": "Number of supported virtual display heads.",
                    "format": "int32",
                    "notes": "Number of supported virtual display heads.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "numa_node": {
                    "description": "The NUMA node where the GPU belongs to.",
                    "format": "int32",
                    "notes": "The NUMA node where the GPU belongs to.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "sbdf": {
                    "description": "Unique device information for the GPU resource.",
                    "notes": "Unique device information for the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vm_uuids": {
                    "description": "List of UUIDs of the Virtual Machines where the GPU resource is assigned.",
                    "items": {
                        "type": "string"
                    },
                    "notes": "List of UUIDs of the Virtual Machines where the GPU resource is assigned.",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.uhura.SerialPortConfigDTO": {
            "id": "get.dto.uhura.SerialPortConfigDTO",
            "required": [],
            "properties": {
                "index": {
                    "description": "The serial port index. Generally limited to the range [0..3], corresponding to COM1 through COM4.",
                    "format": "int32",
                    "notes": "The serial port index.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "type": {
                    "description": "The backing type for this serial port.\nPossible values- null(The serial device is present, but has no backing), server(The serial device is accessible via a websocket.)",
                    "enum": [
                        "NULL",
                        "SERVER"
                    ],
                    "notes": "The backing type for this serial port.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.uhura.VmConfigDTO": {
            "id": "get.dto.uhura.VmConfigDTO",
            "required": [],
            "properties": {
                "allow_live_migrate": {
                    "description": "Indicates whether the Virtual Machine can be live migrated or not.",
                    "notes": "Indicates whether the Virtual Machine can be live migrated or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "boot": {
                    "$ref": "get.dto.acropolis.BootConfigDTO",
                    "description": "Boot configuration for the Virtual Machine. Any updates to the boot configuration will be applied during the next Virtual Machine power cycle but not reset.",
                    "notes": "Boot configuration for the Virtual Machine.",
                    "typeName": "DEFAULT"
                },
                "cbr_not_capable_reason": {
                    "description": "If set to a non-empty string, this VM should be considered incompatible with DR workflows. Applicable only for AHV VMs. In the future, it will be removed in favor of using tags for identifying service VMs.",
                    "notes": "Reason for not CBR capable",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "description": {
                    "description": "Description for the Virtual Machine.",
                    "notes": "Description for the Virtual Machine.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpus_assigned": {
                    "description": "Indicates whether the requested GPUs have been assigned to the Virtual Machine or not.",
                    "notes": "Indicates whether the requested GPUs have been assigned to the Virtual Machine or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "guest_driver_version": {
                    "description": "Last determined guest driver version.",
                    "notes": "Last determined guest driver version.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "guest_os": {
                    "description": "Guest OS for VMWare. Applicable only for ESX Vms.",
                    "notes": "Guest OS for VMWare.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "ha_priority": {
                    "description": "Priority for restarting in case of HA event.",
                    "format": "int64",
                    "notes": "Priority for restarting in case of HA event. Negative value indicates do not restart.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "host_uuid": {
                    "description": "A version 4 UUID identifying the host on which the Virtual Machine is currently running. If Virtual Machine is powered off, then this field is empty.",
                    "notes": "A version 4 UUID identifying the host on which the Virtual Machine is currently running",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "memory_mb": {
                    "description": "RAM in megabytes assigned to the Virtual Machine.",
                    "format": "int64",
                    "notes": "RAM in megabytes assigned to the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "memory_reservation_mb": {
                    "description": "RAM, in megabytes reserved for the Virtual Machine.",
                    "format": "int64",
                    "notes": "RAM, in megabytes reserved for the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "The Virtual Machine human readable name.",
                    "notes": "The Virtual Machine human readable name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "num_cores_per_vcpu": {
                    "description": "Number of cores assigned to each VCPUs.",
                    "format": "int32",
                    "notes": "Number of cores assigned to each VCPUs.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "num_vcpus": {
                    "description": "Number of VCPUs assigned to the Virtual Machine.",
                    "format": "int32",
                    "notes": "Number of VCPUs assigned to the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "power_state": {
                    "description": "Current power state of the Virtual Machine.",
                    "enum": [
                        "UNKNOWN",
                        "OFF",
                        "POWERING_ON",
                        "ON",
                        "SHUTTING_DOWN",
                        "POWERING_OFF",
                        "PAUSING",
                        "PAUSED",
                        "SUSPENDING",
                        "SUSPENDED",
                        "RESUMING",
                        "RESETTING",
                        "MIGRATING"
                    ],
                    "notes": "Current power state of the Virtual Machine.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "serial_ports": {
                    "description": "Virtual serial ports.",
                    "items": {
                        "$ref": "get.dto.uhura.SerialPortConfigDTO"
                    },
                    "notes": "Virtual serial ports.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "description": "Storage container on which the VM configuration files should be created. Required for ESX, Hyper-V. Not applicable for other hypervisors.",
                    "notes": "Storage container on which the VM configuration files should be created.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "timezone": {
                    "description": "The timezone for the VM's hardware clock. Any updates to the timezone will be applied during the next VM power cycle (but not reset). The default is UTC.",
                    "notes": "The timezone for the VM's hardware clock.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "tools_installer_mounted": {
                    "description": "The VM's current tools installer mount status.",
                    "notes": "The VM's current tools installer mount status.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "tools_running_status": {
                    "description": "The VM's current tools installer running status.",
                    "enum": [
                        "UNKNOWN",
                        "GUEST_TOOLS_EXECUTING_SCRIPTS",
                        "GUEST_TOOLS_NOT_RUNNING",
                        "GUEST_TOOLS_RUNNING"
                    ],
                    "notes": "The VM's current tools installer running status.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "UUID of the VM.",
                    "notes": "UUID of the VM.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vcpu_reservation_hz": {
                    "description": "CPU, in Hertz reserved for the Virtual Machine.",
                    "format": "int64",
                    "notes": "CPU, in Hertz reserved for the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "vm_customization_config": {
                    "$ref": "get.dto.acropolis.VMCustomizationConfigDTO",
                    "description": "Vm customization configuration. At boot time, this config will be replayed by VM customization tool(cloudinit/sysprep) installed in the VM to bring VM to the state defined by this config.",
                    "notes": "Vm customization configuration.",
                    "typeName": "DEFAULT"
                },
                "vm_disk_info": {
                    "description": "List of information of disks for a Virtual Machine.",
                    "items": {
                        "$ref": "get.dto.uhura.VmDiskInfoDTO"
                    },
                    "notes": "List of information of disks for a Virtual Mschine.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "vm_features": {
                    "$ref": "java.util.Map&lt;get.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;",
                    "description": "List of features to be enabled for the Virtual Machine.",
                    "notes": "List of features to be enabled for the Virtual Machine.",
                    "typeName": "DEFAULT"
                },
                "vm_gpus": {
                    "description": "List of GPUs requested for the Virtual Machine. If \"gpus_assigned\" is True, then this field represents the assigned physical GPUs.",
                    "items": {
                        "$ref": "get.dto.uhura.GPUConfigDTO"
                    },
                    "notes": "List of GPUs requested for the Virtual Machine.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "vm_logical_timestamp": {
                    "description": "Logical timestamp specified for consistency. This can be obtained from the Virtual Machine object.",
                    "format": "int64",
                    "notes": "Logical timestamp specified for consistency.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "vm_nics": {
                    "description": "List of nics to be added to the Virtual Machine.",
                    "items": {
                        "$ref": "get.dto.acropolis.VMNicSpecDTO"
                    },
                    "notes": "List of nics to be added to the Virtual Machine.",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.uhura.VmDiskInfoDTO": {
            "id": "get.dto.uhura.VmDiskInfoDTO",
            "required": [],
            "properties": {
                "disk_address": {
                    "$ref": "get.dto.acropolis.VMDiskAddressDTO",
                    "description": "Address of the virtual disk.",
                    "notes": "Address of the virtual disk.",
                    "typeName": "DEFAULT"
                },
                "flash_mode_enabled": {
                    "description": "Whether the flash mode is enabled for this disk or not.",
                    "notes": "Whether the flash mode is enabled for this disk or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_cdrom": {
                    "description": "Whether this is a CD-ROM drive.",
                    "notes": "Whether this is a CD-ROM drive.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_empty": {
                    "description": "Whether the drive is empty. This field only applies to CD-ROM drives.",
                    "notes": "Whether the drive is empty. This field only applies to CD-ROM drives.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_scsi_passthrough": {
                    "description": "Whether this SCSI disk is attached in passthrough mode to pass all SCSI commands directly to Stargate via iSCSI.",
                    "notes": "Whether this SCSI disk is attached in passthrough mode to pass all SCSI commands directly to Stargate via iSCSI.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_thin_provisioned": {
                    "description": "Whether the disk is thin provisioned. Note: This field applies to only ESX managed VMs.",
                    "notes": "Whether the disk is thin provisioned.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "shared": {
                    "description": "Whether disk is shared with others VMs or not.",
                    "notes": "Whether disk is shared with others VMs or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "size": {
                    "description": "The size of the disk in bytes",
                    "format": "int64",
                    "notes": "The size of the disk in bytes",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "source_disk_address": {
                    "$ref": "get.dto.acropolis.VMDiskAddressDTO",
                    "description": "The address of the source disk.",
                    "notes": "The address of the source disk.",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "description": "The container in which the backing vmdisk is provisioned. This field is unset when the drive is empty.",
                    "notes": "The container in which the backing vmdisk is provisioned. This field is unset when the drive is empty.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "java.util.Map&lt;create.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;": {
            "id": "java.util.Map&lt;create.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;get.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;": {
            "id": "java.util.Map&lt;get.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;update.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;": {
            "id": "java.util.Map&lt;update.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;",
            "required": [],
            "properties": {}
        },
        "update.dto.acropolis.BootConfigDTO": {
            "id": "update.dto.acropolis.BootConfigDTO",
            "required": [],
            "properties": {
                "boot_device_order": {
                    "description": "The boot device order. In case boot device is not specified or the specified boot device fails, VM will attempt to boot from connected devices in this device type order.",
                    "items": {
                        "enum": [
                            "CDROM",
                            "DISK",
                            "NIC"
                        ],
                        "type": "string"
                    },
                    "notes": "Boot device order",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "boot_device_type": {
                    "description": "The device from which to boot. This must refer to a valid device configured on the VM. When a boot device is removed from the VM, this field is cleared as a side effect. If no boot device is configured, the VM will have the following boot preference: hard disk, CD-ROM, NIC.",
                    "enum": [
                        "CDROM",
                        "DISK",
                        "NIC"
                    ],
                    "notes": "Device from which to boot",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "disk_address": {
                    "$ref": "update.dto.acropolis.VMDiskAddressDTO",
                    "description": "Disk address selected as boot device. At most one of this or macAddr field should be set.",
                    "notes": "Disk address selected as boot device",
                    "typeName": "DEFAULT"
                },
                "mac_addr": {
                    "description": "Mac address of the NIC selected as boot device. At most one of this or diskAddress field should be set.",
                    "notes": "Mac address of the NIC selected as boot device",
                    "type": "string",
                    "typeName": "MAC_ADDRESS"
                }
            }
        },
        "update.dto.acropolis.ReturnValueDTO$TaskIdDTO": {
            "id": "update.dto.acropolis.ReturnValueDTO$TaskIdDTO",
            "required": [],
            "properties": {
                "task_uuid": {
                    "description": "UUID of the task.",
                    "notes": "UUID of the task.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.acropolis.VMDiskAddressDTO": {
            "id": "update.dto.acropolis.VMDiskAddressDTO",
            "required": [],
            "properties": {
                "device_bus": {
                    "description": "The device bus for the virtual disk device.Possible values are SCSI, IDE and PCI. Along with this the deviceIndex is used to specify a vdisk address. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "enum": [
                        "SCSI",
                        "IDE",
                        "PCI",
                        "SATA",
                        "SPAPR"
                    ],
                    "notes": "The device bus for the virtual disk device.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "device_index": {
                    "description": "Index of the device on the adapter type. If left unspecified, the system will allocate the next available slot on the default bus.",
                    "format": "int32",
                    "notes": "Index of the device on the adapter type.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "ndfs_filepath": {
                    "description": "NDFS path to existing virtual disk. This field will not be set when this message is used in a create mode.When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "NDFS path to existing virtual disk.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vmdisk_uuid": {
                    "description": "Virtual disk identifier. This field will not be set when this message is used in a create mode. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "Virtual disk identifier.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "volume_group_uuid": {
                    "type": "string"
                }
            }
        },
        "update.dto.acropolis.VMNicSpecDTO": {
            "id": "update.dto.acropolis.VMNicSpecDTO",
            "required": [
                "network_uuid"
            ],
            "properties": {
                "adapter_type": {
                    "description": "Type of the network adapter for ESX networks.",
                    "enum": [
                        "E1000",
                        "E1000e",
                        "PCNet32",
                        "Vmxnet",
                        "Vmxnet2",
                        "Vmxnet3",
                        "Unsupported"
                    ],
                    "notes": "Type of the network adapter.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "mac_address": {
                    "description": "The MAC address of the NIC",
                    "notes": "The MAC address of the NIC",
                    "type": "string",
                    "typeName": "MAC_ADDRESS"
                },
                "model": {
                    "description": "Virtual hardware model.",
                    "notes": "Virtual hardware model.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "network_uuid": {
                    "description": "The network to which the NIC is attached",
                    "notes": "The network to which the NIC is attached",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "request_ip": {
                    "description": "If request_ip is true\nIf 'requestedIpAddress' is set then request that IP from the network. If it's a managed network then request a dynamic IP from the network. Otherwise don't request an IP. If requestIp is false, then don't request an IP at all, regardless of whether or not the 'requestedIpAddress' is set and whether or the network is managed or not.",
                    "notes": "Request IP address.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "requested_ip_address": {
                    "description": "Requested IP address.",
                    "notes": "Requested IP address.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.acropolis.VMNicUpdateDTO": {
            "id": "update.dto.acropolis.VMNicUpdateDTO",
            "required": [
                "nic_spec"
            ],
            "properties": {
                "nic_id": {
                    "description": "ID of the Virtual Machine NIC to be updated. This is basically the MAC address of the NIC.",
                    "notes": "ID of the Virtual Machine NIC to be updated.",
                    "type": "string",
                    "typeName": "ACRO_NIC_ID"
                },
                "nic_spec": {
                    "$ref": "update.dto.acropolis.VMNicSpecDTO",
                    "description": "Specification for the Virtual Machine NIC to be updated.",
                    "notes": "Specification for the Virtual Machine NIC to be updated.",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "UUID of the Virtual Machine to update the NIC on.",
                    "notes": "UUID of the Virtual Machine to update the NIC on.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vm_logical_timestamp": {
                    "description": "Logical timestamp specified for consistency. This can be obtained from the Virtual Machine object.",
                    "format": "int64",
                    "notes": "Logical timestamp specified for consistency.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.uhura.GPUConfigDTO": {
            "id": "update.dto.uhura.GPUConfigDTO",
            "required": [
                "device_id"
            ],
            "properties": {
                "device_id": {
                    "description": "Device ID of the GPU resource.",
                    "format": "int32",
                    "notes": "Device ID of the GPU resource.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "gpu_type": {
                    "description": "Type of the GPU resource.",
                    "enum": [
                        "PASS_THROUGH_GRAPHICS",
                        "PASS_THROUGH_COMPUTE",
                        "VIRTUAL"
                    ],
                    "notes": "Type of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpu_vendor": {
                    "description": "Vendor of the GPU resource.",
                    "enum": [
                        "NVIDIA",
                        "INTEL",
                        "AMD"
                    ],
                    "notes": "Vendor of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.uhura.VMDiskDTO": {
            "id": "update.dto.uhura.VMDiskDTO",
            "required": [
                "disk_address"
            ],
            "properties": {
                "disk_address": {
                    "$ref": "update.dto.acropolis.VMDiskAddressDTO",
                    "description": "Disk address represented by device bus type and device index.",
                    "notes": "Disk address represented by device bus type and device index.",
                    "typeName": "DEFAULT"
                },
                "flash_mode_enabled": {
                    "description": "Flash mode enabled or not for the volume",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_cdrom": {
                    "description": "Whether this is a CD-ROM drive. The default value is 'false'",
                    "notes": "Whether this is a CD-ROM drive.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_empty": {
                    "description": "Whether the drive should be empty. This field only applies to CD-ROM drives, otherwise it is ignored. If this field is set to true and the drive is a CD-ROM, then the disk creation field 'vmDiskCreate' should be ignored. The default value is 'false'",
                    "notes": "Whether the CD-ROM drive should be empty.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_scsi_pass_through": {
                    "description": "Whether the SCSI disk should be attached in passthrough mode to pass all SCSI commands directly to Stargate via iSCSI. The default value is true.",
                    "notes": "Whether the SCSI disk should be attached in passthrough mode to pass all SCSI commands directly to Stargate via iSCSI.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_thin_provisioned": {
                    "description": "Whether the disk is thin provisioned. This field applies to only ESX managed VMs.",
                    "notes": "Whether the disk is thin provisioned.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "vm_disk_clone": {
                    "$ref": "update.dto.uhura.VmDiskCloneDTO",
                    "description": "Specification for cloning a new disk or snapshot. Only one of 'vmDiskClone' and 'vmDiskCreate' is required per create/update request.",
                    "notes": "Specification for cloning a new disk or snapshot.",
                    "typeName": "DEFAULT"
                },
                "vm_disk_create": {
                    "$ref": "update.dto.uhura.VmDiskCreateDTO",
                    "description": "Specification for creating a new disk. Only one of 'vmCreateSpec' and 'vmCloneSpec' is required per create/update request.",
                    "notes": "Specification for creating a new disk.",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.uhura.VmConfigDTO": {
            "id": "update.dto.uhura.VmConfigDTO",
            "required": [],
            "properties": {
                "boot": {
                    "$ref": "update.dto.acropolis.BootConfigDTO",
                    "description": "Boot configuration for the Virtual Machine. Any updates to the boot configuration will be applied during the next Virtual Machine power cycle but not reset.",
                    "notes": "Boot configuration for the Virtual Machine.",
                    "typeName": "DEFAULT"
                },
                "description": {
                    "description": "Description for the Virtual Machine.",
                    "notes": "Description for the Virtual Machine.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "ha_priority": {
                    "description": "Priority for restarting in case of HA event.",
                    "format": "int64",
                    "notes": "Priority for restarting in case of HA event. Negative value indicates do not restart.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "memory_mb": {
                    "description": "RAM in megabytes assigned to the Virtual Machine.",
                    "format": "int64",
                    "notes": "RAM in megabytes assigned to the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "memory_reservation_mb": {
                    "description": "RAM, in megabytes reserved for the Virtual Machine.",
                    "format": "int64",
                    "notes": "RAM, in megabytes reserved for the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "The Virtual Machine human readable name.",
                    "notes": "The Virtual Machine human readable name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "num_cores_per_vcpu": {
                    "description": "Number of cores assigned to each VCPUs.",
                    "format": "int32",
                    "notes": "Number of cores assigned to each VCPUs.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "num_vcpus": {
                    "description": "Number of VCPUs assigned to the Virtual Machine.",
                    "format": "int32",
                    "notes": "Number of VCPUs assigned to the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "description": "Storage container on which the VM configuration files should be created. Required for ESX, Hyper-V. Not applicable for other hypervisors.",
                    "notes": "Storage container on which the VM configuration files should be created.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "timezone": {
                    "description": "The timezone for the VM's hardware clock. Any updates to the timezone will be applied during the next VM power cycle (but not reset). The default is UTC.",
                    "notes": "The timezone for the VM's hardware clock.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "UUID of the VM.",
                    "notes": "UUID of the VM.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vcpu_reservation_hz": {
                    "description": "CPU, in Hertz reserved for the Virtual Machine.",
                    "format": "int64",
                    "notes": "CPU, in Hertz reserved for the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "vm_disks": {
                    "description": "List of disk specification to add to the Virtual Machine.",
                    "items": {
                        "$ref": "update.dto.uhura.VMDiskDTO"
                    },
                    "notes": "List of disk specification to add to the Virtual Machine.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "vm_features": {
                    "$ref": "java.util.Map&lt;update.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;",
                    "description": "List of features to be enabled for the Virtual Machine.",
                    "notes": "List of features to be enabled for the Virtual Machine.",
                    "typeName": "DEFAULT"
                },
                "vm_gpus": {
                    "description": "List of GPUs requested for the Virtual Machine. If \"gpus_assigned\" is True, then this field represents the assigned physical GPUs.",
                    "items": {
                        "$ref": "update.dto.uhura.GPUConfigDTO"
                    },
                    "notes": "List of GPUs requested for the Virtual Machine.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "vm_logical_timestamp": {
                    "description": "Logical timestamp specified for consistency. This can be obtained from the Virtual Machine object.",
                    "format": "int64",
                    "notes": "Logical timestamp specified for consistency.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "vm_nics": {
                    "description": "List of nics to be added to the Virtual Machine.",
                    "items": {
                        "$ref": "update.dto.acropolis.VMNicSpecDTO"
                    },
                    "notes": "List of nics to be added to the Virtual Machine.",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.uhura.VmDiskCloneDTO": {
            "id": "update.dto.uhura.VmDiskCloneDTO",
            "required": [],
            "properties": {
                "disk_address": {
                    "$ref": "update.dto.acropolis.VMDiskAddressDTO",
                    "description": "Address of the source disk or image from which to clone. Disk address is represented by vmdisk_uuid or ndfs_filepath.",
                    "notes": "Address of the source disk or image from which to clone.",
                    "typeName": "DEFAULT"
                },
                "minimum_size": {
                    "description": "The minimum size of the resulting clone in bytes. This should only be specified if 'vmdisk_uuid' is specified.",
                    "format": "int64",
                    "notes": "The minimum size of the resulting clone in bytes.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "snapshot_group_uuid": {
                    "description": "UUID of the snapshot consistency group from which to clone a snapshot vmdisk.",
                    "notes": "UUID of the snapshot consistency group from which to clone a snapshot vmdisk.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "storage_container_uuid": {
                    "description": "The Uuid of the storage container in which the specified image or vmdisk is stored. If the source is a vmdisk, this field is recommended, but optional. If the source is a snapshot vmdisk, this field is required. If the source is an absolute image path, this field is prohibited. If the source is a relative image path, this field is required.",
                    "notes": "The Uuid of the storage container in which the specified image or vmdisk is stored.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "update.dto.uhura.VmDiskCreateDTO": {
            "id": "update.dto.uhura.VmDiskCreateDTO",
            "required": [],
            "properties": {
                "size": {
                    "description": "Size of the Virtual Machine disk to be created in bytes.",
                    "format": "int64",
                    "notes": "Size of the Virtual Machine disk to be created in bytes.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "description": "UUID of container to create disk in. If this is specified, then Container Name and ID should not be specified.",
                    "notes": "UUID of container to create disk in.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/api/nutanix/v2.0",
    "resourcePath": "/volume_groups",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/volume_groups/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Retrieve Volume Group configuration",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.acropolis.volumegroups.VolumeGroupConfigDTO&gt;",
                    "nickname": "getVolumeGroups",
                    "parameters": [
                        {
                            "name": "include_disk_size",
                            "description": "Whether to include disk sizes, true by default",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Create a new Volume Group configuration",
                    "notes": "",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "createVolumeGroup",
                    "parameters": [
                        {
                            "description": "Create a Volume Group",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.acropolis.volumegroups.VolumeGroupCreateDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/volume_groups/{uuid}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Remove an existing Volume Group configuration",
                    "notes": "",
                    "type": "delete.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "removeVolumeGroup",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of the Volume Group",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "logical_timestamp",
                            "description": "The logical timestamp",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Retrieve Volume Group configuration",
                    "notes": "",
                    "type": "get.dto.acropolis.volumegroups.VolumeGroupConfigDTO",
                    "nickname": "getVolumeGroup",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of the Volume Group",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "include_disk_size",
                            "description": "Whether to include disk sizes",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Modify an existing Volume Group configuration",
                    "notes": "",
                    "type": "update.dto.acropolis.volumegroups.VolumeGroupConfigDTO",
                    "nickname": "updateVolumeGroup",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of the Volume Group",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Update Volume Group",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.acropolis.volumegroups.VolumeGroupUpdateDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/volume_groups/{uuid}/attach",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Attach Volume Group to Virtual Machine.",
                    "notes": "",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "attachVirtualMachine",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of the Volume Group",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Virtual Machine attach configuration",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.acropolis.volumegroups.VolumeGroupAttachVmDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/volume_groups/{uuid}/clone",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Clone a new Volume Group",
                    "notes": "",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "cloneVolumeGroup",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of the source Volume Group",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Clone a Volume Group",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.acropolis.volumegroups.VolumeGroupCloneDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/volume_groups/{uuid}/close",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Close Volume Group for iSCSI initiators",
                    "notes": "",
                    "type": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "closeVolumeGroup",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of the Volume Group",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Volume Group detach configuration",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.acropolis.volumegroups.VolumeGroupAttachExternalDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/volume_groups/{uuid}/detach",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Detach Volume Group to Virtual Machine.",
                    "notes": "",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "detachVirtualMachine",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of the Volume Group",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Virtual Machine detach configuration",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.acropolis.volumegroups.VolumeGroupAttachVmDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/volume_groups/{uuid}/disks",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Create a Volume Disk",
                    "notes": "Creates a Volume Disk with specified configuration.",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "createVolumeDisk",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of the Volume Group",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Create a Volume Disk",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.acropolis.volumegroups.VolumeDiskCreateSpecDTO"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Updates a Volume Disk",
                    "notes": "Updates a Volume Disk with specified configuration.",
                    "type": "update.dto.acropolis.volumegroups.VolumeDiskConfigDTO",
                    "nickname": "updateVolumeDisk",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of the Volume Group",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Update a Volume Disk",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.acropolis.volumegroups.VolumeDiskUpdateDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/volume_groups/{uuid}/disks/{index}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete a Volume Disk",
                    "notes": "Delete a Volume Disk with specified configuration.",
                    "type": "delete.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "deleteVolumeDisk",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of the Volume Group",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "index",
                            "description": "Volume Group index of the disk",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "integer"
                        },
                        {
                            "name": "logical_timestamp",
                            "description": "The logical timestamp",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/volume_groups/{uuid}/open",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Open Volume Group for iSCSI initiators",
                    "notes": "",
                    "type": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "openVolumeGroup",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of the Volume Group",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Volume Group attach configuration",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.acropolis.volumegroups.VolumeGroupAttachExternalDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/volume_groups/{uuid}/stats/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the stats for a specified VolumeGroup.",
                    "notes": "If start time and end time are included in the query string, <br/>then historical stats are retrieved. Otherwise, the latest stats are retrieved.",
                    "type": "get.base.StatsResponse",
                    "nickname": "getVolumeGroupStats",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of the VolumeGroup",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "metrics",
                            "description": "List of metrics",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "start_time_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "interval_in_secs",
                            "description": "Sampling interval of stats",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                }
            ]
        }
    ],
    "models": {
        "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "create.dto.acropolis.ReturnValueDTO$TaskIdDTO": {
            "id": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
            "required": [],
            "properties": {
                "task_uuid": {
                    "description": "UUID of the task.",
                    "notes": "UUID of the task.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.VMDiskAddressDTO": {
            "id": "create.dto.acropolis.VMDiskAddressDTO",
            "required": [],
            "properties": {
                "device_bus": {
                    "description": "The device bus for the virtual disk device.Possible values are SCSI, IDE and PCI. Along with this the deviceIndex is used to specify a vdisk address. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "enum": [
                        "SCSI",
                        "IDE",
                        "PCI",
                        "SATA",
                        "SPAPR"
                    ],
                    "notes": "The device bus for the virtual disk device.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "device_index": {
                    "description": "Index of the device on the adapter type. If left unspecified, the system will allocate the next available slot on the default bus.",
                    "format": "int32",
                    "notes": "Index of the device on the adapter type.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "ndfs_filepath": {
                    "description": "NDFS path to existing virtual disk. This field will not be set when this message is used in a create mode.When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "NDFS path to existing virtual disk.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vmdisk_uuid": {
                    "description": "Virtual disk identifier. This field will not be set when this message is used in a create mode. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "Virtual disk identifier.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "volume_group_uuid": {
                    "type": "string"
                }
            }
        },
        "create.dto.acropolis.volumegroups.ClientAuthenticationDTO": {
            "id": "create.dto.acropolis.volumegroups.ClientAuthenticationDTO",
            "required": [],
            "properties": {
                "auth_type": {
                    "description": "Type of the authentication",
                    "enum": [
                        "CHAP",
                        "NONE"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "password": {
                    "description": "Password of the supported authentication type",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.volumegroups.IscsiClientDTO": {
            "id": "create.dto.acropolis.volumegroups.IscsiClientDTO",
            "required": [
                "client_address"
            ],
            "properties": {
                "client_address": {
                    "description": "Unique identifier for the client, it can be either iqn or ip address",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "enabled_authentications": {
                    "description": "List of supported authentication types",
                    "items": {
                        "$ref": "create.dto.acropolis.volumegroups.ClientAuthenticationDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "Uuid of the iscsi client",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "create.dto.acropolis.volumegroups.VolumeDiskCreateSpecDTO": {
            "id": "create.dto.acropolis.volumegroups.VolumeDiskCreateSpecDTO",
            "required": [],
            "properties": {
                "clone_config": {
                    "$ref": "create.dto.uhura.VmDiskCloneDTO",
                    "description": "VM disk clone configuration",
                    "notes": "Either create or clone, not both.",
                    "typeName": "DEFAULT"
                },
                "create_config": {
                    "$ref": "create.dto.uhura.VmDiskCreateDTO",
                    "description": "VM disk create configuration",
                    "notes": "Either create or clone, not both.",
                    "typeName": "DEFAULT"
                },
                "index": {
                    "description": "Volume Group index of the disk",
                    "format": "int32",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "volume_group_uuid": {
                    "type": "string"
                }
            }
        },
        "create.dto.acropolis.volumegroups.VolumeGroupAttachExternalDTO": {
            "id": "create.dto.acropolis.volumegroups.VolumeGroupAttachExternalDTO",
            "required": [],
            "properties": {
                "iscsi_client": {
                    "$ref": "create.dto.acropolis.volumegroups.IscsiClientDTO",
                    "description": "List of supported authentication types",
                    "typeName": "DEFAULT"
                },
                "iscsi_client_ip": {
                    "description": "iSCSI client ip address",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "logical_timestamp": {
                    "description": "The logical timestamp",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "operation": {
                    "enum": [
                        "ATTACH",
                        "DETACH"
                    ],
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "create.dto.acropolis.volumegroups.VolumeGroupAttachVmDTO": {
            "id": "create.dto.acropolis.volumegroups.VolumeGroupAttachVmDTO",
            "required": [
                "vm_uuid"
            ],
            "properties": {
                "index": {
                    "description": "Volume Group index of the disk",
                    "format": "int32",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "logical_timestamp": {
                    "description": "The volume group logical timestamp",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "operation": {
                    "enum": [
                        "ATTACH",
                        "DETACH"
                    ],
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                },
                "vm_logical_timestamp": {
                    "description": "The virtual machine logical timestamp",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "vm_uuid": {
                    "description": "Virtual machine UUID",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "create.dto.acropolis.volumegroups.VolumeGroupCloneDTO": {
            "id": "create.dto.acropolis.volumegroups.VolumeGroupCloneDTO",
            "required": [],
            "properties": {
                "enabled_authentications": {
                    "description": "List of supported authentication types",
                    "items": {
                        "$ref": "create.dto.acropolis.volumegroups.ClientAuthenticationDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "iscsi_target": {
                    "description": "iSCSI target name for the clone (optional)",
                    "type": "string",
                    "typeName": "ISCSI_TARGET"
                },
                "iscsi_target_prefix": {
                    "description": "iSCSI target prefix for the clone (optional)",
                    "type": "string",
                    "typeName": "ACRO_NAME"
                },
                "logical_timestamp": {
                    "description": "The logical timestamp",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Name of the clone (optional)",
                    "type": "string",
                    "typeName": "ACRO_NAME"
                },
                "uuid": {
                    "description": "UUID of the cloned Volume Group (optional)",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "create.dto.acropolis.volumegroups.VolumeGroupCreateDTO": {
            "id": "create.dto.acropolis.volumegroups.VolumeGroupCreateDTO",
            "required": [
                "name"
            ],
            "properties": {
                "attached_clients": {
                    "description": "List of the attached clients",
                    "items": {
                        "$ref": "create.dto.acropolis.volumegroups.IscsiClientDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "description": {
                    "description": "Volume Group description",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "disk_list": {
                    "description": "Volume Group disk specification",
                    "items": {
                        "$ref": "create.dto.acropolis.volumegroups.VolumeDiskCreateSpecDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "enabled_authentications": {
                    "description": "List of supported authentication types",
                    "items": {
                        "$ref": "create.dto.acropolis.volumegroups.ClientAuthenticationDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "flash_mode_enabled": {
                    "description": "Flash mode enabled or not for the volume group",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_shared": {
                    "description": "True or false indicating whether volume is shared across multiple iSCSI initiators",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "iscsi_target": {
                    "description": "iSCSI target name",
                    "type": "string",
                    "typeName": "ISCSI_TARGET"
                },
                "iscsi_target_prefix": {
                    "description": "iSCSI target prefix name",
                    "type": "string",
                    "typeName": "ACRO_NAME"
                },
                "name": {
                    "description": "Volume Group name",
                    "type": "string",
                    "typeName": "ACRO_NAME"
                },
                "uuid": {
                    "description": "Volume Group UUID (optional)",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "create.dto.uhura.VmDiskCloneDTO": {
            "id": "create.dto.uhura.VmDiskCloneDTO",
            "required": [
                "disk_address"
            ],
            "properties": {
                "disk_address": {
                    "$ref": "create.dto.acropolis.VMDiskAddressDTO",
                    "description": "Address of the source disk or image from which to clone. Disk address is represented by vmdisk_uuid or ndfs_filepath.",
                    "notes": "Address of the source disk or image from which to clone.",
                    "typeName": "DEFAULT"
                },
                "minimum_size": {
                    "description": "The minimum size of the resulting clone in bytes. This should only be specified if 'vmdisk_uuid' is specified.",
                    "format": "int64",
                    "notes": "The minimum size of the resulting clone in bytes.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "snapshot_group_uuid": {
                    "description": "UUID of the snapshot consistency group from which to clone a snapshot vmdisk.",
                    "notes": "UUID of the snapshot consistency group from which to clone a snapshot vmdisk.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "storage_container_uuid": {
                    "description": "The Uuid of the storage container in which the specified image or vmdisk is stored. If the source is a vmdisk, this field is recommended, but optional. If the source is a snapshot vmdisk, this field is required. If the source is an absolute image path, this field is prohibited. If the source is a relative image path, this field is required.",
                    "notes": "The Uuid of the storage container in which the specified image or vmdisk is stored.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "create.dto.uhura.VmDiskCreateDTO": {
            "id": "create.dto.uhura.VmDiskCreateDTO",
            "required": [],
            "properties": {
                "size": {
                    "description": "Size of the Virtual Machine disk to be created in bytes.",
                    "format": "int64",
                    "notes": "Size of the Virtual Machine disk to be created in bytes.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "description": "UUID of container to create disk in. If this is specified, then Container Name and ID should not be specified.",
                    "notes": "UUID of container to create disk in.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "delete.dto.acropolis.ReturnValueDTO$TaskIdDTO": {
            "id": "delete.dto.acropolis.ReturnValueDTO$TaskIdDTO",
            "required": [],
            "properties": {
                "task_uuid": {
                    "description": "UUID of the task.",
                    "notes": "UUID of the task.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.acropolis.volumegroups.VolumeGroupConfigDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.acropolis.volumegroups.VolumeGroupConfigDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.acropolis.volumegroups.VolumeGroupConfigDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.base.StatsResponse": {
            "id": "get.base.StatsResponse",
            "required": [],
            "properties": {
                "stats_specific_responses": {
                    "items": {
                        "$ref": "get.base.StatsResponse$StatsSpecificResponse"
                    },
                    "type": "array"
                }
            }
        },
        "get.base.StatsResponse$StatsSpecificResponse": {
            "id": "get.base.StatsResponse$StatsSpecificResponse",
            "required": [],
            "properties": {
                "interval_in_secs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "metric": {
                    "type": "string"
                },
                "start_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "successful": {
                    "type": "boolean"
                },
                "values": {
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.acropolis.volumegroups.ClientAuthenticationDTO": {
            "id": "get.dto.acropolis.volumegroups.ClientAuthenticationDTO",
            "required": [],
            "properties": {
                "auth_type": {
                    "description": "Type of the authentication",
                    "enum": [
                        "CHAP",
                        "NONE"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "password": {
                    "description": "Password of the supported authentication type",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.acropolis.volumegroups.VolumeAttachmentDTO": {
            "id": "get.dto.acropolis.volumegroups.VolumeAttachmentDTO",
            "required": [],
            "properties": {
                "client_uuid": {
                    "description": "UUID of the iscsi client",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "enabled_authentications": {
                    "description": "List of enabled authentications for the client",
                    "items": {
                        "$ref": "get.dto.acropolis.volumegroups.ClientAuthenticationDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "initiator_ip_address": {
                    "description": "Ip of the iscsi initiator",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "iscsi_initiator_name": {
                    "description": "Name of the iSCSI initiator",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vm_uuid": {
                    "description": "UUID of VM to which this volume is attached",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "get.dto.acropolis.volumegroups.VolumeDiskConfigDTO": {
            "id": "get.dto.acropolis.volumegroups.VolumeDiskConfigDTO",
            "required": [],
            "properties": {
                "flash_mode_enabled": {
                    "description": "Flash mode enabled or not for the disk",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "index": {
                    "description": "Volume Group index of the disk",
                    "format": "int32",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "storage_container_id": {
                    "description": "Storage Container ID of the volume where the disk resides",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "description": "Storage Container UUID of the volume where the disk resides",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vmdisk_size_bytes": {
                    "description": "Disk size in Bytes",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "vmdisk_size_mb": {
                    "description": "Disk size in MiB",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "vmdisk_uuid": {
                    "description": "UUID of the volume disk",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "get.dto.acropolis.volumegroups.VolumeGroupConfigDTO": {
            "id": "get.dto.acropolis.volumegroups.VolumeGroupConfigDTO",
            "required": [],
            "properties": {
                "attachment_list": {
                    "description": "Currently attached iSCSI initiators",
                    "items": {
                        "$ref": "get.dto.acropolis.volumegroups.VolumeAttachmentDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "description": {
                    "description": "Volume group description",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "disk_list": {
                    "description": "Ordered list of volume diskSpec",
                    "items": {
                        "$ref": "get.dto.acropolis.volumegroups.VolumeDiskConfigDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "enabled_authentications": {
                    "description": "List of supported authentication types",
                    "items": {
                        "$ref": "get.dto.acropolis.volumegroups.ClientAuthenticationDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "flash_mode_enabled": {
                    "description": "Flash mode enabled or not for the volume group",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_deleted": {
                    "description": "Whether the volume has been deleted",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_shared": {
                    "description": "Whether or not this volume can be shared",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "iscsi_target": {
                    "description": "iSCSI target name for attachment",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "last_modified_timestamp_usecs": {
                    "description": "Volume group last modified timestamp",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "logical_timestamp": {
                    "description": "Volume group logical timestamp",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Volume group name",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "Volume group UUID",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "update.dto.acropolis.VMDiskAddressDTO": {
            "id": "update.dto.acropolis.VMDiskAddressDTO",
            "required": [],
            "properties": {
                "device_bus": {
                    "description": "The device bus for the virtual disk device.Possible values are SCSI, IDE and PCI. Along with this the deviceIndex is used to specify a vdisk address. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "enum": [
                        "SCSI",
                        "IDE",
                        "PCI",
                        "SATA",
                        "SPAPR"
                    ],
                    "notes": "The device bus for the virtual disk device.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "device_index": {
                    "description": "Index of the device on the adapter type. If left unspecified, the system will allocate the next available slot on the default bus.",
                    "format": "int32",
                    "notes": "Index of the device on the adapter type.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "ndfs_filepath": {
                    "description": "NDFS path to existing virtual disk. This field will not be set when this message is used in a create mode.When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "NDFS path to existing virtual disk.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vmdisk_uuid": {
                    "description": "Virtual disk identifier. This field will not be set when this message is used in a create mode. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "Virtual disk identifier.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "volume_group_uuid": {
                    "type": "string"
                }
            }
        },
        "update.dto.acropolis.volumegroups.ClientAuthenticationDTO": {
            "id": "update.dto.acropolis.volumegroups.ClientAuthenticationDTO",
            "required": [],
            "properties": {
                "auth_type": {
                    "description": "Type of the authentication",
                    "enum": [
                        "CHAP",
                        "NONE"
                    ],
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "password": {
                    "description": "Password of the supported authentication type",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.acropolis.volumegroups.IscsiClientDTO": {
            "id": "update.dto.acropolis.volumegroups.IscsiClientDTO",
            "required": [
                "client_address"
            ],
            "properties": {
                "client_address": {
                    "description": "Unique identifier for the client, it can be either iqn or ip address",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "enabled_authentications": {
                    "description": "List of supported authentication types",
                    "items": {
                        "$ref": "update.dto.acropolis.volumegroups.ClientAuthenticationDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "Uuid of the iscsi client",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "update.dto.acropolis.volumegroups.VolumeDiskConfigDTO": {
            "id": "update.dto.acropolis.volumegroups.VolumeDiskConfigDTO",
            "required": [],
            "properties": {
                "flash_mode_enabled": {
                    "description": "Flash mode enabled or not for the disk",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.acropolis.volumegroups.VolumeDiskUpdateDTO": {
            "id": "update.dto.acropolis.volumegroups.VolumeDiskUpdateDTO",
            "required": [
                "index"
            ],
            "properties": {
                "clone": {
                    "$ref": "update.dto.uhura.VmDiskCloneDTO"
                },
                "flash_mode_enabled": {
                    "description": "Flash mode enabled or not for the volume",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "index": {
                    "description": "Volume Group index of the disk",
                    "format": "int32",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "upgrade_spec": {
                    "$ref": "update.dto.acropolis.volumegroups.VolumeDiskUpdateDTO$UpgradeSpec"
                },
                "volume_group_uuid": {
                    "type": "string"
                }
            }
        },
        "update.dto.acropolis.volumegroups.VolumeDiskUpdateDTO$UpgradeSpec": {
            "id": "update.dto.acropolis.volumegroups.VolumeDiskUpdateDTO$UpgradeSpec",
            "required": [],
            "properties": {
                "preserve_data": {
                    "description": "When set to true, re-size disk in place. Else, create a new disk by cloning from other disks or providing creation spec. True by default.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "size": {
                    "description": "Disk size in Bytes",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "size_mb": {
                    "description": "Disk size in MiB",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "description": "Re-creates the empty disk on specified container. Is mutually exclusive with the preserveData flag.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "update.dto.acropolis.volumegroups.VolumeGroupConfigDTO": {
            "id": "update.dto.acropolis.volumegroups.VolumeGroupConfigDTO",
            "required": [],
            "properties": {
                "enabled_authentications": {
                    "description": "List of supported authentication types",
                    "items": {
                        "$ref": "update.dto.acropolis.volumegroups.ClientAuthenticationDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "flash_mode_enabled": {
                    "description": "Flash mode enabled or not for the volume group",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.acropolis.volumegroups.VolumeGroupUpdateDTO": {
            "id": "update.dto.acropolis.volumegroups.VolumeGroupUpdateDTO",
            "required": [],
            "properties": {
                "attached_clients": {
                    "description": "List of the attached clients",
                    "items": {
                        "$ref": "update.dto.acropolis.volumegroups.IscsiClientDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "description": {
                    "description": "Volume Group description",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "enabled_authentications": {
                    "description": "List of supported authentication types",
                    "items": {
                        "$ref": "update.dto.acropolis.volumegroups.ClientAuthenticationDTO"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "flash_mode_enabled": {
                    "description": "Flash mode enabled or not for the volume group",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_shared": {
                    "description": "True or false indicating whether volume is shared across multiple iSCSI initiators",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "iscsi_target": {
                    "description": "iSCSI target name",
                    "type": "string",
                    "typeName": "ISCSI_TARGET"
                },
                "iscsi_target_prefix": {
                    "description": "iSCSI target prefix",
                    "type": "string",
                    "typeName": "ACRO_NAME"
                },
                "logical_timestamp": {
                    "description": "The logical timestamp",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Volume Group name",
                    "type": "string",
                    "typeName": "ACRO_NAME"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "update.dto.uhura.VmDiskCloneDTO": {
            "id": "update.dto.uhura.VmDiskCloneDTO",
            "required": [],
            "properties": {
                "disk_address": {
                    "$ref": "update.dto.acropolis.VMDiskAddressDTO",
                    "description": "Address of the source disk or image from which to clone. Disk address is represented by vmdisk_uuid or ndfs_filepath.",
                    "notes": "Address of the source disk or image from which to clone.",
                    "typeName": "DEFAULT"
                },
                "minimum_size": {
                    "description": "The minimum size of the resulting clone in bytes. This should only be specified if 'vmdisk_uuid' is specified.",
                    "format": "int64",
                    "notes": "The minimum size of the resulting clone in bytes.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "snapshot_group_uuid": {
                    "description": "UUID of the snapshot consistency group from which to clone a snapshot vmdisk.",
                    "notes": "UUID of the snapshot consistency group from which to clone a snapshot vmdisk.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "storage_container_uuid": {
                    "description": "The Uuid of the storage container in which the specified image or vmdisk is stored. If the source is a vmdisk, this field is recommended, but optional. If the source is a snapshot vmdisk, this field is required. If the source is an absolute image path, this field is prohibited. If the source is a relative image path, this field is required.",
                    "notes": "The Uuid of the storage container in which the specified image or vmdisk is stored.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        }
    }
}
{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/PrismGateway/services/rest/v2.0",
    "resourcePath": "/vstores",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/vstores/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of VStores.",
                    "notes": "Get the list of VStores configured in the cluster.",
                    "type": "get.base.EntityCollection&lt;get.dto.vstore.VStoreDTO&gt;",
                    "nickname": "getVStores",
                    "parameters": [
                        {
                            "name": "uuids",
                            "description": "VStore uuids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "names",
                            "description": "VStore names",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "include_deleted",
                            "description": "Include deleted",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vstores/{uuid}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get a VStore.",
                    "notes": "Get a VStore with the specified uuid.",
                    "type": "get.dto.vstore.VStoreDTO",
                    "nickname": "getVStoreByUuid",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of the VStore",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vstores/{uuid}/protect",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Protect a VStore.",
                    "notes": "Protect a VStore with the specified id.",
                    "type": "create.dto.vstore.VStoreDTO",
                    "nickname": "protectVStore",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of the VStore",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "vm_level_consistency",
                            "description": "Create vm level consistent snapshots for the vStore",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vstores/{uuid}/unprotect",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Unprotect a VStore.",
                    "notes": "Unprotect a VStore with the specified id.",
                    "type": "create.dto.vstore.VStoreDTO",
                    "nickname": "unProtectVStore",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of the VStore",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vstores/{uuid}/update_protection_mode",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Protect a VStore.",
                    "notes": "Protect a VStore with the specified uuid.",
                    "type": "update.dto.vstore.VStoreDTO",
                    "nickname": "updateProtection",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of the VStore",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "vm_level_consistency",
                            "description": "Create vm level consistent snapshots for the vStore",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "create.dto.vstore.VStoreDTO": {
            "id": "create.dto.vstore.VStoreDTO",
            "description": "vStore",
            "required": [
                "id",
                "name",
                "storage_container_id"
            ],
            "properties": {
                "backedup": {
                    "type": "boolean"
                },
                "id": {
                    "description": "Vstore id.",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "is_backup": {
                    "type": "boolean"
                },
                "marked_for_removal": {
                    "type": "boolean"
                },
                "name": {
                    "description": "Vstore name",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "protection_domain": {
                    "type": "string"
                },
                "storage_container_id": {
                    "description": "Storage Container with which vstore is associated with.",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.vstore.VStoreDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.vstore.VStoreDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.vstore.VStoreDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.dto.vstore.VStoreDTO": {
            "id": "get.dto.vstore.VStoreDTO",
            "description": "vStore",
            "required": [],
            "properties": {
                "backedup": {
                    "type": "boolean"
                },
                "id": {
                    "description": "Vstore id.",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "is_backup": {
                    "type": "boolean"
                },
                "marked_for_removal": {
                    "type": "boolean"
                },
                "name": {
                    "description": "Vstore name",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "protection_domain": {
                    "type": "string"
                },
                "storage_container_id": {
                    "description": "Storage Container with which vstore is associated with.",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                },
                "vm_level_consistent": {
                    "description": "Vm level consistent snapshots for the vStore",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.vstore.VStoreDTO": {
            "id": "update.dto.vstore.VStoreDTO",
            "description": "vStore",
            "required": [
                "id",
                "name",
                "storage_container_id"
            ],
            "properties": {
                "backedup": {
                    "type": "boolean"
                },
                "id": {
                    "description": "Vstore id.",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "is_backup": {
                    "type": "boolean"
                },
                "marked_for_removal": {
                    "type": "boolean"
                },
                "name": {
                    "description": "Vstore name",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "protection_domain": {
                    "type": "string"
                },
                "storage_container_id": {
                    "description": "Storage Container with which vstore is associated with.",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        }
    }
}