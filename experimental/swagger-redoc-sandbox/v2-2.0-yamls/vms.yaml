swagger: '2.0'
info:
  version: 'v2.0'
  title: Swagger API
basePath: /PrismGateway/services/rest/v2.0
schemes:
- https
consumes:
- application/json
produces:
- application/json
paths:
  /vms/:
    get:
      description: Get a list of Virtual Machines.
      summary: getVMs
      operationId: VmsGet
      produces:
      - application/json
      parameters:
      - name: include_vm_disk_config
        in: query
        required: false
        type: boolean
        description: Whether to include Virtual Machine disk information.
      - name: include_vm_nic_config
        in: query
        required: false
        type: boolean
        description: Whether to include network information.
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Get.base.entitycollection&lt;get.dto.uhura.vmconfigdto&gt;'
          examples: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    post:
      description: Create a Virtual Machine.
      summary: createVM
      operationId: VmsPost
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        description: Create a Virtual Machine
        schema:
          $ref: '#/definitions/Create.dto.uhura.vmconfigdto'
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Create.dto.acropolis.returnvaluedto$taskiddto'
          examples: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /vms/{uuid}:
    get:
      description: Get a list of Virtual Machines.
      summary: getVM
      operationId: VmsByUuidGet
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/uuid'
      - name: include_vm_disk_config
        in: query
        required: false
        type: boolean
        description: Whether to include Virtual Machine disk information.
      - name: include_vm_nic_config
        in: query
        required: false
        type: boolean
        description: Whether to include network information.
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Get.dto.uhura.vmconfigdto'
          examples: {}
        500:
          $ref: '#/responses/response_500'
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /vms/{uuid}/:
    put:
      description: Update a Virtual Machine.
      summary: updateVM
      operationId: VmsByUuidPut
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/uuid'
      - name: body
        in: body
        required: true
        description: Virtual Machine Update Info
        schema:
          $ref: '#/definitions/Update.dto.uhura.vmconfigdto'
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Update.dto.acropolis.returnvaluedto$taskiddto'
          examples: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    delete:
      description: Delete a Virtual Machine.
      summary: deleteVM
      operationId: VmsByUuidDelete
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/uuid'
      - name: delete_snapshots
        in: query
        required: false
        type: boolean
        description: Delete Virtual Machine snapshots
      - name: logical_timestamp
        in: query
        required: false
        type: integer
        format: int32
        description: The Virtual logical timestamp
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Delete.dto.acropolis.returnvaluedto$taskiddto'
          examples: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /vms/{uuid}/clone:
    post:
      description: Clone a Virtual Machine.
      summary: cloneVM
      operationId: VmsCloneByUuidPost
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/uuid'
      - name: body
        in: body
        required: false
        description: Clone a Virtual Machine
        schema:
          $ref: '#/definitions/Create.dto.acropolis.vmclonedto'
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Create.dto.acropolis.returnvaluedto$taskiddto'
          examples: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /vms/{uuid}/disks/attach:
    post:
      description: Attach disks to Virtual Machine.
      summary: attachVMDisk
      operationId: VmsDisksAttachByUuidPost
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/uuid'
      - name: body
        in: body
        required: true
        description: Info about the virtual disks or CD-Roms to be attached
        schema:
          $ref: '#/definitions/Create.dto.uhura.vmdiskattachdto'
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Create.dto.acropolis.returnvaluedto$taskiddto'
          examples: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /vms/{uuid}/disks/detach:
    post:
      description: Detach disks from Virtual Machine.
      summary: detachVMDisk
      operationId: VmsDisksDetachByUuidPost
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/uuid'
      - name: body
        in: body
        required: true
        description: Info about the virtual disks or CD-Roms to be detached
        schema:
          $ref: '#/definitions/Create.dto.uhura.vmdiskdetachdto'
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Create.dto.acropolis.returnvaluedto$taskiddto'
          examples: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /vms/{uuid}/manage_vm_guest_tools:
    post:
      description: Mount and unmount guest tools on a given Virtual Machine.
      summary: manageGuestTool
      operationId: VmsManageVmGuestToolsByUuidPost
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/uuid'
      - name: body
        in: body
        required: true
        description: VM Guest Tools Info
        schema:
          $ref: '#/definitions/Create.dto.uhura.vmguesttoolsdto'
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Create.dto.acropolis.returnvaluedto$taskiddto'
          examples: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /vms/{uuid}/nics/:
    get:
      description: Get list of NICs in a Virtual Machine.
      summary: getNics
      operationId: VmsNicsByUuidGet
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/uuid'
      - name: include_address_assignments
        in: query
        required: false
        type: boolean
        description: Include address assignments
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Get.base.entitycollection&lt;get.dto.acropolis.vmnicspecdto&gt;'
          examples: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    post:
      description: Add a NIC to a Virtual Machine.
      summary: createNic
      operationId: VmsNicsByUuidPost
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/uuid'
      - name: body
        in: body
        required: true
        description: NIC Config Info
        schema:
          $ref: '#/definitions/Create.dto.acropolis.vmniccreatedto'
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Create.dto.acropolis.returnvaluedto$taskiddto'
          examples: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /vms/{uuid}/restore:
    post:
      description: Restore a Virtual Machine to a snapshotted state.
      summary: restoreVM
      operationId: VmsRestoreByUuidPost
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/uuid'
      - name: body
        in: body
        required: true
        description: Restore Virtual Machine
        schema:
          $ref: '#/definitions/Create.dto.acropolis.vmrestoredto'
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Create.dto.acropolis.returnvaluedto$taskiddto'
          examples: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /vms/{uuid}/set_power_state/:
    post:
      description: Set power state of a Virtual Machine.
      summary: setPowerState
      operationId: VmsSetPowerStateByUuidPost
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/uuid'
      - name: body
        in: body
        required: true
        description: Virtual Machine Power State Info
        schema:
          $ref: '#/definitions/Create.dto.uhura.vmpowerstatedto'
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Create.dto.acropolis.returnvaluedto$taskiddto'
          examples: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /vms/{uuid}/nics/{mac_address}:
    get:
      description: Details of a NIC in a Virtual Machine.
      summary: getNic
      operationId: VmsNicsByVmUuidAndNicIdGet
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/uuid'
      - $ref: '#/parameters/mac_address'
      - name: include_address_assignments
        in: query
        required: false
        type: boolean
        description: Include address assignments
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Get.dto.acropolis.vmnicspecdto'
          examples: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    put:
      description: Update a NIC for a Virtual Machine.
      summary: updateNic
      operationId: VmsNicsByUuidAndNicIdPut
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/uuid'
      - $ref: '#/parameters/mac_address'
      - name: body
        in: body
        required: true
        description: NIC Config Update Info
        schema:
          $ref: '#/definitions/Update.dto.acropolis.vmnicupdatedto'
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Update.dto.acropolis.returnvaluedto$taskiddto'
          examples: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    delete:
      description: Delete a NIC from a Virtual Machine.
      summary: deleteNic
      operationId: VmsNicsByVmUuidAndNicIdDelete
      produces:
      - application/json
      parameters:
      - $ref: '#/parameters/uuid'
      - $ref: '#/parameters/mac_address'
      - name: vm_logical_timestamp
        in: query
        required: false
        type: integer
        format: int32
        description: Virtual Machine Logical timestamp
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Delete.dto.acropolis.returnvaluedto$taskiddto'
          examples: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
definitions:
  BootDeviceType:
    title: boot_device_type
    example: CDROM
    x-enum-elements:
    - name: CDROM
      description: ''
    - name: DISK
      description: ''
    - name: NIC
      description: ''
    type: string
    enum:
    - CDROM
    - DISK
    - NIC
  Create.dto.acropolis.bootconfigdto:
    title: create.dto.acropolis.BootConfigDTO
    type: object
    properties:
      boot_device_order:
        description: The boot device order. In case boot device is not specified or the specified boot device fails, VM will attempt to boot from connected devices in this device type order.
        type: array
        items:
          type: string
      boot_device_type:
        $ref: '#/definitions/BootDeviceType'
      disk_address:
        $ref: '#/definitions/Create.dto.acropolis.vmdiskaddressdto'
      mac_addr:
        description: Mac address of the NIC selected as boot device. At most one of this or diskAddress field should be set.
        type: string
  Create.dto.acropolis.filetoinjectdto:
    title: create.dto.acropolis.FileToInjectDTO
    type: object
    properties:
      destination_path:
        description: Destination path in the VM at which the file specified by source_path should be copied to.
        type: string
      source_path:
        description: 'ADSF path of the source file to inject in the VM. Must be of form: adsf:///<ctr>/...'
        type: string
  Create.dto.acropolis.returnvaluedto$taskiddto:
    title: create.dto.acropolis.ReturnValueDTO$TaskIdDTO
    type: object
    properties:
      task_uuid:
        description: UUID of the task.
        type: string
  Create.dto.acropolis.vmclonedto:
    title: create.dto.acropolis.VMCloneDTO
    type: object
    properties:
      spec_list:
        description: ''
        type: array
        items:
          $ref: '#/definitions/Create.dto.acropolis.vmclonespecdto'
      storage_container_uuid:
        description: UUID of the storage container on which the customization config iso files should be created. Must be provided when cluster has more than one container.
        type: string
      uuid:
        description: Uuid of the VM to clone.
        type: string
      vm_customization_config:
        $ref: '#/definitions/Create.dto.acropolis.vmcustomizationconfigdto'
    required:
    - spec_list
  Create.dto.acropolis.vmclonespecdto:
    title: create.dto.acropolis.VMCloneSpecDTO
    type: object
    properties:
      name:
        description: Named for the cloned Virtual Machine.
        type: string
      boot_config:
        $ref: '#/definitions/Create.dto.acropolis.bootconfigdto'
      memory_mb:
        description: Override the amount of RAM assigned to the clone.
        type: integer
        format: int64
      num_cores_per_vcpu:
        description: Override the number of cores assigned to each VCPUs.
        type: integer
        format: int64
      num_vcpus:
        description: Override the number of vCPUs assigned to the clone.
        type: integer
        format: int64
      override_network_config:
        description: Indicate whether the source Virtual Machine's/snapshot's network configuration with the one specified in the vmNics field. If false, the clone will inherit its basic network configuration from the source, minus MAC and IP address assignments.
        type: boolean
      uuid:
        description: A version 4 UUID that the client may specify for idempotence. This UUID will be used as the vm ID of the target vm.
        type: string
      vm_nics:
        description: Network configuration. Required when overrideNetworkConfig set to true.
        type: array
        items:
          $ref: '#/definitions/Create.dto.acropolis.vmnicspecdto'
    required:
    - name
  DatasourceType:
    title: datasource_type
    example: CONFIG_DRIVE_V2
    x-enum-elements:
    - name: CONFIG_DRIVE_V2
      description: ''
    type: string
    enum:
    - CONFIG_DRIVE_V2
  Create.dto.acropolis.vmcustomizationconfigdto:
    title: create.dto.acropolis.VMCustomizationConfigDTO
    type: object
    properties:
      datasource_type:
        $ref: '#/definitions/DatasourceType'
      files_to_inject_list:
        description: List of details about files to inject in the VM.
        type: array
        items:
          $ref: '#/definitions/Create.dto.acropolis.filetoinjectdto'
      fresh_install:
        description: Indicates whether the VM to be customized is meant to be freshly installed via Windows Setup from a Windows OS DVD or whether the VM will be configured from a 'Sysprepped' image in which case the setup was already complete.
        type: boolean
      userdata:
        description: Userdata in string format. Either Cloudinit format for customizing Linux VM or Sysprep format for customizing Windows VM. For cloudinit the userdata is usually a yaml file or shell script. For sysprep the userdata is usually a Xml representation of an unattend file in string format.Either this or userdataPath must be provided
        type: string
      userdata_path:
        description: Userdata source path. Must begin with adsf:///<ctr>.For cloudinit usually a yaml file or shell script is provided. For sysprep usually an unattend file or answer file is provided. Either this or userdata must be provided
        type: string
  DeviceBus:
    title: device_bus
    example: SCSI
    x-enum-elements:
    - name: SCSI
      description: ''
    - name: IDE
      description: ''
    - name: PCI
      description: ''
    - name: SATA
      description: ''
    - name: SPAPR
      description: ''
    type: string
    enum:
    - SCSI
    - IDE
    - PCI
    - SATA
    - SPAPR
  Create.dto.acropolis.vmdiskaddressdto:
    title: create.dto.acropolis.VMDiskAddressDTO
    type: object
    properties:
      device_bus:
        $ref: '#/definitions/DeviceBus'
      device_index:
        description: Index of the device on the adapter type. If left unspecified, the system will allocate the next available slot on the default bus.
        type: integer
        format: int32
      ndfs_filepath:
        description: NDFS path to existing virtual disk. This field will not be set when this message is used in a create mode.When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.
        type: string
      vmdisk_uuid:
        description: Virtual disk identifier. This field will not be set when this message is used in a create mode. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.
        type: string
      volume_group_uuid:
        description: ''
        type: string
  Create.dto.acropolis.vmniccreatedto:
    title: create.dto.acropolis.VMNicCreateDTO
    type: object
    properties:
      spec_list:
        description: List of specification for NICS to add to the Virtual Machine.
        type: array
        items:
          $ref: '#/definitions/Create.dto.acropolis.vmnicspecdto'
      uuid:
        description: UUID of the VM to create NIC on.
        type: string
    required:
    - spec_list
  AdapterType:
    title: adapter_type
    example: E1000
    x-enum-elements:
    - name: E1000
      description: ''
    - name: E1000e
      description: ''
    - name: PCNet32
      description: ''
    - name: Vmxnet
      description: ''
    - name: Vmxnet2
      description: ''
    - name: Vmxnet3
      description: ''
    - name: Unsupported
      description: ''
    type: string
    enum:
    - E1000
    - E1000e
    - PCNet32
    - Vmxnet
    - Vmxnet2
    - Vmxnet3
    - Unsupported
  Create.dto.acropolis.vmnicspecdto:
    title: create.dto.acropolis.VMNicSpecDTO
    type: object
    properties:
      network_uuid:
        description: The network to which the NIC is attached
        type: string
      adapter_type:
        $ref: '#/definitions/AdapterType'
      mac_address:
        description: The MAC address of the NIC
        type: string
      model:
        description: Virtual hardware model.
        type: string
      request_ip:
        description: >-
          If request_ip is true

          If 'requestedIpAddress' is set then request that IP from the network. If it's a managed network then request a dynamic IP from the network. Otherwise don't request an IP. If requestIp is false, then don't request an IP at all, regardless of whether or not the 'requestedIpAddress' is set and whether or the network is managed or not.
        type: boolean
      requested_ip_address:
        description: Requested IP address.
        type: string
    required:
    - network_uuid
  Create.dto.acropolis.vmrestoredto:
    title: create.dto.acropolis.VMRestoreDTO
    type: object
    properties:
      snapshot_uuid:
        description: The version 4 UUID of the snapshot from which to restore
        type: string
      restore_network_configuration:
        description: Whether to reset the VM's current networking configuration. If this flag is set, the VM's current network adapters will be replaced with the network adapters specified in the snapshot. Otherwise, the VM's current networking adapters will be retained, and the network adapters specified in the snapshot will be ignored. This is set to 'true' by default.
        type: boolean
      uuid:
        description: UUID of the VM.
        type: string
    required:
    - snapshot_uuid
  GpuType:
    title: gpu_type
    example: PASS_THROUGH_GRAPHICS
    x-enum-elements:
    - name: PASS_THROUGH_GRAPHICS
      description: ''
    - name: PASS_THROUGH_COMPUTE
      description: ''
    - name: VIRTUAL
      description: ''
    type: string
    enum:
    - PASS_THROUGH_GRAPHICS
    - PASS_THROUGH_COMPUTE
    - VIRTUAL
  GpuVendor:
    title: gpu_vendor
    example: NVIDIA
    x-enum-elements:
    - name: NVIDIA
      description: ''
    - name: INTEL
      description: ''
    - name: AMD
      description: ''
    type: string
    enum:
    - NVIDIA
    - INTEL
    - AMD
  Create.dto.uhura.gpuconfigdto:
    title: create.dto.uhura.GPUConfigDTO
    type: object
    properties:
      device_id:
        description: Device ID of the GPU resource.
        type: integer
        format: int32
      gpu_type:
        $ref: '#/definitions/GpuType'
      gpu_vendor:
        $ref: '#/definitions/GpuVendor'
    required:
    - device_id
    - gpu_type
  Create.dto.uhura.vmdiskattachdto:
    title: create.dto.uhura.VMDiskAttachDTO
    type: object
    properties:
      vm_disks:
        description: Information about the virtual disk or CD-ROM to be attached or detached.
        type: array
        items:
          $ref: '#/definitions/Create.dto.uhura.vmdiskdto'
      uuid:
        description: UUID of the VM.
        type: string
    required:
    - vm_disks
  Create.dto.uhura.vmdiskdto:
    title: create.dto.uhura.VMDiskDTO
    type: object
    properties:
      disk_address:
        $ref: '#/definitions/Create.dto.acropolis.vmdiskaddressdto'
      is_cdrom:
        description: Whether this is a CD-ROM drive. The default value is 'false'
        type: boolean
      is_empty:
        description: Whether the drive should be empty. This field only applies to CD-ROM drives, otherwise it is ignored. If this field is set to true and the drive is a CD-ROM, then the disk creation field 'vmDiskCreate' should be ignored. The default value is 'false'
        type: boolean
      is_scsi_pass_through:
        description: Whether the SCSI disk should be attached in passthrough mode to pass all SCSI commands directly to Stargate via iSCSI. The default value is true.
        type: boolean
      is_thin_provisioned:
        description: Whether the disk is thin provisioned. This field applies to only ESX managed VMs.
        type: boolean
      vm_disk_clone:
        $ref: '#/definitions/Create.dto.uhura.vmdiskclonedto'
      vm_disk_create:
        $ref: '#/definitions/Create.dto.uhura.vmdiskcreatedto'
  Create.dto.uhura.vmdiskdetachdto:
    title: create.dto.uhura.VMDiskDetachDTO
    type: object
    properties:
      vm_disks:
        description: Information about the virtual disk or CD-ROM to be detached.
        type: array
        items:
          $ref: '#/definitions/Create.dto.uhura.vmdiskinfodto'
      uuid:
        description: UUID of the VM.
        type: string
    required:
    - vm_disks
  Transition:
    title: transition
    example: ON
    x-enum-elements:
    - name: ON
      description: ''
    - name: OFF
      description: ''
    - name: POWERCYCLE
      description: ''
    - name: RESET
      description: ''
    - name: PAUSE
      description: ''
    - name: SUSPEND
      description: ''
    - name: RESUME
      description: ''
    - name: ACPI_SHUTDOWN
      description: ''
    - name: ACPI_REBOOT
      description: ''
    type: string
    enum:
    - ON
    - OFF
    - POWERCYCLE
    - RESET
    - PAUSE
    - SUSPEND
    - RESUME
    - ACPI_SHUTDOWN
    - ACPI_REBOOT
  Create.dto.uhura.vmpowerstatedto:
    title: create.dto.uhura.VMPowerStateDTO
    type: object
    properties:
      transition:
        $ref: '#/definitions/Transition'
      host_uuid:
        description: Explicit version 4 host UUID on which to power on the VM. This parameter is only honored for kPowerOn, or kPowerCycle when change host is also requested explicitly.
        type: string
      uuid:
        description: Uuid of the VM.
        type: string
    required:
    - transition
  Create.dto.uhura.vmconfigdto:
    title: create.dto.uhura.VmConfigDTO
    type: object
    properties:
      memory_mb:
        description: RAM in megabytes assigned to the Virtual Machine.
        type: integer
        format: int64
      name:
        description: The Virtual Machine human readable name.
        type: string
      num_vcpus:
        description: Number of VCPUs assigned to the Virtual Machine.
        type: integer
        format: int32
      boot:
        $ref: '#/definitions/Create.dto.acropolis.bootconfigdto'
      description:
        description: Description for the Virtual Machine.
        type: string
      guest_driver_version:
        description: Last determined guest driver version.
        type: string
      guest_os:
        description: Guest OS for VMWare. Applicable only for ESX Vms.
        type: string
      ha_priority:
        description: Priority for restarting in case of HA event.
        type: integer
        format: int64
      memory_reservation_mb:
        description: RAM, in megabytes reserved for the Virtual Machine.
        type: integer
        format: int64
      num_cores_per_vcpu:
        description: Number of cores assigned to each VCPUs.
        type: integer
        format: int32
      storage_container_uuid:
        description: Storage container on which the VM configuration files should be created. Required for ESX, Hyper-V. Not applicable for other hypervisors.
        type: string
      timezone:
        description: The timezone for the VM's hardware clock. Any updates to the timezone will be applied during the next VM power cycle (but not reset). The default is UTC.
        type: string
      uuid:
        description: UUID of the VM.
        type: string
      vcpu_reservation_hz:
        description: CPU, in Hertz reserved for the Virtual Machine.
        type: integer
        format: int64
      vm_customization_config:
        $ref: '#/definitions/Create.dto.acropolis.vmcustomizationconfigdto'
      vm_disks:
        description: List of disk specification to add to the Virtual Machine.
        type: array
        items:
          $ref: '#/definitions/Create.dto.uhura.vmdiskdto'
      vm_features:
        $ref: '#/definitions/Java.util.map&lt;create.dto.uhura.vmconfigdto$vmfeature,Java.lang.boolean&gt;'
      vm_gpus:
        description: List of GPUs requested for the Virtual Machine. If "gpus_assigned" is True, then this field represents the assigned physical GPUs.
        type: array
        items:
          $ref: '#/definitions/Create.dto.uhura.gpuconfigdto'
      vm_nics:
        description: List of nics to be added to the Virtual Machine.
        type: array
        items:
          $ref: '#/definitions/Create.dto.acropolis.vmnicspecdto'
    required:
    - memory_mb
    - name
    - num_vcpus
  Create.dto.uhura.vmdiskclonedto:
    title: create.dto.uhura.VmDiskCloneDTO
    type: object
    properties:
      disk_address:
        $ref: '#/definitions/Create.dto.acropolis.vmdiskaddressdto'
      minimum_size:
        description: The minimum size of the resulting clone in bytes. This should only be specified if 'vmdisk_uuid' is specified.
        type: integer
        format: int64
      snapshot_group_uuid:
        description: UUID of the snapshot consistency group from which to clone a snapshot vmdisk.
        type: string
      storage_container_uuid:
        description: The Uuid of the storage container in which the specified image or vmdisk is stored. If the source is a vmdisk, this field is recommended, but optional. If the source is a snapshot vmdisk, this field is required. If the source is an absolute image path, this field is prohibited. If the source is a relative image path, this field is required.
        type: string
    required:
    - disk_address
  Create.dto.uhura.vmdiskcreatedto:
    title: create.dto.uhura.VmDiskCreateDTO
    type: object
    properties:
      size:
        description: Size of the Virtual Machine disk to be created in bytes.
        type: integer
        format: int64
      storage_container_uuid:
        description: UUID of container to create disk in. If this is specified, then Container Name and ID should not be specified.
        type: string
  Create.dto.uhura.vmdiskinfodto:
    title: create.dto.uhura.VmDiskInfoDTO
    type: object
    properties:
      disk_address:
        $ref: '#/definitions/Create.dto.acropolis.vmdiskaddressdto'
      is_cdrom:
        description: Whether this is a CD-ROM drive.
        type: boolean
      is_empty:
        description: Whether the drive is empty. This field only applies to CD-ROM drives.
        type: boolean
      is_scsi_passthrough:
        description: Whether this SCSI disk is attached in passthrough mode to pass all SCSI commands directly to Stargate via iSCSI.
        type: boolean
      is_thin_provisioned:
        description: 'Whether the disk is thin provisioned. Note: This field applies to only ESX managed VMs.'
        type: boolean
      shared:
        description: Whether disk is shared with others VMs or not.
        type: boolean
      size:
        description: The size of the disk in bytes
        type: integer
        format: int64
      source_disk_address:
        $ref: '#/definitions/Create.dto.acropolis.vmdiskaddressdto'
      storage_container_uuid:
        description: The container in which the backing vmdisk is provisioned. This field is unset when the drive is empty.
        type: string
    required:
    - disk_address
  Operation:
    title: operation
    example: MOUNT
    x-enum-elements:
    - name: MOUNT
      description: ''
    - name: UNMOUNT
      description: ''
    type: string
    enum:
    - MOUNT
    - UNMOUNT
  Create.dto.uhura.vmguesttoolsdto:
    title: create.dto.uhura.VmGuestToolsDTO
    type: object
    properties:
      operation:
        $ref: '#/definitions/Operation'
      override_guest:
        description: Override the Guest OS CDROM lock.
        type: boolean
      uuid:
        description: UUID of the VM.
        type: string
    required:
    - operation
  Delete.dto.acropolis.returnvaluedto$taskiddto:
    title: delete.dto.acropolis.ReturnValueDTO$TaskIdDTO
    type: object
    properties:
      task_uuid:
        description: UUID of the task.
        type: string
  Get.base.entitycollection&lt;get.dto.acropolis.vmnicspecdto&gt;:
    title: get.base.EntityCollection&lt;get.dto.acropolis.VMNicSpecDTO&gt;
    type: object
    properties:
      entities:
        description: ''
        type: array
        items:
          $ref: '#/definitions/Get.dto.acropolis.vmnicspecdto'
      error_info:
        $ref: '#/definitions/Get.base.errorinfo'
      metadata:
        $ref: '#/definitions/Get.base.metadata'
  Get.base.entitycollection&lt;get.dto.uhura.vmconfigdto&gt;:
    title: get.base.EntityCollection&lt;get.dto.uhura.VmConfigDTO&gt;
    type: object
    properties:
      entities:
        description: ''
        type: array
        items:
          $ref: '#/definitions/Get.dto.uhura.vmconfigdto'
      error_info:
        $ref: '#/definitions/Get.base.errorinfo'
      metadata:
        $ref: '#/definitions/Get.base.metadata'
  Get.base.errorinfo:
    title: get.base.ErrorInfo
    type: object
    properties:
      count:
        description: ''
        type: integer
        format: int64
      entity_list:
        description: ''
        type: array
        items:
          type: string
      message:
        description: ''
        type: string
  Get.base.metadata:
    title: get.base.Metadata
    type: object
    properties:
      count:
        description: ''
        type: integer
        format: int32
      end_index:
        description: ''
        type: integer
        format: int32
      filter_criteria:
        description: ''
        type: string
      grand_total_entities:
        description: ''
        type: integer
        format: int32
      next_cursor:
        description: ''
        type: string
      page:
        description: ''
        type: integer
        format: int32
      previous_cursor:
        description: ''
        type: string
      search_string:
        description: ''
        type: string
      sort_criteria:
        description: ''
        type: string
      start_index:
        description: ''
        type: integer
        format: int32
      total_entities:
        description: ''
        type: integer
        format: int32
  Get.dto.acropolis.bootconfigdto:
    title: get.dto.acropolis.BootConfigDTO
    type: object
    properties:
      boot_device_order:
        description: The boot device order. In case boot device is not specified or the specified boot device fails, VM will attempt to boot from connected devices in this device type order.
        type: array
        items:
          type: string
      boot_device_type:
        $ref: '#/definitions/BootDeviceType'
      disk_address:
        $ref: '#/definitions/Get.dto.acropolis.vmdiskaddressdto'
      mac_addr:
        description: Mac address of the NIC selected as boot device. At most one of this or diskAddress field should be set.
        type: string
  Get.dto.acropolis.filetoinjectdto:
    title: get.dto.acropolis.FileToInjectDTO
    type: object
    properties:
      destination_path:
        description: Destination path in the VM at which the file specified by source_path should be copied to.
        type: string
      source_path:
        description: 'ADSF path of the source file to inject in the VM. Must be of form: adsf:///<ctr>/...'
        type: string
  Get.dto.acropolis.vmcustomizationconfigdto:
    title: get.dto.acropolis.VMCustomizationConfigDTO
    type: object
    properties:
      datasource_type:
        $ref: '#/definitions/DatasourceType'
      files_to_inject_list:
        description: List of details about files to inject in the VM.
        type: array
        items:
          $ref: '#/definitions/Get.dto.acropolis.filetoinjectdto'
      fresh_install:
        description: Indicates whether the VM to be customized is meant to be freshly installed via Windows Setup from a Windows OS DVD or whether the VM will be configured from a 'Sysprepped' image in which case the setup was already complete.
        type: boolean
      userdata:
        description: Userdata in string format. Either Cloudinit format for customizing Linux VM or Sysprep format for customizing Windows VM. For cloudinit the userdata is usually a yaml file or shell script. For sysprep the userdata is usually a Xml representation of an unattend file in string format.Either this or userdataPath must be provided
        type: string
      userdata_path:
        description: Userdata source path. Must begin with adsf:///<ctr>.For cloudinit usually a yaml file or shell script is provided. For sysprep usually an unattend file or answer file is provided. Either this or userdata must be provided
        type: string
  Get.dto.acropolis.vmdiskaddressdto:
    title: get.dto.acropolis.VMDiskAddressDTO
    type: object
    properties:
      device_bus:
        $ref: '#/definitions/DeviceBus'
      device_index:
        description: Index of the device on the adapter type. If left unspecified, the system will allocate the next available slot on the default bus.
        type: integer
        format: int32
      disk_label:
        description: Information about attached disk. Disk label (for example, scsi0:0) where the virtual disk was attached. This indicates the location of the virtual disk within the VM.
        type: string
      is_cdrom:
        description: Whether this is a CD-ROM drive.
        type: boolean
      ndfs_filepath:
        description: NDFS path to existing virtual disk. This field will not be set when this message is used in a create mode.When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.
        type: string
      vmdisk_uuid:
        description: Virtual disk identifier. This field will not be set when this message is used in a create mode. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.
        type: string
      volume_group_uuid:
        description: ''
        type: string
  Get.dto.acropolis.vmnicspecdto:
    title: get.dto.acropolis.VMNicSpecDTO
    type: object
    properties:
      adapter_type:
        $ref: '#/definitions/AdapterType'
      ip_address:
        description: IP address for the NIC. Includes both Acropolis assigned IP address as well as learned IP address from thirdparty networks.
        type: string
      mac_address:
        description: The MAC address of the NIC
        type: string
      model:
        description: Virtual hardware model.
        type: string
      network_uuid:
        description: The network to which the NIC is attached
        type: string
      port_id:
        description: The port id for ESX networks.
        type: string
      request_ip:
        description: >-
          If request_ip is true

          If 'requestedIpAddress' is set then request that IP from the network. If it's a managed network then request a dynamic IP from the network. Otherwise don't request an IP. If requestIp is false, then don't request an IP at all, regardless of whether or not the 'requestedIpAddress' is set and whether or the network is managed or not.
        type: boolean
      requested_ip_address:
        description: Requested IP address.
        type: string
  GpuMode:
    title: gpu_mode
    example: UNUSED
    x-enum-elements:
    - name: UNUSED
      description: ''
    - name: USED_FOR_PASSTHROUGH
      description: ''
    - name: USED_FOR_VIRTUAL
      description: ''
    type: string
    enum:
    - UNUSED
    - USED_FOR_PASSTHROUGH
    - USED_FOR_VIRTUAL
  Get.dto.uhura.gpuconfigdto:
    title: get.dto.uhura.GPUConfigDTO
    type: object
    properties:
      assignable:
        description: Whether the GPU can be assigned to a Virtual Machine.
        type: boolean
      device_id:
        description: Device ID of the GPU resource.
        type: integer
        format: int32
      device_name:
        description: Vendor device name of the GPU resource.
        type: string
      fraction:
        description: Fraction of the physical GPU. Only applicable for a vGPU instance.
        type: integer
        format: int32
      frame_buffer_size_bytes:
        description: GPU framebuffer size in bytes.
        type: integer
        format: int64
      gpu_mode:
        $ref: '#/definitions/GpuMode'
      gpu_profile:
        description: Profile of the GPU.
        type: string
      gpu_type:
        $ref: '#/definitions/GpuType'
      gpu_vendor:
        $ref: '#/definitions/GpuVendor'
      guest_driver_version:
        description: Last determined guest driver version.
        type: string
      in_use:
        description: Whether the GPU resource is in use or not.
        type: boolean
      licenses:
        description: List of license types associated with this GPU.
        type: array
        items:
          type: string
      max_resolution:
        description: Maximum resolution per display heads.
        type: string
      num_virtual_display_heads:
        description: Number of supported virtual display heads.
        type: integer
        format: int32
      numa_node:
        description: The NUMA node where the GPU belongs to.
        type: integer
        format: int32
      sbdf:
        description: Unique device information for the GPU resource.
        type: string
      vm_uuids:
        description: List of UUIDs of the Virtual Machines where the GPU resource is assigned.
        type: array
        items:
          type: string
  Get.dto.uhura.serialportconfigdto:
    title: get.dto.uhura.SerialPortConfigDTO
    type: object
    properties:
      index:
        description: The serial port index. Generally limited to the range [0..3], corresponding to COM1 through COM4.
        type: integer
        format: int32
      type:
        description: |
          The backing type for this serial port. Possible values- 
          null(The serial device is present, but has no backing), 
          server(The serial device is accessible via a websocket.) 
          (Acceptable values are NULL, SERVER)
        example: 'NULL'
        type: string
        default: 'NULL'
  power_state:
    title: power_state
    example: UNKNOWN
    x-enum-elements:
    - name: UNKNOWN
      description: ''
    - name: OFF
      description: ''
    - name: POWERING_ON
      description: ''
    - name: ON
      description: ''
    - name: SHUTTING_DOWN
      description: ''
    - name: POWERING_OFF
      description: ''
    - name: PAUSING
      description: ''
    - name: PAUSED
      description: ''
    - name: SUSPENDING
      description: ''
    - name: SUSPENDED
      description: ''
    - name: RESUMING
      description: ''
    - name: RESETTING
      description: ''
    - name: MIGRATING
      description: ''
    type: string
    enum:
    - on
    - off
    - UNKNOWN
    - OFF
    - POWERING_ON
    - ON
    - SHUTTING_DOWN
    - POWERING_OFF
    - PAUSING
    - PAUSED
    - SUSPENDING
    - SUSPENDED
    - RESUMING
    - RESETTING
    - MIGRATING
  ToolsRunningStatus:
    title: tools_running_status
    example: UNKNOWN
    x-enum-elements:
    - name: UNKNOWN
      description: ''
    - name: GUEST_TOOLS_EXECUTING_SCRIPTS
      description: ''
    - name: GUEST_TOOLS_NOT_RUNNING
      description: ''
    - name: GUEST_TOOLS_RUNNING
      description: ''
    type: string
    enum:
    - UNKNOWN
    - GUEST_TOOLS_EXECUTING_SCRIPTS
    - GUEST_TOOLS_NOT_RUNNING
    - GUEST_TOOLS_RUNNING
  Get.dto.uhura.vmconfigdto:
    title: get.dto.uhura.VmConfigDTO
    type: object
    properties:
      allow_live_migrate:
        description: Indicates whether the Virtual Machine can be live migrated or not.
        type: boolean
      boot:
        $ref: '#/definitions/Get.dto.acropolis.bootconfigdto'
      cbr_not_capable_reason:
        description: If set to a non-empty string, this VM should be considered incompatible with DR workflows. Applicable only for AHV VMs. In the future, it will be removed in favor of using tags for identifying service VMs.
        type: string
      description:
        description: Description for the Virtual Machine.
        type: string
      gpus_assigned:
        description: Indicates whether the requested GPUs have been assigned to the Virtual Machine or not.
        type: boolean
      guest_driver_version:
        description: Last determined guest driver version.
        type: string
      guest_os:
        description: Guest OS for VMWare. Applicable only for ESX Vms.
        type: string
      ha_priority:
        description: Priority for restarting in case of HA event.
        type: integer
        format: int64
      host_uuid:
        description: A version 4 UUID identifying the host on which the Virtual Machine is currently running. If Virtual Machine is powered off, then this field is empty.
        type: string
      memory_mb:
        description: RAM in megabytes assigned to the Virtual Machine.
        type: integer
        format: int64
      memory_reservation_mb:
        description: RAM, in megabytes reserved for the Virtual Machine.
        type: integer
        format: int64
      name:
        description: The Virtual Machine human readable name.
        type: string
      num_cores_per_vcpu:
        description: Number of cores assigned to each VCPUs.
        type: integer
        format: int32
      num_vcpus:
        description: Number of VCPUs assigned to the Virtual Machine.
        type: integer
        format: int32
      power_state:
        $ref: '#/definitions/power_state'
      serial_ports:
        description: Virtual serial ports.
        type: array
        items:
          $ref: '#/definitions/Get.dto.uhura.serialportconfigdto'
      storage_container_uuid:
        description: Storage container on which the VM configuration files should be created. Required for ESX, Hyper-V. Not applicable for other hypervisors.
        type: string
      timezone:
        description: The timezone for the VM's hardware clock. Any updates to the timezone will be applied during the next VM power cycle (but not reset). The default is UTC.
        type: string
      tools_installer_mounted:
        description: The VM's current tools installer mount status.
        type: boolean
      tools_running_status:
        $ref: '#/definitions/ToolsRunningStatus'
      uuid:
        description: UUID of the VM.
        type: string
      vcpu_reservation_hz:
        description: CPU, in Hertz reserved for the Virtual Machine.
        type: integer
        format: int64
      vm_customization_config:
        $ref: '#/definitions/Get.dto.acropolis.vmcustomizationconfigdto'
      vm_disk_info:
        description: List of information of disks for a Virtual Machine.
        type: array
        items:
          $ref: '#/definitions/Get.dto.uhura.vmdiskinfodto'
      vm_features:
        description: List of features to be enabled for the Virtual Machine.
        $ref: '#/definitions/Java.util.map&lt;get.dto.uhura.vmconfigdto$vmfeature,Java.lang.boolean&gt;'
      vm_gpus:
        description: List of GPUs requested for the Virtual Machine. If "gpus_assigned" is True, then this field represents the assigned physical GPUs.
        type: array
        items:
          $ref: '#/definitions/Get.dto.uhura.gpuconfigdto'
      vm_logical_timestamp:
        description: Logical timestamp specified for consistency. This can be obtained from the Virtual Machine object.
        type: integer
        format: int64
      vm_nics:
        description: List of nics to be added to the Virtual Machine.
        type: array
        items:
          $ref: '#/definitions/Get.dto.acropolis.vmnicspecdto'
  Get.dto.uhura.vmdiskinfodto:
    title: get.dto.uhura.VmDiskInfoDTO
    type: object
    properties:
      disk_address:
        $ref: '#/definitions/Get.dto.acropolis.vmdiskaddressdto'
      flash_mode_enabled:
        description: Whether the flash mode is enabled for this disk or not.
        type: boolean
      is_cdrom:
        description: Whether this is a CD-ROM drive.
        type: boolean
      is_empty:
        description: Whether the drive is empty. This field only applies to CD-ROM drives.
        type: boolean
      is_scsi_passthrough:
        description: Whether this SCSI disk is attached in passthrough mode to pass all SCSI commands directly to Stargate via iSCSI.
        type: boolean
      is_thin_provisioned:
        description: 'Whether the disk is thin provisioned. Note: This field applies to only ESX managed VMs.'
        type: boolean
      shared:
        description: Whether disk is shared with others VMs or not.
        type: boolean
      size:
        description: The size of the disk in bytes
        type: integer
        format: int64
      source_disk_address:
        $ref: '#/definitions/Get.dto.acropolis.vmdiskaddressdto'
      storage_container_uuid:
        description: The container in which the backing vmdisk is provisioned. This field is unset when the drive is empty.
        type: string
  Java.util.map&lt;create.dto.uhura.vmconfigdto$vmfeature,Java.lang.boolean&gt;:
    title: java.util.Map&lt;create.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;
    type: object
  Java.util.map&lt;get.dto.uhura.vmconfigdto$vmfeature,Java.lang.boolean&gt;:
    title: java.util.Map&lt;get.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;
    type: object
  Java.util.map&lt;update.dto.uhura.vmconfigdto$vmfeature,Java.lang.boolean&gt;:
    title: java.util.Map&lt;update.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;
    type: object
  Update.dto.acropolis.bootconfigdto:
    title: update.dto.acropolis.BootConfigDTO
    type: object
    properties:
      boot_device_order:
        description: The boot device order. In case boot device is not specified or the specified boot device fails, VM will attempt to boot from connected devices in this device type order.
        type: array
        items:
          type: string
      boot_device_type:
        $ref: '#/definitions/BootDeviceType'
      disk_address:
        $ref: '#/definitions/Update.dto.acropolis.vmdiskaddressdto'
      mac_addr:
        description: Mac address of the NIC selected as boot device. At most one of this or diskAddress field should be set.
        type: string
  Update.dto.acropolis.returnvaluedto$taskiddto:
    title: update.dto.acropolis.ReturnValueDTO$TaskIdDTO
    type: object
    properties:
      task_uuid:
        description: UUID of the task.
        type: string
  Update.dto.acropolis.vmdiskaddressdto:
    title: update.dto.acropolis.VMDiskAddressDTO
    type: object
    properties:
      device_bus:
        $ref: '#/definitions/DeviceBus'
      device_index:
        description: Index of the device on the adapter type. If left unspecified, the system will allocate the next available slot on the default bus.
        type: integer
        format: int32
      ndfs_filepath:
        description: NDFS path to existing virtual disk. This field will not be set when this message is used in a create mode.When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.
        type: string
      vmdisk_uuid:
        description: Virtual disk identifier. This field will not be set when this message is used in a create mode. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.
        type: string
      volume_group_uuid:
        description: ''
        type: string
  Update.dto.acropolis.vmnicspecdto:
    title: update.dto.acropolis.VMNicSpecDTO
    type: object
    properties:
      network_uuid:
        description: The network to which the NIC is attached
        type: string
      adapter_type:
        $ref: '#/definitions/AdapterType'
      mac_address:
        description: The MAC address of the NIC
        type: string
      model:
        description: Virtual hardware model.
        type: string
      request_ip:
        description: >-
          If request_ip is true

          If 'requestedIpAddress' is set then request that IP from the network. If it's a managed network then request a dynamic IP from the network. Otherwise don't request an IP. If requestIp is false, then don't request an IP at all, regardless of whether or not the 'requestedIpAddress' is set and whether or the network is managed or not.
        type: boolean
      requested_ip_address:
        description: Requested IP address.
        type: string
    required:
    - network_uuid
  Update.dto.acropolis.vmnicupdatedto:
    title: update.dto.acropolis.VMNicUpdateDTO
    type: object
    properties:
      nic_spec:
        $ref: '#/definitions/Update.dto.acropolis.vmnicspecdto'
      nic_id:
        description: ID of the Virtual Machine NIC to be updated. This is basically the MAC address of the NIC.
        type: string
      uuid:
        description: UUID of the Virtual Machine to update the NIC on.
        type: string
      vm_logical_timestamp:
        description: Logical timestamp specified for consistency. This can be obtained from the Virtual Machine object.
        type: integer
        format: int64
    required:
    - nic_spec
  Update.dto.uhura.gpuconfigdto:
    title: update.dto.uhura.GPUConfigDTO
    type: object
    properties:
      device_id:
        description: Device ID of the GPU resource.
        type: integer
        format: int32
      gpu_type:
        $ref: '#/definitions/GpuType'
      gpu_vendor:
        $ref: '#/definitions/GpuVendor'
    required:
    - device_id
  Update.dto.uhura.vmdiskdto:
    title: update.dto.uhura.VMDiskDTO
    type: object
    properties:
      disk_address:
        $ref: '#/definitions/Update.dto.acropolis.vmdiskaddressdto'
      flash_mode_enabled:
        description: Flash mode enabled or not for the volume
        type: boolean
      is_cdrom:
        description: Whether this is a CD-ROM drive. The default value is 'false'
        type: boolean
      is_empty:
        description: Whether the drive should be empty. This field only applies to CD-ROM drives, otherwise it is ignored. If this field is set to true and the drive is a CD-ROM, then the disk creation field 'vmDiskCreate' should be ignored. The default value is 'false'
        type: boolean
      is_scsi_pass_through:
        description: Whether the SCSI disk should be attached in passthrough mode to pass all SCSI commands directly to Stargate via iSCSI. The default value is true.
        type: boolean
      is_thin_provisioned:
        description: Whether the disk is thin provisioned. This field applies to only ESX managed VMs.
        type: boolean
      vm_disk_clone:
        $ref: '#/definitions/Update.dto.uhura.vmdiskclonedto'
      vm_disk_create:
        $ref: '#/definitions/Update.dto.uhura.vmdiskcreatedto'
    required:
    - disk_address
  Update.dto.uhura.vmconfigdto:
    title: update.dto.uhura.VmConfigDTO
    type: object
    properties:
      boot:
        $ref: '#/definitions/Update.dto.acropolis.bootconfigdto'
      description:
        description: Description for the Virtual Machine.
        type: string
      ha_priority:
        description: Priority for restarting in case of HA event.
        type: integer
        format: int64
      memory_mb:
        description: RAM in megabytes assigned to the Virtual Machine.
        type: integer
        format: int64
      memory_reservation_mb:
        description: RAM, in megabytes reserved for the Virtual Machine.
        type: integer
        format: int64
      name:
        description: The Virtual Machine human readable name.
        type: string
      num_cores_per_vcpu:
        description: Number of cores assigned to each VCPUs.
        type: integer
        format: int32
      num_vcpus:
        description: Number of VCPUs assigned to the Virtual Machine.
        type: integer
        format: int32
      storage_container_uuid:
        description: Storage container on which the VM configuration files should be created. Required for ESX, Hyper-V. Not applicable for other hypervisors.
        type: string
      timezone:
        description: The timezone for the VM's hardware clock. Any updates to the timezone will be applied during the next VM power cycle (but not reset). The default is UTC.
        type: string
      uuid:
        description: UUID of the VM.
        type: string
      vcpu_reservation_hz:
        description: CPU, in Hertz reserved for the Virtual Machine.
        type: integer
        format: int64
      vm_disks:
        description: List of disk specification to add to the Virtual Machine.
        type: array
        items:
          $ref: '#/definitions/Update.dto.uhura.vmdiskdto'
      vm_features:
        $ref: '#/definitions/Java.util.map&lt;update.dto.uhura.vmconfigdto$vmfeature,Java.lang.boolean&gt;'
      vm_gpus:
        description: List of GPUs requested for the Virtual Machine. If "gpus_assigned" is True, then this field represents the assigned physical GPUs.
        type: array
        items:
          $ref: '#/definitions/Update.dto.uhura.gpuconfigdto'
      vm_logical_timestamp:
        description: Logical timestamp specified for consistency. This can be obtained from the Virtual Machine object.
        type: integer
        format: int64
      vm_nics:
        description: List of nics to be added to the Virtual Machine.
        type: array
        items:
          $ref: '#/definitions/Update.dto.acropolis.vmnicspecdto'
  Update.dto.uhura.vmdiskclonedto:
    title: update.dto.uhura.VmDiskCloneDTO
    type: object
    properties:
      disk_address:
        $ref: '#/definitions/Update.dto.acropolis.vmdiskaddressdto'
      minimum_size:
        description: The minimum size of the resulting clone in bytes. This should only be specified if 'vmdisk_uuid' is specified.
        type: integer
        format: int64
      snapshot_group_uuid:
        description: UUID of the snapshot consistency group from which to clone a snapshot vmdisk.
        type: string
      storage_container_uuid:
        description: The Uuid of the storage container in which the specified image or vmdisk is stored. If the source is a vmdisk, this field is recommended, but optional. If the source is a snapshot vmdisk, this field is required. If the source is an absolute image path, this field is prohibited. If the source is a relative image path, this field is required.
        type: string
  Update.dto.uhura.vmdiskcreatedto:
    title: update.dto.uhura.VmDiskCreateDTO
    type: object
    properties:
      size:
        description: Size of the Virtual Machine disk to be created in bytes.
        type: integer
        format: int64
      storage_container_uuid:
        description: UUID of container to create disk in. If this is specified, then Container Name and ID should not be specified.
        type: string
  response_500:
    title: response_500
    type: object
    properties: 
      message: 
        description: high level / general response message
        type: string
      detailed_message: 
        description: detailed response, usually a java dump
        type: string      
      error_code: 
        type: array
        items:
          $ref: '#/definitions/error_code'
  error_code: 
    title: error code
    type: object
    properties: 
      code: 
        description: look me up! (no idea where this comes from)
        type: integer
      help_url: 
        description: link to http://my.nutanix.com ... should this change?
        type: string  
parameters:
  uuid:
    name: uuid
    description: Id of the Virtual Machine
    in: path
    required: true
    type: string
    format: UUID
    pattern: '^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$'
    x-example: '6a5c75f8-5b13-4f1b-91fd-723f04375ad5'
  mac_address:
    name: mac_address
    description: Virtual Machine NIC identifier (MAC address)
    in: path
    required: true
    type: string
    pattern: '^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$'
    x-example: '50:6b:8d:ee:de:2b'
securityDefinitions:
  basicAuth:
    type: basic
security:
  - basicAuth: []

responses:
  response_500:
    description: Error 500
    schema:
      $ref: '#/definitions/response_500'
    headers:
      content-type: 
        type: string
        default: 'application/json'
      server:
        description: Should always return Nutanix Prism
        type: string
        default: 'Nutanix Prism'
      x-ntnx-env:
        description: The Nutanix Prism environemn
        type: string
        enum:
          - PE
          - PC
      exception:
        description: Describes the error hit in an error or exception condition
        type: string
    examples:
      application/json:
        message: "Error occurred while getting VM list"
        detailed_message: "com.nutanix.prism.exception.vmmanagement.VMAdministrationException: ..."
        error_code: 
          code: 1202
          help_url: "http://my.nutanix.com"


# headers
# server: Nutanix Prism
# x-ntnx-env: PE