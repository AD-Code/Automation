swagger: '2.0'
info:
  version: 'v2.0'
  title: Swagger API
host: any_cvm_ip:9440
basePath: /api/nutanix/v2.0
schemes:
- https
consumes:
- application/json
produces:
- application/json
paths:
  /images/:
    get:
      description: Get the list of Disk Images.
      summary: getImages
      operationId: ImagesGet
      produces:
      - application/json
      parameters:
      - name: include_vm_disk_sizes
        in: query
        required: false
        type: boolean
        description: Include VmDisk sizes
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Get.base.entitycollection&lt;get.dto.acropolis.imageinfodto&gt;'
          examples: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    post:
      description: Create a Disk Image.
      summary: createImage
      operationId: ImagesPost
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        description: Image Creation Specs
        schema:
          $ref: '#/definitions/Create.dto.acropolis.imagespecdto'
      - name: X-NTNX-PC-UUID
        in: header
        required: false
        type: string
        description: ''
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Create.dto.acropolis.returnvaluedto$taskiddto'
          examples: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /images/{uuid}/:
    get:
      description: Get details of a specific Image based on the given Id.
      summary: getImage
      operationId: ImagesByUuidGet
      produces:
      - application/json
      parameters:
      - name: uuid
        in: path
        required: true
        type: string
        description: Id of the Image
      - name: include_vm_disk_sizes
        in: query
        required: false
        type: boolean
        description: Include VmDisk size
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Get.dto.acropolis.imageinfodto'
          examples: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    put:
      description: Update a Disk Image.
      summary: updateImage
      operationId: ImagesByUuidPut
      produces:
      - application/json
      parameters:
      - name: uuid
        in: path
        required: true
        type: string
        description: Id of the Disk Image
      - name: body
        in: body
        required: true
        description: Disk Image Update Info
        schema:
          $ref: '#/definitions/Update.dto.acropolis.imagespecdto'
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Update.dto.acropolis.returnvaluedto$taskiddto'
          examples: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    delete:
      description: Delete a Disk Image.
      summary: deleteImage
      operationId: ImagesByUuidDelete
      produces:
      - application/json
      parameters:
      - name: uuid
        in: path
        required: true
        type: string
        description: Id of the Image
      - name: logical_timestamp
        in: query
        required: false
        type: integer
        format: int32
        description: Logical timestamp for synchronized delete
      - name: X-NTNX-PC-UUID
        in: header
        required: false
        type: string
        description: ''
      responses:
        200:
          description: ''
          schema:
            $ref: '#/definitions/Delete.dto.acropolis.returnvaluedto$taskiddto'
          examples: {}
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
definitions:
  ChecksumType:
    title: checksum_type
    example: SHA_256
    x-enum-elements:
    - name: SHA_256
      description: ''
    - name: SHA_1
      description: ''
    type: string
    enum:
    - SHA_256
    - SHA_1
  Create.dto.acropolis.imageimportspecdto:
    title: create.dto.acropolis.ImageImportSpecDTO
    type: object
    properties:
      checksum:
        description: The Checksum in bytes.
        type: string
      checksum_type:
        $ref: '#/definitions/ChecksumType'
      storage_container_id:
        description: ID of a Storage Container which will contain the newly created Image. Storage container UUID, ID, or Name must be provided.
        type: integer
        format: int64
      storage_container_name:
        description: Name of a Storage Container which will contain the newly created Image. Storage container UUID, ID, or Name must be provided.
        type: string
      storage_container_uuid:
        description: UUID of a Storage Container which will contain the newly created Image. Storage container UUID, ID, or Name must be provided.
        type: string
      url:
        description: 'A string describing the source URL for the Image. Note that the source URL can point to an NFS or HTTP target. NFS URLs should look like: nfs://<source address>/<path to file>'
        type: string
  ImageType:
    title: image_type
    example: DISK_IMAGE
    x-enum-elements:
    - name: DISK_IMAGE
      description: ''
    - name: ISO_IMAGE
      description: ''
    type: string
    enum:
    - DISK_IMAGE
    - ISO_IMAGE
  Create.dto.acropolis.imagespecdto:
    title: create.dto.acropolis.ImageSpecDTO
    type: object
    properties:
      annotation:
        description: A string describing the Image.
        type: string
      image_import_spec:
        $ref: '#/definitions/Create.dto.acropolis.imageimportspecdto'
      image_type:
        $ref: '#/definitions/ImageType'
      name:
        description: The Image's human readable name.
        type: string
      uuid:
        description: A version 4 UUID that the client may specify for idempotence.
        type: string
      vm_disk_clone_spec:
        $ref: '#/definitions/Create.dto.uhura.vmdiskclonedto'
  Create.dto.acropolis.returnvaluedto$taskiddto:
    title: create.dto.acropolis.ReturnValueDTO$TaskIdDTO
    type: object
    properties:
      task_uuid:
        description: UUID of the task.
        type: string
  DeviceBus:
    title: device_bus
    example: SCSI
    x-enum-elements:
    - name: SCSI
      description: ''
    - name: IDE
      description: ''
    - name: PCI
      description: ''
    - name: SATA
      description: ''
    - name: SPAPR
      description: ''
    type: string
    enum:
    - SCSI
    - IDE
    - PCI
    - SATA
    - SPAPR
  Create.dto.acropolis.vmdiskaddressdto:
    title: create.dto.acropolis.VMDiskAddressDTO
    type: object
    properties:
      device_bus:
        $ref: '#/definitions/DeviceBus'
      device_index:
        description: Index of the device on the adapter type. If left unspecified, the system will allocate the next available slot on the default bus.
        type: integer
        format: int32
      ndfs_filepath:
        description: NDFS path to existing virtual disk. This field will not be set when this message is used in a create mode.When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.
        type: string
      vmdisk_uuid:
        description: Virtual disk identifier. This field will not be set when this message is used in a create mode. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.
        type: string
      volume_group_uuid:
        description: ''
        type: string
  Create.dto.uhura.vmdiskclonedto:
    title: create.dto.uhura.VmDiskCloneDTO
    type: object
    properties:
      disk_address:
        $ref: '#/definitions/Create.dto.acropolis.vmdiskaddressdto'
      minimum_size:
        description: The minimum size of the resulting clone in bytes. This should only be specified if 'vmdisk_uuid' is specified.
        type: integer
        format: int64
      snapshot_group_uuid:
        description: UUID of the snapshot consistency group from which to clone a snapshot vmdisk.
        type: string
      storage_container_uuid:
        description: The Uuid of the storage container in which the specified image or vmdisk is stored. If the source is a vmdisk, this field is recommended, but optional. If the source is a snapshot vmdisk, this field is required. If the source is an absolute image path, this field is prohibited. If the source is a relative image path, this field is required.
        type: string
    required:
    - disk_address
  Delete.dto.acropolis.returnvaluedto$taskiddto:
    title: delete.dto.acropolis.ReturnValueDTO$TaskIdDTO
    type: object
    properties:
      task_uuid:
        description: UUID of the task.
        type: string
  Get.base.entitycollection&lt;get.dto.acropolis.imageinfodto&gt;:
    title: get.base.EntityCollection&lt;get.dto.acropolis.ImageInfoDTO&gt;
    type: object
    properties:
      entities:
        description: ''
        type: array
        items:
          $ref: '#/definitions/Get.dto.acropolis.imageinfodto'
      error_info:
        $ref: '#/definitions/Get.base.errorinfo'
      metadata:
        $ref: '#/definitions/Get.base.metadata'
  Get.base.errorinfo:
    title: get.base.ErrorInfo
    type: object
    properties:
      count:
        description: ''
        type: integer
        format: int64
      entity_list:
        description: ''
        type: array
        items:
          type: string
      message:
        description: ''
        type: string
  Get.base.metadata:
    title: get.base.Metadata
    type: object
    properties:
      count:
        description: ''
        type: integer
        format: int32
      end_index:
        description: ''
        type: integer
        format: int32
      filter_criteria:
        description: ''
        type: string
      grand_total_entities:
        description: ''
        type: integer
        format: int32
      next_cursor:
        description: ''
        type: string
      page:
        description: ''
        type: integer
        format: int32
      previous_cursor:
        description: ''
        type: string
      search_string:
        description: ''
        type: string
      sort_criteria:
        description: ''
        type: string
      start_index:
        description: ''
        type: integer
        format: int32
      total_entities:
        description: ''
        type: integer
        format: int32
  ImageState:
    title: image_state
    example: ACTIVE
    x-enum-elements:
    - name: ACTIVE
      description: ''
    - name: INACTIVE
      description: ''
    type: string
    enum:
    - ACTIVE
    - INACTIVE
  Get.dto.acropolis.imageinfodto:
    title: get.dto.acropolis.ImageInfoDTO
    type: object
    properties:
      annotation:
        description: A string describing the Image.
        type: string
      checksum:
        description: The Checksum in bytes.
        type: string
      checksum_type:
        $ref: '#/definitions/ChecksumType'
      created_time_in_usecs:
        description: The epoch time in microseconds when this image was created.
        type: integer
        format: int64
      deleted:
        description: Indicates whether the image has been deleted or not.
        type: boolean
      image_state:
        $ref: '#/definitions/ImageState'
      image_type:
        $ref: '#/definitions/ImageType'
      logical_timestamp:
        description: The Image logical timestamp. This can be used as input to other Image related APIs for consistency
        type: integer
        format: int64
      name:
        description: A string depicting the Image name.
        type: string
      storage_container_id:
        description: An ID identifying the container the Image resides.
        type: integer
        format: int64
      storage_container_uuid:
        description: A version 4 UUID identifying the container where the Image resides.
        type: string
      updated_time_in_usecs:
        description: The epoch time in microseconds when this image was updated.
        type: integer
        format: int64
      uuid:
        description: A version 4 UUID identifying the Image.
        type: string
      vm_disk_id:
        description: A version 4 UUID identifying the backing VMDisk.
        type: string
      vm_disk_size:
        description: This is only filled in on demand whenever an image is fetched and the size is requested.
        type: integer
        format: int64
  Update.dto.acropolis.imageimportspecdto:
    title: update.dto.acropolis.ImageImportSpecDTO
    type: object
    properties:
      checksum:
        description: The Checksum in bytes.
        type: string
      checksum_type:
        $ref: '#/definitions/ChecksumType'
      storage_container_id:
        description: ID of a Storage Container which will contain the newly created Image. Storage container UUID, ID, or Name must be provided.
        type: integer
        format: int64
      storage_container_name:
        description: Name of a Storage Container which will contain the newly created Image. Storage container UUID, ID, or Name must be provided.
        type: string
      storage_container_uuid:
        description: UUID of a Storage Container which will contain the newly created Image. Storage container UUID, ID, or Name must be provided.
        type: string
      url:
        description: 'A string describing the source URL for the Image. Note that the source URL can point to an NFS or HTTP target. NFS URLs should look like: nfs://<source address>/<path to file>'
        type: string
  Update.dto.acropolis.imagespecdto:
    title: update.dto.acropolis.ImageSpecDTO
    type: object
    properties:
      annotation:
        description: A string describing the Image.
        type: string
      image_import_spec:
        $ref: '#/definitions/Update.dto.acropolis.imageimportspecdto'
      image_type:
        $ref: '#/definitions/ImageType'
      logical_timestamp:
        description: Logical timestamp specified for consistency. This can be obtained from the Image Info object.
        type: integer
        format: int64
      name:
        description: The Image's human readable name.
        type: string
      vm_disk_clone_spec:
        $ref: '#/definitions/Update.dto.uhura.vmdiskclonedto'
  Update.dto.acropolis.returnvaluedto$taskiddto:
    title: update.dto.acropolis.ReturnValueDTO$TaskIdDTO
    type: object
    properties:
      task_uuid:
        description: UUID of the task.
        type: string
  Update.dto.acropolis.vmdiskaddressdto:
    title: update.dto.acropolis.VMDiskAddressDTO
    type: object
    properties:
      device_bus:
        $ref: '#/definitions/DeviceBus'
      device_index:
        description: Index of the device on the adapter type. If left unspecified, the system will allocate the next available slot on the default bus.
        type: integer
        format: int32
      ndfs_filepath:
        description: NDFS path to existing virtual disk. This field will not be set when this message is used in a create mode.When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.
        type: string
      vmdisk_uuid:
        description: Virtual disk identifier. This field will not be set when this message is used in a create mode. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.
        type: string
      volume_group_uuid:
        description: ''
        type: string
  Update.dto.uhura.vmdiskclonedto:
    title: update.dto.uhura.VmDiskCloneDTO
    type: object
    properties:
      disk_address:
        $ref: '#/definitions/Update.dto.acropolis.vmdiskaddressdto'
      minimum_size:
        description: The minimum size of the resulting clone in bytes. This should only be specified if 'vmdisk_uuid' is specified.
        type: integer
        format: int64
      snapshot_group_uuid:
        description: UUID of the snapshot consistency group from which to clone a snapshot vmdisk.
        type: string
      storage_container_uuid:
        description: The Uuid of the storage container in which the specified image or vmdisk is stored. If the source is a vmdisk, this field is recommended, but optional. If the source is a snapshot vmdisk, this field is required. If the source is an absolute image path, this field is prohibited. If the source is a relative image path, this field is required.
        type: string
