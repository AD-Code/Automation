{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/PrismGateway/services/rest/v2.0",
    "resourcePath": "/hosts",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/hosts/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of Physical Hosts.",
                    "notes": "Get the list of Physical Hosts configured in the cluster.",
                    "type": "get.base.EntityCollection&lt;get.dto.appliance.configuration.NodeDTO&gt;",
                    "nickname": "getHosts",
                    "parameters": [
                        {
                            "name": "count",
                            "description": "Number of Physical Hosts to retrieve",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "filter_criteria",
                            "description": "Filter criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "sort_criteria",
                            "description": "Sort criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "search_string",
                            "description": "Search string",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "search_attribute_list",
                            "description": "Search attribute list",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "projection",
                            "description": "Projections on the attributes",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/alerts",
            "operations": [
                {
                    "deprecated": "true",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of alerts generated on any Host.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getHostAlerts",
                    "parameters": [
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of alerts",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "resolved",
                            "description": "Alerts which have been resolved",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Alerts which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "severity",
                            "description": "Alert severities",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "alert_type_uuid",
                            "description": "Alert type ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/events",
            "operations": [
                {
                    "deprecated": "true",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of events generated on any Host.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getHostEvents",
                    "parameters": [
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of events",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Events which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/gpu_profiles",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of virtual GPU profiles for all physical Hosts.",
                    "notes": "Get the list of virtual GPU profiles for all physical Hosts.",
                    "type": "get.base.EntityCollection&lt;get.dto.uhura.VirtualGPUProfileDTO&gt;",
                    "nickname": "getVirtualGpuProfiles",
                    "parameters": [],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/host_gpus",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of GPUs for all physical Host.",
                    "notes": "Get the list of GPUs for all physical Host.",
                    "type": "get.base.EntityCollection&lt;get.dto.uhura.HostGPUDTO&gt;",
                    "nickname": "getHostGpus",
                    "parameters": [
                        {
                            "name": "count",
                            "description": "Number of host GPUs to retrieve",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "filter_criteria",
                            "description": "Filter criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "sort_criteria",
                            "description": "Sort criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "search_string",
                            "description": "Search string",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/{uuid}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get a Physical Host.",
                    "notes": "Get a Physical Host with the specified id.",
                    "type": "get.dto.appliance.configuration.NodeDTO",
                    "nickname": "getHost",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of a Physical Host",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "projection",
                            "description": "Projections on the attributes",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/{uuid}/alerts",
            "operations": [
                {
                    "deprecated": "true",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of alerts generated on a specified Host.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getAlertsForHost",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of a Host",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of alerts",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "resolved",
                            "description": "Alerts which have been resolved",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Alerts which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "severity",
                            "description": "Alert severities",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "alert_type_uuid",
                            "description": "Alert type ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/{uuid}/enter_maintenance_mode",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Put a host in maintenance mode.",
                    "notes": "Put a host in maintenance mode. <br/><br/>It can be specified if Virtual Machines currently running on the host need to be powered off, live migrated or cold migrated. The host will be marked as unschedulable, so that no new Virtual Machines can be instantiated on it. Subsequently, an attempt is made to evacuate VMs from the host. <br/><br/>If the evacuation attempt fails (e.g., because there are insufficient resources available elsewhere in the cluster), the host will remain in the entering maintenance mode state, where it is marked unschedulable, waiting for user remediation. <br/><br/>This operation is idempotent and can be run again with different options like powering off the Virtual Machines, live or cold migrating them. <br/><br/>This is also an asynchronous operation that results in the creation of a task object. <br/><br/>The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "enterMaintenanceMode",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of host to put in maintenance mode",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Maintenance mode options",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.acropolis.MaintenanceModeDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/{uuid}/events",
            "operations": [
                {
                    "deprecated": "true",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of events generated on a specified Host.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getEventsForHost",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of a Host",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of events",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Events which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/{uuid}/exit_maintenance_mode",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Pull a host out of maintenance mode or abort a prior attempt.",
                    "notes": "Pull a host out of maintenance mode or abort a prior attempt to enter maintenance mode even if the attempt is ongoing. <br/><br/>This is an idempotent operation. If the host is no longer in maintenance mode, this command has no effect. <br/><br/>This is an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API. <br/><br/>If a logical timestamp is specified, then this operation will be rejected if the logical timestamp specified is not the value of the host logical timestamp. The logical timestamp can be obtained from the host object.",
                    "type": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "exitMaintenanceMode",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of host to pull out of maintenance mode",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Logical timestamp associated with host object",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.acropolis.RequestValueDTO$LogicalTimestampDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/{uuid}/host_gpus",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of GPUs for a physical Host.",
                    "notes": "Get the list of GPUs for a physical Host.",
                    "type": "get.base.EntityCollection&lt;get.dto.uhura.HostGPUDTO&gt;",
                    "nickname": "getGpusforHost",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of the Host",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "count",
                            "description": "Number of host GPUs to retrieve",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "filter_criteria",
                            "description": "Filter criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "sort_criteria",
                            "description": "Sort criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "search_string",
                            "description": "Search string",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/{uuid}/host_gpus/{gpu_uuid}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get a particular GPU for a physical Host.",
                    "notes": "Get a particular GPU for a physical Host.",
                    "type": "get.dto.uhura.HostGPUDTO",
                    "nickname": "getGpuforHost",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of the Host",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "gpu_uuid",
                            "description": "UUID of the Host GPU",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/{uuid}/host_gpus/{gpu_uuid}/stats/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get stats for a particular GPU for a physical Host.",
                    "notes": "Get stats for a particular GPU for a physical Host.",
                    "type": "get.base.StatsResponse",
                    "nickname": "getHostGpuStats",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of the Host",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "gpu_uuid",
                            "description": "UUID of the Host GPU",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "metrics",
                            "description": "List of metrics",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "interval_in_secs",
                            "description": "Sampling interval of stats",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/hosts/{uuid}/stats/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the stats for a specified Physical Host.",
                    "notes": "If start time and end time are included in the query string, then historical stats are retrieved. Otherwise, the latest stats are retrieved.",
                    "type": "get.base.StatsResponse",
                    "nickname": "getHostStats",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of a Physical Host",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "metrics",
                            "description": "List of metrics",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "start_time_in_usecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "end_time_in_usecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "interval_in_secs",
                            "description": "Sampling interval of stats",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "create.dto.acropolis.MaintenanceModeDTO": {
            "id": "create.dto.acropolis.MaintenanceModeDTO",
            "required": [],
            "properties": {
                "evacuation_option": {
                    "description": "Indicates the action we take to evacuate Virtual Machines powered on the host. Virtual Machines can be either powered off, live migrated or cold migrated. ",
                    "enum": [
                        "POWER_OFF",
                        "COLD_MIGRATE",
                        "LIVE_MIGRATE"
                    ],
                    "notes": "VM Evacuation action.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "logical_timestamp": {
                    "description": "Logical timestamp that may be provided for consistency. This is an optional field. The current value for the logical timestamp can be obtained from the host object.",
                    "format": "int64",
                    "notes": "Logical timestamp provided for consistency.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "non_migratable_vm_option": {
                    "description": "Indicates the action to take for non migratable VMs.Non migratable VMs like ones with GPUs assigned can choose to be ACPI powered off or fail the maintenance mode.",
                    "enum": [
                        "BLOCK",
                        "ACPI_SHUTDOWN_AND_POWER_OFF"
                    ],
                    "notes": "Indicates the action to take for non migratable VMs.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.RequestValueDTO$LogicalTimestampDTO": {
            "id": "create.dto.acropolis.RequestValueDTO$LogicalTimestampDTO",
            "required": [],
            "properties": {
                "logical_timestamp": {
                    "description": "Logical timestamp that may be provided for consistency.",
                    "format": "int64",
                    "notes": "Logical timestamp provided for consistency.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.ReturnValueDTO$TaskIdDTO": {
            "id": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
            "required": [],
            "properties": {
                "task_uuid": {
                    "description": "UUID of the task.",
                    "notes": "UUID of the task.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.ResultContentDescriptor"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.appliance.configuration.NodeDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.appliance.configuration.NodeDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.appliance.configuration.NodeDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.uhura.HostGPUDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.uhura.HostGPUDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.uhura.HostGPUDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.uhura.VirtualGPUProfileDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.uhura.VirtualGPUProfileDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.uhura.VirtualGPUProfileDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.base.StatsResponse": {
            "id": "get.base.StatsResponse",
            "required": [],
            "properties": {
                "stats_specific_responses": {
                    "items": {
                        "$ref": "get.base.StatsResponse$StatsSpecificResponse"
                    },
                    "type": "array"
                }
            }
        },
        "get.base.StatsResponse$StatsSpecificResponse": {
            "id": "get.base.StatsResponse$StatsSpecificResponse",
            "required": [],
            "properties": {
                "interval_in_secs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "metric": {
                    "type": "string"
                },
                "start_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "successful": {
                    "type": "boolean"
                },
                "values": {
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.EntityMetadata": {
            "id": "get.dto.EntityMetadata",
            "required": [],
            "properties": {
                "additional_fields": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "context_hint_field": {
                    "type": "string"
                },
                "context_hint_value": {
                    "type": "string"
                },
                "entity_id": {
                    "type": "string"
                },
                "entity_name": {
                    "type": "string"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                }
            }
        },
        "get.dto.ResultContentDescriptor": {
            "id": "get.dto.ResultContentDescriptor",
            "required": [],
            "properties": {
                "metadata": {
                    "$ref": "get.dto.ResultMetadata"
                },
                "perspectives": {
                    "items": {
                        "$ref": "get.dto.ResultContentDescriptor$Perspective"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.ResultContentDescriptor$Perspective": {
            "id": "get.dto.ResultContentDescriptor$Perspective",
            "required": [],
            "properties": {
                "format": {
                    "enum": [
                        "TABLE",
                        "BAR_CHART",
                        "PIE_CHART",
                        "TIME_SERIES",
                        "KEY_VALUE",
                        "COUNT",
                        "HEALTH_SUMMARY",
                        "ALERT_INFO",
                        "CAPACITY",
                        "OTHER"
                    ],
                    "type": "string"
                },
                "metadata": {
                    "$ref": "get.dto.ResultMetadata"
                },
                "query": {},
                "result": {},
                "type": {
                    "type": "string"
                }
            }
        },
        "get.dto.ResultMetadata": {
            "id": "get.dto.ResultMetadata",
            "required": [],
            "properties": {
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filters": {
                    "items": {
                        "$ref": "get.dto.ResultMetadata$Filter"
                    },
                    "type": "array"
                },
                "instances": {
                    "items": {
                        "$ref": "get.dto.EntityMetadata"
                    },
                    "type": "array"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "get.dto.ResultMetadata$Filter": {
            "id": "get.dto.ResultMetadata$Filter",
            "required": [],
            "properties": {
                "display_for_rhs": {
                    "type": "string"
                },
                "lhs": {
                    "type": "string"
                },
                "operator": {
                    "description": "Operator for the filter.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "rhs": {
                    "type": "string"
                }
            }
        },
        "get.dto.alerts.AlertCauseDTO": {
            "id": "get.dto.alerts.AlertCauseDTO",
            "required": [],
            "properties": {
                "actions": {
                    "description": "Possible actions to resolve this alert",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "additional_links": {
                    "description": "Additional links",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "alert_namespace": {
                    "description": "Namespace this alert belongs to",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "cause": {
                    "description": "Detailed description",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "chart_queries": {
                    "$ref": "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;",
                    "description": "Charts that are relevant to this cause",
                    "typeName": "DEFAULT"
                },
                "details": {
                    "description": "Symptoms for this cause",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "has_global_details": {
                    "description": "Whether the alert has global details or not",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "id": {
                    "description": "Cause Id",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "num_resolved_count": {
                    "description": "Number of times this cause has resolved the alert",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "parent_cause_id": {
                    "description": "Id of the alert/cause this is a possible cause for",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "title": {
                    "description": "Short description",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "troubleshooting_steps": {
                    "description": "Steps to determine whether this is the cause.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO": {
            "id": "get.dto.alerts.AlertDTO",
            "required": [],
            "properties": {
                "acknowledged": {
                    "type": "boolean"
                },
                "acknowledged_by_username": {
                    "type": "string"
                },
                "acknowledged_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "affected_entities": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$AffectedEntity"
                    },
                    "type": "array"
                },
                "alert_details": {
                    "$ref": "get.dto.alerts.AlertDTO$AlertDetailsDTO"
                },
                "alert_title": {
                    "type": "string"
                },
                "alert_type_uuid": {
                    "type": "string"
                },
                "auto_resolved": {
                    "type": "boolean"
                },
                "check_id": {
                    "type": "string"
                },
                "classifications": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "context_types": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "context_values": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "created_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "detailed_message": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "impact_types": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "last_occurrence_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "node_uuid": {
                    "type": "string"
                },
                "originating_cluster_uuid": {
                    "type": "string"
                },
                "possible_causes": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertCauseDTO"
                    },
                    "type": "array"
                },
                "resolved": {
                    "type": "boolean"
                },
                "resolved_by_username": {
                    "type": "string"
                },
                "resolved_time_stamp_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "service_v_m_id": {
                    "type": "string"
                },
                "severity": {
                    "description": "This field describes the severity of the alert.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "user_defined": {
                    "type": "boolean"
                }
            }
        },
        "get.dto.alerts.AlertDTO$AffectedEntity": {
            "id": "get.dto.alerts.AlertDTO$AffectedEntity",
            "required": [],
            "properties": {
                "entity_name": {
                    "type": "string"
                },
                "entity_type": {
                    "type": "string"
                },
                "entity_type_display_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "get.dto.alerts.AlertDTO$AlertDetailsDTO": {
            "id": "get.dto.alerts.AlertDTO$AlertDetailsDTO",
            "required": [],
            "properties": {
                "metric_details": {
                    "description": "List of metric details associated with the alert",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$MetricDetails"
                    },
                    "notes": "List of metric details associated with the alert",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "severity_trails": {
                    "description": "List that contains severity level change details",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$SeverityTrail"
                    },
                    "notes": "List that contains severity level change details",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$MetricDetails": {
            "id": "get.dto.alerts.AlertDTO$MetricDetails",
            "required": [],
            "properties": {
                "comparison_operator": {
                    "description": "Comparison Operator to be applied for teh values.",
                    "notes": "Comparison Operator",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "condition_type": {
                    "description": "Condition Type that the current metric is associated with.",
                    "enum": [
                        "STATIC_THRESHOLD",
                        "ANOMALY",
                        "SAFETY_ZONE"
                    ],
                    "notes": "Condition Type that the current metric is associated with.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "data_type": {
                    "description": "Data Type of the value.",
                    "enum": [
                        "LONG",
                        "DOUBLE",
                        "BOOLEAN",
                        "STRING"
                    ],
                    "notes": "Data Type of the value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entity_id": {
                    "description": "UUID of the entity",
                    "notes": "UUID of the entity",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entity_type": {
                    "description": "Entity Type",
                    "notes": "Entity Type",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_display_name": {
                    "description": "Display name of the metric",
                    "notes": "Display name of the metric",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_name": {
                    "description": "Name of the metric",
                    "notes": "Name of the metric",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_value_details": {
                    "description": "List of metric values at different instances of time in the alert lifecycle",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$MetricValueDetails"
                    },
                    "notes": "List of metric values at different instances of time in the alert lifecycle",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "unit": {
                    "description": "Unit of the metric value.",
                    "notes": "Unit of the metric value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$MetricValueDetails": {
            "id": "get.dto.alerts.AlertDTO$MetricValueDetails",
            "required": [],
            "properties": {
                "metric_threshold_value": {
                    "description": "Threshold value of the metric that was specified in the policy at that given time.",
                    "notes": "Threshold value of the metric that was specified in the policy at that given time.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metric_value": {
                    "description": "Actual value of the metric at that given time.",
                    "notes": "Actual value of the metric at that given time.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "state_change_time_stamp_in_usecs": {
                    "description": "Time at which the alert's state change occurred.",
                    "format": "int64",
                    "notes": "Time at which the alert's state change occurred.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$SeverityTrail": {
            "id": "get.dto.alerts.AlertDTO$SeverityTrail",
            "required": [],
            "properties": {
                "severity": {
                    "description": "Severity level of the alert. Can be INFO, WARNING or CRITICAL",
                    "notes": "Severity level of the alert. Can be INFO, WARNING or CRITICAL",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "severity_change_timestamp_in_usecs": {
                    "description": "Time at which the severity level change occurred",
                    "format": "int64",
                    "notes": "Time at which the severity level change occurred",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertSummaryDTO": {
            "id": "get.dto.alerts.AlertSummaryDTO",
            "required": [],
            "properties": {
                "alert_summaries": {
                    "$ref": "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;"
                },
                "count": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "get.dto.appliance.configuration.NodeDTO": {
            "id": "get.dto.appliance.configuration.NodeDTO",
            "required": [],
            "properties": {
                "alert_summary": {
                    "$ref": "get.dto.alerts.AlertSummaryDTO"
                },
                "backplane_ip": {
                    "type": "string"
                },
                "bios_model": {
                    "description": "Specifies the model of bios, present on the node",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "bios_version": {
                    "description": "Specifies the version of bios, present on the node",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "block_location": {
                    "type": "string"
                },
                "block_model": {
                    "type": "string"
                },
                "block_model_name": {
                    "type": "string"
                },
                "block_serial": {
                    "type": "string"
                },
                "bmc_model": {
                    "description": "Specifies the model of bmc, present on the node",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "bmc_version": {
                    "description": "Specifies the version of bmc, present on the node",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "boot_time_in_usecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "cluster_uuid": {
                    "type": "string"
                },
                "controller_vm_backplane_ip": {
                    "type": "string"
                },
                "cpu_capacity_in_hz": {
                    "format": "int64",
                    "type": "integer"
                },
                "cpu_frequency_in_hz": {
                    "format": "int64",
                    "type": "integer"
                },
                "cpu_model": {
                    "type": "string"
                },
                "default_vhd_location": {
                    "description": "The default location configured on the Hyper-V node for storing virtual hard disk files.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "default_vhd_storage_container_id": {
                    "description": "Specifies the ID of the Nutanix container if the default location for storing virtual hard disk files on the Hyper-V node happens to be a Nutanix container.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "default_vhd_storage_container_uuid": {
                    "description": "Specifies the UUID of the Nutanix container if the default location for storing virtual hard disk files on the Hyper-V node happens to be a Nutanix container.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "default_vm_location": {
                    "description": "The default location configured on the Hyper-V node for storing virtual machine configuration files.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "default_vm_storage_container_id": {
                    "description": "Specifies the Id of the Nutanix container if the default location for storing virtual machine configuration files on the Hyper-V node happens to be a Nutanix storage container.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "default_vm_storage_container_uuid": {
                    "description": "Specifies the UUID of the Nutanix container if the default location for storing virtual machine configuration files on the Hyper-V node happens to be a Nutanix storage container.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "disk_hardware_configs": {
                    "$ref": "java.util.Map&lt;java.lang.Integer, get.dto.appliance.configuration.DiskHardwareConfigDTO&gt;",
                    "description": "The disk hardware configurations",
                    "typeName": "DEFAULT"
                },
                "dynamic_ring_changing_node": {
                    "$ref": "get.dto.appliance.configuration.NodeDTO"
                },
                "failover_cluster_fqdn": {
                    "description": "The name of the Hyper-V failover cluster that this node is a part of. Applies only if the node runs Hyper-V",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "failover_cluster_node_state": {
                    "description": "If this node runs Hyper-V and is part of a failovercluster, this property specifies the state of the nodein the failover cluster.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpu_driver_version": {
                    "description": "Host driver version of the GPUs.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "has_csr": {
                    "type": "boolean"
                },
                "hba_firmwares_list": {
                    "description": "Specifies the version and model info of the hba, present on the node",
                    "items": {
                        "$ref": "get.dto.appliance.configuration.NodeDTO$HbaFirmware"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "health_summary": {
                    "$ref": "get.dto.health.check.HealthSummaryDTO"
                },
                "host_gpus": {
                    "description": "The host GPUs.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "host_in_maintenance_mode": {
                    "type": "boolean"
                },
                "host_maintenance_mode_reason": {
                    "type": "string"
                },
                "host_nic_ids": {
                    "description": "The host nic ids",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "hypervisor_address": {
                    "type": "string"
                },
                "hypervisor_full_name": {
                    "type": "string"
                },
                "hypervisor_key": {
                    "type": "string"
                },
                "hypervisor_password": {
                    "type": "string"
                },
                "hypervisor_state": {
                    "type": "string"
                },
                "hypervisor_type": {
                    "type": "string"
                },
                "hypervisor_username": {
                    "type": "string"
                },
                "ipmi_address": {
                    "type": "string"
                },
                "ipmi_password": {
                    "type": "string"
                },
                "ipmi_username": {
                    "type": "string"
                },
                "is_degraded": {
                    "type": "boolean"
                },
                "key_management_device_to_certificate_status": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;"
                },
                "management_server_name": {
                    "type": "string"
                },
                "memory_capacity_in_bytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "metadata_store_status": {
                    "type": "string"
                },
                "metadata_store_status_message": {
                    "type": "string"
                },
                "monitored": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "num_cpu_cores": {
                    "format": "int64",
                    "type": "integer"
                },
                "num_cpu_sockets": {
                    "format": "int64",
                    "type": "integer"
                },
                "num_cpu_threads": {
                    "format": "int64",
                    "type": "integer"
                },
                "num_v_ms": {
                    "format": "int64",
                    "type": "integer"
                },
                "oplog_disk_pct": {
                    "format": "float",
                    "type": "number"
                },
                "oplog_disk_size": {
                    "format": "int64",
                    "type": "integer"
                },
                "position": {
                    "$ref": "get.dto.appliance.configuration.NodePositionDTO"
                },
                "rdma_backplane_ips": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "reboot_pending": {
                    "description": "If this node runs Hyper-V, this property indicates that a reboot is pending for the earlier initiated domain joining to be complete.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "removal_status": {
                    "items": {
                        "enum": [
                            "NA",
                            "AWAITING_CONFIG_DATA_MIGRATION",
                            "AWAITING_DATA_MIGRATION",
                            "AWAITING_HOST_EVACUATION",
                            "AWAITING_CLUSTER_RESTART"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "serial": {
                    "type": "string"
                },
                "service_v_m_external_i_p": {
                    "type": "string"
                },
                "service_v_m_id": {
                    "type": "string"
                },
                "state": {
                    "enum": [
                        "NEW",
                        "NORMAL",
                        "MARKED_FOR_REMOVAL_BUT_NOT_DETACHABLE",
                        "DETACHABLE"
                    ],
                    "type": "string"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "usage_stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "uuid": {
                    "type": "string"
                },
                "vzone_name": {
                    "type": "string"
                }
            }
        },
        "get.dto.appliance.configuration.NodeDTO$HbaFirmware": {
            "id": "get.dto.appliance.configuration.NodeDTO$HbaFirmware",
            "required": [],
            "properties": {
                "hba_model": {
                    "description": "Specifies the model of hba, present on the node",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "hba_version": {
                    "description": "Specifies the version of hba, present on the node",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.appliance.configuration.NodePositionDTO": {
            "id": "get.dto.appliance.configuration.NodePositionDTO",
            "required": [],
            "properties": {
                "name": {
                    "type": "string"
                },
                "ordinal": {
                    "format": "int32",
                    "type": "integer"
                },
                "physical_position": {
                    "enum": [
                        "C",
                        "L",
                        "R",
                        "TL",
                        "TR",
                        "BL",
                        "BR"
                    ],
                    "type": "string"
                }
            }
        },
        "get.dto.health.check.EntityTypeHealthCheckSummaryDTO": {
            "id": "get.dto.health.check.EntityTypeHealthCheckSummaryDTO",
            "required": [],
            "properties": {
                "checks_in_error": {
                    "$ref": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;"
                },
                "detailed_check_summary": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;"
                },
                "entity_type": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "health_summary": {
                    "$ref": "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;"
                }
            }
        },
        "get.dto.health.check.HealthSummaryDTO": {
            "id": "get.dto.health.check.HealthSummaryDTO",
            "required": [],
            "properties": {
                "entity_type_summaries": {
                    "items": {
                        "$ref": "get.dto.health.check.EntityTypeHealthCheckSummaryDTO"
                    },
                    "type": "array"
                },
                "health_check_summaries": {
                    "$ref": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;"
                },
                "health_status": {
                    "enum": [
                        "Critical",
                        "Warning",
                        "Good",
                        "Unknown",
                        "Error"
                    ],
                    "type": "string"
                }
            }
        },
        "get.dto.uhura.GPUConfigDTO": {
            "id": "get.dto.uhura.GPUConfigDTO",
            "required": [],
            "properties": {
                "assignable": {
                    "description": "Whether the GPU can be assigned to a Virtual Machine.",
                    "notes": "Whether the GPU can be assigned to a Virtual Machine.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "device_id": {
                    "description": "Device ID of the GPU resource.",
                    "format": "int32",
                    "notes": "Device ID of the GPU resource.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "device_name": {
                    "description": "Vendor device name of the GPU resource.",
                    "notes": "Vendor device name of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "fraction": {
                    "description": "Fraction of the physical GPU. Only applicable for a vGPU instance.",
                    "format": "int32",
                    "notes": "Fraction of the physical GPU. Only applicable for a vGPU instance.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "frame_buffer_size_bytes": {
                    "description": "GPU framebuffer size in bytes.",
                    "format": "int64",
                    "notes": "GPU framebuffer size.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "gpu_mode": {
                    "description": "Current mode of the physical GPU. Not valid on vGPU resources.",
                    "enum": [
                        "UNUSED",
                        "USED_FOR_PASSTHROUGH",
                        "USED_FOR_VIRTUAL"
                    ],
                    "notes": "Current mode of the physical GPU.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpu_profile": {
                    "description": "Profile of the GPU.",
                    "notes": "Profile of the GPU.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpu_type": {
                    "description": "Type of the GPU resource.",
                    "enum": [
                        "PASS_THROUGH_GRAPHICS",
                        "PASS_THROUGH_COMPUTE",
                        "VIRTUAL"
                    ],
                    "notes": "Type of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpu_vendor": {
                    "description": "Vendor of the GPU resource.",
                    "enum": [
                        "NVIDIA",
                        "INTEL",
                        "AMD"
                    ],
                    "notes": "Vendor of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "guest_driver_version": {
                    "description": "Last determined guest driver version.",
                    "notes": "Last determined guest driver version.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "in_use": {
                    "description": "Whether the GPU resource is in use or not.",
                    "notes": "Whether the GPU resource is in use or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "licenses": {
                    "description": "List of license types associated with this GPU.",
                    "items": {
                        "type": "string"
                    },
                    "notes": "List of license types.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "max_resolution": {
                    "description": "Maximum resolution per display heads.",
                    "notes": "Maximum resolution per display heads.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "num_virtual_display_heads": {
                    "description": "Number of supported virtual display heads.",
                    "format": "int32",
                    "notes": "Number of supported virtual display heads.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "numa_node": {
                    "description": "The NUMA node where the GPU belongs to.",
                    "format": "int32",
                    "notes": "The NUMA node where the GPU belongs to.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "sbdf": {
                    "description": "Unique device information for the GPU resource.",
                    "notes": "Unique device information for the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vm_uuids": {
                    "description": "List of UUIDs of the Virtual Machines where the GPU resource is assigned.",
                    "items": {
                        "type": "string"
                    },
                    "notes": "List of UUIDs of the Virtual Machines where the GPU resource is assigned.",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.uhura.HostGPUDTO": {
            "id": "get.dto.uhura.HostGPUDTO",
            "required": [],
            "properties": {
                "cluster_name": {
                    "description": "Name of the cluster where the GPU resource is present.",
                    "notes": "Name of the cluster where the GPU resource is present.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "cluster_uuid": {
                    "description": "UUID of the cluster where the GPU resource is present.",
                    "notes": "UUID of the cluster where the GPU resource is present.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpu_config": {
                    "$ref": "get.dto.uhura.GPUConfigDTO",
                    "description": "Configuration of the GPU resource.",
                    "notes": "Configuration of the GPU resource.",
                    "typeName": "DEFAULT"
                },
                "id": {
                    "description": "ID of the GPU resource.",
                    "notes": "ID of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "node_id": {
                    "description": "Id of the node where the GPU resource is present.",
                    "notes": "Id of the node where the GPU resource is present.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "node_uuid": {
                    "description": "UUID of the node where the GPU resource is present.",
                    "notes": "UUID of the node where the GPU resource is present.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "num_vgpus_allocated": {
                    "description": "Number of vGPUs allocated.",
                    "format": "int32",
                    "notes": "Number of vGPUs allocated.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "UUID of the GPU resource.",
                    "notes": "UUID of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.uhura.VirtualGPUProfileDTO": {
            "id": "get.dto.uhura.VirtualGPUProfileDTO",
            "required": [],
            "properties": {
                "allocated_vm_uuids": {
                    "description": "List of UUIDs of virtual machines that have been allocated a GPU belonging to this profile.",
                    "items": {
                        "type": "string"
                    },
                    "notes": "List of UUIDs of virtual machines that have been allocated a GPU belonging to this profile.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "gpu_config": {
                    "$ref": "get.dto.uhura.GPUConfigDTO",
                    "description": "Configuration of the GPU resource.",
                    "notes": "Configuration of the GPU resource.",
                    "typeName": "DEFAULT"
                }
            }
        },
        "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;": {
            "id": "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.Integer, get.dto.appliance.configuration.DiskHardwareConfigDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.Integer, get.dto.appliance.configuration.DiskHardwareConfigDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.lang.String&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.lang.String&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;",
            "required": [],
            "properties": {}
        }
    }
}